{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9","program":"/home/bruno/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","image","--edition=2018","/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bmp\"","--cfg","feature=\"jpeg\"","--cfg","feature=\"png\"","-C","metadata=b365f238010a8d03","-C","extra-filename=-b365f238010a8d03","--out-dir","/home/bruno/grafico/target/rls/debug/deps","-L","dependency=/home/bruno/grafico/target/rls/debug/deps","--extern","bytemuck=/home/bruno/grafico/target/rls/debug/deps/libbytemuck-fb1deef47247477a.rmeta","--extern","byteorder=/home/bruno/grafico/target/rls/debug/deps/libbyteorder-cdbbc07100f440a1.rmeta","--extern","jpeg=/home/bruno/grafico/target/rls/debug/deps/libjpeg_decoder-cdb8bb0925ebac96.rmeta","--extern","num_iter=/home/bruno/grafico/target/rls/debug/deps/libnum_iter-296707c5f6ddb148.rmeta","--extern","num_rational=/home/bruno/grafico/target/rls/debug/deps/libnum_rational-94d6beab71b89984.rmeta","--extern","num_traits=/home/bruno/grafico/target/rls/debug/deps/libnum_traits-381fbacc730126e1.rmeta","--extern","png=/home/bruno/grafico/target/rls/debug/deps/libpng-5b8d2beca9a28a10.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/bruno/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/bruno/grafico/target/rls/debug/deps/libimage-b365f238010a8d03.rmeta"},"prelude":{"crate_id":{"name":"image","disambiguator":[10404315600920397247,11393260190736382806]},"crate_root":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src","external_crates":[{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":1,"id":{"name":"std","disambiguator":[18437716656233032650,2349106724991734091]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16851962707842592855,4932765248485690217]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3049591816127030880,10952373373500329976]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11587085401131637304,2097967498245787009]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[697141649018154369,16548652339936893370]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[15777040323210795675,4562741973928336648]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15931681355194650171,7679759071890480571]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[16378405889910241769,9643272937548158260]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[8261542656080474758,5147161130074218296]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[1712641478249352838,12464696676097716113]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[3715598662871405823,1939556143240013170]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[4641845549064414815,7418938888650694907]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[18127448783747998133,9149995038350923488]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[8742225116956546677,8424782546207546390]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","num":15,"id":{"name":"num_traits","disambiguator":[16526212608636247745,5123210403861911958]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","num":16,"id":{"name":"byteorder","disambiguator":[13987326121765680516,15480452527767592261]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","num":17,"id":{"name":"jpeg_decoder","disambiguator":[8492606231638396972,13014379876329348154]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","num":18,"id":{"name":"num_iter","disambiguator":[11460215149126383536,1523377521219394411]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","num":19,"id":{"name":"num_integer","disambiguator":[17981215894913375649,5724998066804730172]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","num":20,"id":{"name":"num_rational","disambiguator":[11608989345159469127,10154382581595007171]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","num":21,"id":{"name":"png","disambiguator":[18125752049808747646,12826522421853253037]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","num":22,"id":{"name":"bitflags","disambiguator":[3913220441560649978,12679321023898702919]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","num":23,"id":{"name":"deflate","disambiguator":[959138761097389024,17523016792066174684]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","num":24,"id":{"name":"adler32","disambiguator":[8467412924607621076,11106496881076554783]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","num":25,"id":{"name":"crc32fast","disambiguator":[1613743815919283518,1042524682097856430]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","num":26,"id":{"name":"cfg_if","disambiguator":[16691520207553097855,5782485460756469676]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","num":27,"id":{"name":"miniz_oxide","disambiguator":[664395055769767483,11871359606728158788]}},{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","num":28,"id":{"name":"bytemuck","disambiguator":[2325633085286788570,15919548525407852998]}}],"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":0,"byte_end":10148,"line_start":1,"line_end":274,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":2995},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7029,"byte_end":7038,"line_start":139,"line_end":139,"column_start":24,"column_end":33},"alias_span":null,"name":"ColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3034},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7040,"byte_end":7057,"line_start":139,"line_end":139,"column_start":35,"column_end":52},"alias_span":null,"name":"ExtendedColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3458},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7084,"byte_end":7088,"line_start":141,"line_end":141,"column_start":24,"column_end":28},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3459},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7084,"byte_end":7088,"line_start":141,"line_end":141,"column_start":24,"column_end":28},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":8}},{"kind":"Use","ref_id":{"krate":0,"index":3545},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7090,"byte_end":7095,"line_start":141,"line_end":141,"column_start":30,"column_end":35},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3546},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7090,"byte_end":7095,"line_start":141,"line_end":141,"column_start":30,"column_end":35},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":3400},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7097,"byte_end":7100,"line_start":141,"line_end":141,"column_start":37,"column_end":40},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3401},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7097,"byte_end":7100,"line_start":141,"line_end":141,"column_start":37,"column_end":40},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":10}},{"kind":"Use","ref_id":{"krate":0,"index":3487},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7102,"byte_end":7106,"line_start":141,"line_end":141,"column_start":42,"column_end":46},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3488},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7102,"byte_end":7106,"line_start":141,"line_end":141,"column_start":42,"column_end":46},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":11}},{"kind":"Use","ref_id":{"krate":0,"index":3429},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7108,"byte_end":7111,"line_start":141,"line_end":141,"column_start":48,"column_end":51},"alias_span":null,"name":"Bgr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3430},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7108,"byte_end":7111,"line_start":141,"line_end":141,"column_start":48,"column_end":51},"alias_span":null,"name":"Bgr","value":"","parent":{"krate":0,"index":12}},{"kind":"Use","ref_id":{"krate":0,"index":3516},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7113,"byte_end":7117,"line_start":141,"line_end":141,"column_start":53,"column_end":57},"alias_span":null,"name":"Bgra","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3517},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7113,"byte_end":7117,"line_start":141,"line_end":141,"column_start":53,"column_end":57},"alias_span":null,"name":"Bgra","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":2315},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7144,"byte_end":7154,"line_start":143,"line_end":143,"column_start":24,"column_end":34},"alias_span":null,"name":"ImageError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":91},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7156,"byte_end":7167,"line_start":143,"line_end":143,"column_start":36,"column_end":47},"alias_span":null,"name":"ImageResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2132},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7194,"byte_end":7210,"line_start":145,"line_end":145,"column_start":24,"column_end":40},"alias_span":null,"name":"AnimationDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2158},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7228,"byte_end":7240,"line_start":146,"line_end":146,"column_start":17,"column_end":29},"alias_span":null,"name":"GenericImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2145},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7258,"byte_end":7274,"line_start":147,"line_end":147,"column_start":17,"column_end":33},"alias_span":null,"name":"GenericImageView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2113},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7292,"byte_end":7304,"line_start":148,"line_end":148,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2126},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7322,"byte_end":7337,"line_start":149,"line_end":149,"column_start":17,"column_end":32},"alias_span":null,"name":"ImageDecoderExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2135},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7355,"byte_end":7367,"line_start":150,"line_end":150,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageEncoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3658},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7385,"byte_end":7396,"line_start":151,"line_end":151,"column_start":17,"column_end":28},"alias_span":null,"name":"ImageFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3701},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7414,"byte_end":7431,"line_start":152,"line_end":152,"column_start":17,"column_end":34},"alias_span":null,"name":"ImageOutputFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3726},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7449,"byte_end":7457,"line_start":153,"line_end":153,"column_start":17,"column_end":25},"alias_span":null,"name":"Progress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3741},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7504,"byte_end":7510,"line_start":155,"line_end":155,"column_start":17,"column_end":23},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2170},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7528,"byte_end":7536,"line_start":156,"line_end":156,"column_start":17,"column_end":25},"alias_span":null,"name":"SubImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1702},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7583,"byte_end":7597,"line_start":159,"line_end":159,"column_start":18,"column_end":32},"alias_span":null,"name":"GrayAlphaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1701},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7616,"byte_end":7625,"line_start":160,"line_end":160,"column_start":18,"column_end":27},"alias_span":null,"name":"GrayImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2964},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7676,"byte_end":7687,"line_start":162,"line_end":162,"column_start":18,"column_end":29},"alias_span":null,"name":"ImageBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1699},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7706,"byte_end":7714,"line_start":163,"line_end":163,"column_start":18,"column_end":26},"alias_span":null,"name":"RgbImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1700},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7733,"byte_end":7742,"line_start":164,"line_end":164,"column_start":18,"column_end":27},"alias_span":null,"name":"RgbaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2511},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7767,"byte_end":7778,"line_start":166,"line_end":166,"column_start":22,"column_end":33},"alias_span":null,"name":"FlatSamples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2218},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7815,"byte_end":7830,"line_start":169,"line_end":169,"column_start":25,"column_end":40},"alias_span":null,"name":"EncodableLayout","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2224},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7832,"byte_end":7841,"line_start":169,"line_end":169,"column_start":42,"column_end":51},"alias_span":null,"name":"Primitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2255},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7843,"byte_end":7848,"line_start":169,"line_end":169,"column_start":53,"column_end":58},"alias_span":null,"name":"Pixel","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":537},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7918,"byte_end":7930,"line_start":172,"line_end":172,"column_start":37,"column_end":49},"alias_span":null,"name":"guess_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":524},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7932,"byte_end":7936,"line_start":172,"line_end":172,"column_start":51,"column_end":55},"alias_span":null,"name":"load","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2055},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7965,"byte_end":7981,"line_start":173,"line_end":173,"column_start":27,"column_end":43},"alias_span":null,"name":"load_from_memory","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2056},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":7983,"byte_end":8011,"line_start":173,"line_end":173,"column_start":45,"column_end":73},"alias_span":null,"name":"load_from_memory_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2047},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8013,"byte_end":8017,"line_start":173,"line_end":173,"column_start":75,"column_end":79},"alias_span":null,"name":"open","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2051},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8038,"byte_end":8049,"line_start":174,"line_end":174,"column_start":20,"column_end":31},"alias_span":null,"name":"save_buffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2053},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8051,"byte_end":8074,"line_start":174,"line_end":174,"column_start":33,"column_end":56},"alias_span":null,"name":"save_buffer_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2049},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8076,"byte_end":8092,"line_start":174,"line_end":174,"column_start":58,"column_end":74},"alias_span":null,"name":"image_dimensions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3625},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8121,"byte_end":8133,"line_start":176,"line_end":176,"column_start":26,"column_end":38},"alias_span":null,"name":"DynamicImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2944},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8163,"byte_end":8168,"line_start":178,"line_end":178,"column_start":28,"column_end":33},"alias_span":null,"name":"Delay","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2937},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8170,"byte_end":8175,"line_start":178,"line_end":178,"column_start":35,"column_end":40},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1335},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8177,"byte_end":8183,"line_start":178,"line_end":178,"column_start":42,"column_end":48},"alias_span":null,"name":"Frames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1686},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8406,"byte_end":8419,"line_start":187,"line_end":187,"column_start":9,"column_end":22},"alias_span":null,"name":"ConvertBuffer","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1505},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8429,"byte_end":8444,"line_start":188,"line_end":188,"column_start":9,"column_end":24},"alias_span":null,"name":"EnumeratePixels","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1550},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8454,"byte_end":8472,"line_start":189,"line_end":189,"column_start":9,"column_end":27},"alias_span":null,"name":"EnumeratePixelsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1528},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8482,"byte_end":8495,"line_start":190,"line_end":190,"column_start":9,"column_end":22},"alias_span":null,"name":"EnumerateRows","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1570},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8505,"byte_end":8521,"line_start":191,"line_end":191,"column_start":9,"column_end":25},"alias_span":null,"name":"EnumerateRowsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1407},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8531,"byte_end":8537,"line_start":192,"line_end":192,"column_start":9,"column_end":15},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1432},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8547,"byte_end":8556,"line_start":193,"line_end":193,"column_start":9,"column_end":18},"alias_span":null,"name":"PixelsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1454},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8566,"byte_end":8570,"line_start":194,"line_end":194,"column_start":9,"column_end":13},"alias_span":null,"name":"Rows","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1481},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8580,"byte_end":8587,"line_start":195,"line_end":195,"column_start":9,"column_end":16},"alias_span":null,"name":"RowsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":2467},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/mod.rs","byte_start":27938,"byte_end":27942,"line_start":6,"line_end":6,"column_start":21,"column_end":25},"alias_span":null,"name":"Rect","value":"","parent":{"krate":0,"index":128}},{"kind":"Use","ref_id":{"krate":0,"index":2492},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45088,"byte_end":45098,"line_start":9,"line_end":9,"column_start":23,"column_end":33},"alias_span":null,"name":"FilterType","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":2497},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45136,"byte_end":45146,"line_start":11,"line_end":11,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":2498},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45136,"byte_end":45146,"line_start":11,"line_end":11,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":189}},{"kind":"Use","ref_id":{"krate":0,"index":2499},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45148,"byte_end":45156,"line_start":11,"line_end":11,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":2500},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45148,"byte_end":45156,"line_start":11,"line_end":11,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":190}},{"kind":"Use","ref_id":{"krate":0,"index":2501},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45158,"byte_end":45166,"line_start":11,"line_end":11,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":2502},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45158,"byte_end":45166,"line_start":11,"line_end":11,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":191}},{"kind":"Use","ref_id":{"krate":0,"index":2493},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45168,"byte_end":45175,"line_start":11,"line_end":11,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":2494},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45168,"byte_end":45175,"line_start":11,"line_end":11,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":192}},{"kind":"Use","ref_id":{"krate":0,"index":2495},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45177,"byte_end":45185,"line_start":11,"line_end":11,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":2496},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45177,"byte_end":45185,"line_start":11,"line_end":11,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":193}},{"kind":"Use","ref_id":{"krate":0,"index":249},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45244,"byte_end":45259,"line_start":15,"line_end":15,"column_start":5,"column_end":20},"alias_span":null,"name":"flip_horizontal","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":261},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45261,"byte_end":45285,"line_start":15,"line_end":15,"column_start":22,"column_end":46},"alias_span":null,"name":"flip_horizontal_in_place","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":251},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45287,"byte_end":45300,"line_start":15,"line_end":15,"column_start":48,"column_end":61},"alias_span":null,"name":"flip_vertical","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":263},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45302,"byte_end":45324,"line_start":15,"line_end":15,"column_start":63,"column_end":85},"alias_span":null,"name":"flip_vertical_in_place","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":236},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45326,"byte_end":45335,"line_start":15,"line_end":15,"column_start":87,"column_end":96},"alias_span":null,"name":"rotate180","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":259},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45341,"byte_end":45359,"line_start":16,"line_end":16,"column_start":5,"column_end":23},"alias_span":null,"name":"rotate180_in_place","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":238},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45361,"byte_end":45370,"line_start":16,"line_end":16,"column_start":25,"column_end":34},"alias_span":null,"name":"rotate270","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":234},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45372,"byte_end":45380,"line_start":16,"line_end":16,"column_start":36,"column_end":44},"alias_span":null,"name":"rotate90","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":243},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45382,"byte_end":45394,"line_start":16,"line_end":16,"column_start":46,"column_end":58},"alias_span":null,"name":"rotate180_in","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":240},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45396,"byte_end":45407,"line_start":16,"line_end":16,"column_start":60,"column_end":71},"alias_span":null,"name":"rotate90_in","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":246},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45409,"byte_end":45421,"line_start":16,"line_end":16,"column_start":73,"column_end":85},"alias_span":null,"name":"rotate270_in","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":253},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45423,"byte_end":45441,"line_start":16,"line_end":16,"column_start":87,"column_end":105},"alias_span":null,"name":"flip_horizontal_in","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":256},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45443,"byte_end":45459,"line_start":16,"line_end":16,"column_start":107,"column_end":123},"alias_span":null,"name":"flip_vertical_in","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":412},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45506,"byte_end":45510,"line_start":20,"line_end":20,"column_start":24,"column_end":28},"alias_span":null,"name":"blur","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":405},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45512,"byte_end":45521,"line_start":20,"line_end":20,"column_start":30,"column_end":39},"alias_span":null,"name":"filter3x3","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":410},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45523,"byte_end":45529,"line_start":20,"line_end":20,"column_start":41,"column_end":47},"alias_span":null,"name":"resize","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":382},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45531,"byte_end":45540,"line_start":20,"line_end":20,"column_start":49,"column_end":58},"alias_span":null,"name":"thumbnail","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":415},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45542,"byte_end":45551,"line_start":20,"line_end":20,"column_start":60,"column_end":69},"alias_span":null,"name":"unsharpen","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":293},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45601,"byte_end":45609,"line_start":23,"line_end":23,"column_start":26,"column_end":34},"alias_span":null,"name":"brighten","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":288},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45611,"byte_end":45619,"line_start":23,"line_end":23,"column_start":36,"column_end":44},"alias_span":null,"name":"contrast","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":327},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45621,"byte_end":45627,"line_start":23,"line_end":23,"column_start":46,"column_end":52},"alias_span":null,"name":"dither","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":284},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45629,"byte_end":45638,"line_start":23,"line_end":23,"column_start":54,"column_end":63},"alias_span":null,"name":"grayscale","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":299},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45640,"byte_end":45649,"line_start":23,"line_end":23,"column_start":65,"column_end":74},"alias_span":null,"name":"huerotate","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":332},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45651,"byte_end":45663,"line_start":23,"line_end":23,"column_start":76,"column_end":88},"alias_span":null,"name":"index_colors","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":286},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45665,"byte_end":45671,"line_start":23,"line_end":23,"column_start":90,"column_end":96},"alias_span":null,"name":"invert","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":2487},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45698,"byte_end":45705,"line_start":24,"line_end":24,"column_start":26,"column_end":33},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":2488},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45698,"byte_end":45705,"line_start":24,"line_end":24,"column_start":26,"column_end":33},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":222}},{"kind":"Use","ref_id":{"krate":0,"index":304},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45707,"byte_end":45715,"line_start":24,"line_end":24,"column_start":35,"column_end":43},"alias_span":null,"name":"ColorMap","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":468},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/mod.rs","byte_start":108730,"byte_end":108736,"line_start":5,"line_end":5,"column_start":23,"column_end":29},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":446}},{"kind":"Use","ref_id":{"krate":0,"index":832},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191765,"byte_end":191775,"line_start":10,"line_end":10,"column_start":24,"column_end":34},"alias_span":null,"name":"BmpDecoder","value":"","parent":{"krate":0,"index":721}},{"kind":"Use","ref_id":{"krate":0,"index":948},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191878,"byte_end":191888,"line_start":12,"line_end":12,"column_start":25,"column_end":35},"alias_span":null,"name":"BmpEncoder","value":"","parent":{"krate":0,"index":721}},{"kind":"Use","ref_id":{"krate":0,"index":952},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191890,"byte_end":191900,"line_start":12,"line_end":12,"column_start":37,"column_end":47},"alias_span":null,"name":"BMPEncoder","value":"","parent":{"krate":0,"index":721}},{"kind":"Use","ref_id":{"krate":0,"index":998},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":258748,"byte_end":258759,"line_start":10,"line_end":10,"column_start":24,"column_end":35},"alias_span":null,"name":"JpegDecoder","value":"","parent":{"krate":0,"index":973}},{"kind":"Use","ref_id":{"krate":0,"index":1111},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":258862,"byte_end":258873,"line_start":12,"line_end":12,"column_start":25,"column_end":36},"alias_span":null,"name":"JpegEncoder","value":"","parent":{"krate":0,"index":973}},{"kind":"Use","ref_id":{"krate":0,"index":2870},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":258875,"byte_end":258887,"line_start":12,"line_end":12,"column_start":38,"column_end":50},"alias_span":null,"name":"PixelDensity","value":"","parent":{"krate":0,"index":973}},{"kind":"Use","ref_id":{"krate":0,"index":2852},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":258889,"byte_end":258905,"line_start":12,"line_end":12,"column_start":52,"column_end":68},"alias_span":null,"name":"PixelDensityUnit","value":"","parent":{"krate":0,"index":973}},{"kind":"Use","ref_id":{"krate":0,"index":1122},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":258907,"byte_end":258918,"line_start":12,"line_end":12,"column_start":70,"column_end":81},"alias_span":null,"name":"JPEGEncoder","value":"","parent":{"krate":0,"index":973}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":0,"byte_end":10148,"line_start":1,"line_end":274,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":3804},{"krate":0,"index":9},{"krate":0,"index":3806},{"krate":0,"index":10},{"krate":0,"index":3808},{"krate":0,"index":11},{"krate":0,"index":3810},{"krate":0,"index":12},{"krate":0,"index":3812},{"krate":0,"index":13},{"krate":0,"index":3814},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":117},{"krate":0,"index":128},{"krate":0,"index":175},{"krate":0,"index":446},{"krate":0,"index":542},{"krate":0,"index":721},{"krate":0,"index":973},{"krate":0,"index":1194},{"krate":0,"index":1329},{"krate":0,"index":1369},{"krate":0,"index":1709},{"krate":0,"index":1907},{"krate":0,"index":2058},{"krate":0,"index":2203},{"krate":0,"index":2301},{"krate":0,"index":3797},{"krate":0,"index":2314}],"decl_id":null,"docs":" This crate provides native rust implementations of\n image encoders and decoders and basic image manipulation\n functions.","sig":null,"attributes":[{"value":"! This crate provides native rust implementations of","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":0,"byte_end":54,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"! image encoders and decoders and basic image manipulation","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":55,"byte_end":115,"line_start":2,"line_end":2,"column_start":1,"column_end":61}},{"value":"! functions.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":116,"byte_end":130,"line_start":3,"line_end":3,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":131,"byte_end":134,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! Additional documentation can currently also be found in the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":135,"byte_end":198,"line_start":5,"line_end":5,"column_start":1,"column_end":64}},{"value":"! [README.md file which is most easily viewed on github](https://github.com/image-rs/image/blob/master/README.md).","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":199,"byte_end":315,"line_start":6,"line_end":6,"column_start":1,"column_end":117}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":316,"byte_end":319,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! [Jump forward to crate content](#reexports)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":320,"byte_end":367,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":368,"byte_end":371,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! # Overview","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":372,"byte_end":386,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":387,"byte_end":390,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! There are two core problems for which this library provides solutions: a unified interface for image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":391,"byte_end":495,"line_start":12,"line_end":12,"column_start":1,"column_end":105}},{"value":"! encodings and simple generic buffers for their content. It's possible to use either feature","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":496,"byte_end":591,"line_start":13,"line_end":13,"column_start":1,"column_end":96}},{"value":"! without the other. The focus is on a small and stable set of common operations that can be","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":592,"byte_end":686,"line_start":14,"line_end":14,"column_start":1,"column_end":95}},{"value":"! supplemented by other specialized crates. The library also prefers safe solutions with few","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":687,"byte_end":781,"line_start":15,"line_end":15,"column_start":1,"column_end":95}},{"value":"! dependencies.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":782,"byte_end":799,"line_start":16,"line_end":16,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":800,"byte_end":803,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"! | Format | Decoding | Encoding |","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":804,"byte_end":840,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"! | ------ | -------- | -------- |","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":841,"byte_end":877,"line_start":19,"line_end":19,"column_start":1,"column_end":37}},{"value":"! | PNG    | All supported color types | Same as decoding |","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":878,"byte_end":939,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"! | JPEG   | Baseline and progressive | Baseline JPEG |","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":940,"byte_end":997,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"! | GIF    | Yes | Yes |","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":998,"byte_end":1024,"line_start":22,"line_end":22,"column_start":1,"column_end":27}},{"value":"! | BMP    | Yes | RGB(8), RGBA(8), Gray(8), GrayA(8) |","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1025,"byte_end":1082,"line_start":23,"line_end":23,"column_start":1,"column_end":58}},{"value":"! | ICO    | Yes | Yes |","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1083,"byte_end":1109,"line_start":24,"line_end":24,"column_start":1,"column_end":27}},{"value":"! | TIFF   | Baseline(no fax support) + LZW + PackBits | RGB(8), RGBA(8), Gray(8) |","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1110,"byte_end":1195,"line_start":25,"line_end":25,"column_start":1,"column_end":86}},{"value":"! | WebP   | Lossy(Luma channel only) | No |","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1196,"byte_end":1242,"line_start":26,"line_end":26,"column_start":1,"column_end":47}},{"value":"! | PNM    | PBM, PGM, PPM, standard PAM | Yes |","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1243,"byte_end":1293,"line_start":27,"line_end":27,"column_start":1,"column_end":51}},{"value":"! | DDS    | DXT1, DXT3, DXT5 | No |","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1294,"byte_end":1332,"line_start":28,"line_end":28,"column_start":1,"column_end":39}},{"value":"! | TGA    | Yes | RGB(8), RGBA(8), BGR(8), BGRA(8), Gray(8), GrayA(8) |","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1333,"byte_end":1407,"line_start":29,"line_end":29,"column_start":1,"column_end":75}},{"value":"! | farbfeld | Yes | Yes |","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1408,"byte_end":1436,"line_start":30,"line_end":30,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1437,"byte_end":1440,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"! ## Using images decoders","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1441,"byte_end":1469,"line_start":32,"line_end":32,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1470,"byte_end":1473,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! There exists a huge variety of image formats that are concerned with efficiently encoding image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1474,"byte_end":1573,"line_start":34,"line_end":34,"column_start":1,"column_end":100}},{"value":"! pixel data and auxiliary meta data for many different purposes. The `image` library provides","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1574,"byte_end":1670,"line_start":35,"line_end":35,"column_start":1,"column_end":97}},{"value":"! decoders for many common formats, depending on the active features. The best way to use them","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1671,"byte_end":1767,"line_start":36,"line_end":36,"column_start":1,"column_end":97}},{"value":"! depends on your use case.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1768,"byte_end":1797,"line_start":37,"line_end":37,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1798,"byte_end":1801,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! * [`open`] is a very simple way to load images from the file system, automatically deducing the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1802,"byte_end":1901,"line_start":39,"line_end":39,"column_start":1,"column_end":100}},{"value":"!   format but offering little customization.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1902,"byte_end":1949,"line_start":40,"line_end":40,"column_start":1,"column_end":48}},{"value":"! * [`load_from_memory`], [`load_from_memory_with_format`] present a similar interface for images","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":1950,"byte_end":2049,"line_start":41,"line_end":41,"column_start":1,"column_end":100}},{"value":"!   whose encoded data is already present in memory.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2050,"byte_end":2104,"line_start":42,"line_end":42,"column_start":1,"column_end":55}},{"value":"! * [`io::Reader`] is a builder providing a superset of the functions. It offers both","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2105,"byte_end":2192,"line_start":43,"line_end":43,"column_start":1,"column_end":88}},{"value":"!   customization and auto-deduction but is slightly more involved. The main benefit is that the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2193,"byte_end":2291,"line_start":44,"line_end":44,"column_start":1,"column_end":99}},{"value":"!   interface is easier to evolve.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2292,"byte_end":2328,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"! * [`ImageDecoder`] is a trait for querying meta data and reading image pixels into a generic","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2329,"byte_end":2425,"line_start":46,"line_end":46,"column_start":1,"column_end":97}},{"value":"!   byte buffer. It also contains a `Read` adaptor for stream reading the pixels.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2426,"byte_end":2509,"line_start":47,"line_end":47,"column_start":1,"column_end":84}},{"value":"! * [`DynamicImage::from_decoder`] can be used for creating a buffer from a single specific or","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2510,"byte_end":2606,"line_start":48,"line_end":48,"column_start":1,"column_end":97}},{"value":"!   any custom decoder implementing the [`ImageDecoder`] trait.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2607,"byte_end":2672,"line_start":49,"line_end":49,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2673,"byte_end":2676,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"! [`open`]: fn.open.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2677,"byte_end":2703,"line_start":51,"line_end":51,"column_start":1,"column_end":27}},{"value":"! [`load_from_memory`]: fn.load_from_memory.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2704,"byte_end":2754,"line_start":52,"line_end":52,"column_start":1,"column_end":51}},{"value":"! [`load_from_memory_with_format`]: fn.load_from_memory_with_format.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2755,"byte_end":2829,"line_start":53,"line_end":53,"column_start":1,"column_end":75}},{"value":"! [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2830,"byte_end":2871,"line_start":54,"line_end":54,"column_start":1,"column_end":42}},{"value":"! [`DynamicImage::from_decoder`]: enum.DynamicImage.html#method.from_decoder","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2872,"byte_end":2950,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"! [`ImageDecoder`]: trait.ImageDecoder.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2951,"byte_end":2996,"line_start":56,"line_end":56,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":2997,"byte_end":3000,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"! ## Using image encoders","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3001,"byte_end":3028,"line_start":58,"line_end":58,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3029,"byte_end":3032,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"! Encoding pixel data is supported for the majority of formats but not quite as broadly.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3033,"byte_end":3123,"line_start":60,"line_end":60,"column_start":1,"column_end":91}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3124,"byte_end":3127,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"! * [`DynamicImage::save`] is the converse of `open` and stores a `DynamicImage`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3128,"byte_end":3211,"line_start":62,"line_end":62,"column_start":1,"column_end":84}},{"value":"! * [`DynamicImage::write_to`] can be used to encode an image into any writer, for example into a","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3212,"byte_end":3311,"line_start":63,"line_end":63,"column_start":1,"column_end":100}},{"value":"!   vector of bytes in memory.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3312,"byte_end":3344,"line_start":64,"line_end":64,"column_start":1,"column_end":33}},{"value":"! * [`save_buffer`], [`save_buffer_with_format`] provide a low-level interface for saving an image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3345,"byte_end":3445,"line_start":65,"line_end":65,"column_start":1,"column_end":101}},{"value":"!   in the file system, where the library initializes the chosen encoder.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3446,"byte_end":3521,"line_start":66,"line_end":66,"column_start":1,"column_end":76}},{"value":"! * [`ImageEncoder`] is a trait for encoding a byte buffer of image data and the inverse of the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3522,"byte_end":3619,"line_start":67,"line_end":67,"column_start":1,"column_end":98}},{"value":"!   `ImageDecoder` interface.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3620,"byte_end":3651,"line_start":68,"line_end":68,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3652,"byte_end":3655,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"! [`save_buffer`]: #fn.save_buffer.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3656,"byte_end":3697,"line_start":70,"line_end":70,"column_start":1,"column_end":42}},{"value":"! [`save_buffer_with_format`]: #fn.save_buffer_with_format.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3698,"byte_end":3763,"line_start":71,"line_end":71,"column_start":1,"column_end":66}},{"value":"! [`DynamicImage::save`]: enum.DynamicImage.html#method.save","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3764,"byte_end":3826,"line_start":72,"line_end":72,"column_start":1,"column_end":63}},{"value":"! [`DynamicImage::write_to`]: enum.DynamicImage.html#method.write_to","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3827,"byte_end":3897,"line_start":73,"line_end":73,"column_start":1,"column_end":71}},{"value":"! [`ImageEncoder`]: trait.ImageEncoder.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3898,"byte_end":3943,"line_start":74,"line_end":74,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3944,"byte_end":3947,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"! ## Image buffers","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3948,"byte_end":3968,"line_start":76,"line_end":76,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3969,"byte_end":3972,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"! The library adds containers for channel data which together form some representation of a 2D","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":3973,"byte_end":4069,"line_start":78,"line_end":78,"column_start":1,"column_end":97}},{"value":"! matrix of pixels. These are all statically typed to avoid misinterpretation of byte data (and","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4070,"byte_end":4167,"line_start":79,"line_end":79,"column_start":1,"column_end":98}},{"value":"! since Rust has no standard safe encapsulation for reinterpreting byte slices as another type).","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4168,"byte_end":4266,"line_start":80,"line_end":80,"column_start":1,"column_end":99}},{"value":"! The main traits [`GenericImageView`] and [`GenericImage`] model a view on a 2D-matrix of","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4267,"byte_end":4359,"line_start":81,"line_end":81,"column_start":1,"column_end":93}},{"value":"! addressable pixels and a buffer of independently accessible pixels respectively.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4360,"byte_end":4444,"line_start":82,"line_end":82,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4445,"byte_end":4448,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"! The two main types for owning pixel data are [`ImageBuffer`] and [`DynamicImage`]. Note that","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4449,"byte_end":4545,"line_start":84,"line_end":84,"column_start":1,"column_end":97}},{"value":"! the latter is an enum over well-supported pixel types that also offers conversion","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4546,"byte_end":4631,"line_start":85,"line_end":85,"column_start":1,"column_end":86}},{"value":"! functionality.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4632,"byte_end":4650,"line_start":86,"line_end":86,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4651,"byte_end":4654,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"! Additionally, the [`flat`] module contains items for interoperability with generic channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4655,"byte_end":4749,"line_start":88,"line_end":88,"column_start":1,"column_end":95}},{"value":"! matrices and foreign interface. While still strictly typed, these dynamically validate length and","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4750,"byte_end":4851,"line_start":89,"line_end":89,"column_start":1,"column_end":102}},{"value":"! other layout assumptions required to provide the trait interface. While they are quite generic, you","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4852,"byte_end":4955,"line_start":90,"line_end":90,"column_start":1,"column_end":104}},{"value":"! should be prepared for a bit of boilerplate when using these types.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":4956,"byte_end":5027,"line_start":91,"line_end":91,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5028,"byte_end":5031,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"! [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5032,"byte_end":5085,"line_start":93,"line_end":93,"column_start":1,"column_end":54}},{"value":"! [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5086,"byte_end":5131,"line_start":94,"line_end":94,"column_start":1,"column_end":46}},{"value":"! [`ImageBuffer`]: struct.ImageBuffer.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5132,"byte_end":5176,"line_start":95,"line_end":95,"column_start":1,"column_end":45}},{"value":"! [`DynamicImage`]: enum.DynamicImage.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5177,"byte_end":5221,"line_start":96,"line_end":96,"column_start":1,"column_end":45}},{"value":"! [`flat`]: flat/index.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5222,"byte_end":5251,"line_start":97,"line_end":97,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5252,"byte_end":5255,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"! ## A note on format specific features","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5256,"byte_end":5297,"line_start":99,"line_end":99,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5298,"byte_end":5301,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"! One of the main goals of `image` is stability, in runtime but also for programmers. This","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5302,"byte_end":5394,"line_start":101,"line_end":101,"column_start":1,"column_end":93}},{"value":"! ensures that performance as well as safety fixes reach a majority of its user base with little","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5395,"byte_end":5493,"line_start":102,"line_end":102,"column_start":1,"column_end":99}},{"value":"! effort. Re-exporting all details of its dependencies would run counter to this goal as it","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5494,"byte_end":5587,"line_start":103,"line_end":103,"column_start":1,"column_end":94}},{"value":"! linked _all_ major version bumps between them and `image`. As such, we are wary of exposing too","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5588,"byte_end":5687,"line_start":104,"line_end":104,"column_start":1,"column_end":100}},{"value":"! many details, or configuration options, that are not shared between different image formats.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5688,"byte_end":5784,"line_start":105,"line_end":105,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5785,"byte_end":5788,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"! Nevertheless, the advantage of precise control is hard to ignore. We will thus consider","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5789,"byte_end":5880,"line_start":107,"line_end":107,"column_start":1,"column_end":92}},{"value":"! _wrappers_, not direct re-exports, in either of the following cases:","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5881,"byte_end":5953,"line_start":108,"line_end":108,"column_start":1,"column_end":73}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5954,"byte_end":5957,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"! 1. A standard specifies that configuration _x_ is required for decoders/encoders and there","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":5958,"byte_end":6052,"line_start":110,"line_end":110,"column_start":1,"column_end":95}},{"value":"!    exists an essentially canonical way to control it.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6053,"byte_end":6110,"line_start":111,"line_end":111,"column_start":1,"column_end":58}},{"value":"! 2. At least two different implementations agree on some (sub-)set of features in practice.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6111,"byte_end":6205,"line_start":112,"line_end":112,"column_start":1,"column_end":95}},{"value":"! 3. A technical argument including measurements of the performance, space benefits, or otherwise","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6206,"byte_end":6305,"line_start":113,"line_end":113,"column_start":1,"column_end":100}},{"value":"!    objectively quantified benefits can be made, and the added interface is unlikely to require","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6306,"byte_end":6404,"line_start":114,"line_end":114,"column_start":1,"column_end":99}},{"value":"!    breaking changes.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6405,"byte_end":6429,"line_start":115,"line_end":115,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6430,"byte_end":6433,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"! Features that fulfill two or more criteria are preferred.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6434,"byte_end":6495,"line_start":117,"line_end":117,"column_start":1,"column_end":62}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6496,"byte_end":6499,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"! Re-exports of dependencies that reach version `1` will be discussed when it happens.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6500,"byte_end":6588,"line_start":119,"line_end":119,"column_start":1,"column_end":89}},{"value":"warn(missing_docs)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6590,"byte_end":6612,"line_start":121,"line_end":121,"column_start":1,"column_end":23}},{"value":"warn(unused_qualifications)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6613,"byte_end":6644,"line_start":122,"line_end":122,"column_start":1,"column_end":32}},{"value":"deny(unreachable_pub)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6645,"byte_end":6670,"line_start":123,"line_end":123,"column_start":1,"column_end":26}},{"value":"deny(deprecated)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6671,"byte_end":6691,"line_start":124,"line_end":124,"column_start":1,"column_end":21}},{"value":"deny(missing_copy_implementations)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6692,"byte_end":6730,"line_start":125,"line_end":125,"column_start":1,"column_end":39}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":6828,"byte_end":6869,"line_start":128,"line_end":128,"column_start":1,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":55},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":2315},{"krate":0,"index":2334},{"krate":0,"index":2336},{"krate":0,"index":2339},{"krate":0,"index":2341},{"krate":0,"index":2363},{"krate":0,"index":2361},{"krate":0,"index":2358},{"krate":0,"index":2354},{"krate":0,"index":2355},{"krate":0,"index":2365},{"krate":0,"index":2368},{"krate":0,"index":2370},{"krate":0,"index":2373},{"krate":0,"index":2375},{"krate":0,"index":2397},{"krate":0,"index":2395},{"krate":0,"index":2392},{"krate":0,"index":2388},{"krate":0,"index":2389},{"krate":0,"index":2399},{"krate":0,"index":2402},{"krate":0,"index":2404},{"krate":0,"index":2406},{"krate":0,"index":2408},{"krate":0,"index":2428},{"krate":0,"index":2426},{"krate":0,"index":2423},{"krate":0,"index":2419},{"krate":0,"index":2420},{"krate":0,"index":2416},{"krate":0,"index":2417},{"krate":0,"index":2430},{"krate":0,"index":2454},{"krate":0,"index":2452},{"krate":0,"index":2449},{"krate":0,"index":2445},{"krate":0,"index":2446},{"krate":0,"index":63},{"krate":0,"index":67},{"krate":0,"index":72},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":115}],"decl_id":null,"docs":" Contains detailed error representation.","sig":null,"attributes":[{"value":"! Contains detailed error representation.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10150,"byte_end":10193,"line_start":1,"line_end":1,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10194,"byte_end":10197,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! See the main [`ImageError`] which contains a variant for each specialized error type. The","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10198,"byte_end":10291,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"! subtypes used in each variant are opaque by design. They can be roughly inspected through their","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10292,"byte_end":10391,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"! respective `kind` methods which work similar to `std::io::Error::kind`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10392,"byte_end":10467,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10468,"byte_end":10471,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! The error interface makes it possible to inspect the error of an underlying decoder or encoder,","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10472,"byte_end":10571,"line_start":7,"line_end":7,"column_start":1,"column_end":100}},{"value":"! through the `Error::source` method. Note that this is not part of the stable interface and you","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10572,"byte_end":10670,"line_start":8,"line_end":8,"column_start":1,"column_end":99}},{"value":"! may not rely on a particular error value for a particular operation. This means mainly that","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10671,"byte_end":10766,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"! `image` does not promise to remain on a particular version of its underlying decoders but if","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10767,"byte_end":10863,"line_start":10,"line_end":10,"column_start":1,"column_end":97}},{"value":"! you ensure to use the same version of the dependency (or at least of the error type) through","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10864,"byte_end":10960,"line_start":11,"line_end":11,"column_start":1,"column_end":97}},{"value":"! external means then you could inspect the error type in slightly more detail.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":10961,"byte_end":11042,"line_start":12,"line_end":12,"column_start":1,"column_end":82}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11043,"byte_end":11046,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! [`ImageError`]: enum.ImageError.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11047,"byte_end":11087,"line_start":14,"line_end":14,"column_start":1,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2316},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11799,"byte_end":11807,"line_start":34,"line_end":34,"column_start":5,"column_end":13},"name":"Decoding","qualname":"::error::ImageError::Decoding","value":"ImageError::Decoding(DecodingError)","parent":{"krate":0,"index":2315},"children":[],"decl_id":null,"docs":" An error was encountered while decoding.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11516,"byte_end":11560,"line_start":29,"line_end":29,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11565,"byte_end":11568,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ This means that the input data did not conform to the specification of some image format,","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11573,"byte_end":11666,"line_start":31,"line_end":31,"column_start":5,"column_end":98}},{"value":"/ or that no format could be determined, or that it did not match format specific","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11671,"byte_end":11754,"line_start":32,"line_end":32,"column_start":5,"column_end":88}},{"value":"/ requirements set by the caller.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11759,"byte_end":11794,"line_start":33,"line_end":33,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2319},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12193,"byte_end":12201,"line_start":42,"line_end":42,"column_start":5,"column_end":13},"name":"Encoding","qualname":"::error::ImageError::Encoding","value":"ImageError::Encoding(EncodingError)","parent":{"krate":0,"index":2315},"children":[],"decl_id":null,"docs":" An error was encountered while encoding.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11829,"byte_end":11873,"line_start":36,"line_end":36,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11878,"byte_end":11881,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ The input image can not be encoded with the chosen format, for example because the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11886,"byte_end":11972,"line_start":38,"line_end":38,"column_start":5,"column_end":91}},{"value":"/ specification has no representation for its color space or because a necessary conversion","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11977,"byte_end":12070,"line_start":39,"line_end":39,"column_start":5,"column_end":98}},{"value":"/ is ambiguous. In some cases it might also happen that the dimensions can not be used with","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12075,"byte_end":12168,"line_start":40,"line_end":40,"column_start":5,"column_end":98}},{"value":"/ the format.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12173,"byte_end":12188,"line_start":41,"line_end":41,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2322},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12441,"byte_end":12450,"line_start":48,"line_end":48,"column_start":5,"column_end":14},"name":"Parameter","qualname":"::error::ImageError::Parameter","value":"ImageError::Parameter(ParameterError)","parent":{"krate":0,"index":2315},"children":[],"decl_id":null,"docs":" An error was encountered in input arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in input arguments.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12223,"byte_end":12271,"line_start":44,"line_end":44,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12276,"byte_end":12279,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This is a catch-all case for strictly internal operations such as scaling, conversions,","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12284,"byte_end":12375,"line_start":46,"line_end":46,"column_start":5,"column_end":96}},{"value":"/ etc. that involve no external format specifications.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12380,"byte_end":12436,"line_start":47,"line_end":47,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2325},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12710,"byte_end":12716,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"name":"Limits","qualname":"::error::ImageError::Limits","value":"ImageError::Limits(LimitError)","parent":{"krate":0,"index":2315},"children":[],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12473,"byte_end":12550,"line_start":50,"line_end":50,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12555,"byte_end":12558,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Errors of this type are limits set by the user or environment, *not* inherent in a specific","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12563,"byte_end":12658,"line_start":52,"line_end":52,"column_start":5,"column_end":100}},{"value":"/ format or operation that was executed.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12663,"byte_end":12705,"line_start":53,"line_end":53,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2328},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13054,"byte_end":13065,"line_start":62,"line_end":62,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::error::ImageError::Unsupported","value":"ImageError::Unsupported(UnsupportedError)","parent":{"krate":0,"index":2315},"children":[],"decl_id":null,"docs":" An operation can not be completed by the chosen abstraction.","sig":null,"attributes":[{"value":"/ An operation can not be completed by the chosen abstraction.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12735,"byte_end":12799,"line_start":56,"line_end":56,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12804,"byte_end":12807,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This means that it might be possible for the operation to succeed in general but","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12812,"byte_end":12896,"line_start":58,"line_end":58,"column_start":5,"column_end":89}},{"value":"/ * it requires a disabled feature,","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12901,"byte_end":12938,"line_start":59,"line_end":59,"column_start":5,"column_end":42}},{"value":"/ * the implementation does not yet exist, or","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12943,"byte_end":12990,"line_start":60,"line_end":60,"column_start":5,"column_end":52}},{"value":"/ * no abstraction for a lower level could be found.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":12995,"byte_end":13049,"line_start":61,"line_end":61,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2331},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13156,"byte_end":13163,"line_start":65,"line_end":65,"column_start":5,"column_end":12},"name":"IoError","qualname":"::error::ImageError::IoError","value":"ImageError::IoError(io::Error)","parent":{"krate":0,"index":2315},"children":[],"decl_id":null,"docs":" An error occurred while interacting with the environment.\n","sig":null,"attributes":[{"value":"/ An error occurred while interacting with the environment.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13090,"byte_end":13151,"line_start":64,"line_end":64,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":2315},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11499,"byte_end":11509,"line_start":28,"line_end":28,"column_start":10,"column_end":20},"name":"ImageError","qualname":"::error::ImageError","value":"pub enum ImageError {\n\n    /// An error was encountered while decoding.\n    ///\n    /// This means that the input data did not conform to the specification of some image format,\n    /// or that no format could be determined, or that it did not match format specific\n    /// requirements set by the caller.\n    Decoding(DecodingError),\n\n    /// An error was encountered while encoding.\n    ///\n    /// The input image can not be encoded with the chosen format, for example because the\n    /// specification has no representation for its color space or because a necessary conversion\n    /// is ambiguous. In some cases it might also happen that the dimensions can not be used with\n    /// the format.\n    Encoding(EncodingError),\n\n    /// An error was encountered in input arguments.\n    ///\n    /// This is a catch-all case for strictly internal operations such as scaling, conversions,\n    /// etc. that involve no external format specifications.\n    Parameter(ParameterError),\n\n    /// Completing the operation would have required more resources than allowed.\n    ///\n    /// Errors of this type are limits set by the user or environment, *not* inherent in a specific\n    /// format or operation that was executed.\n    Limits(LimitError),\n\n    /// An operation can not be completed by the chosen abstraction.\n    ///\n    /// This means that it might be possible for the operation to succeed in general but\n    /// * it requires a disabled feature,\n    /// * the implementation does not yet exist, or\n    /// * no abstraction for a lower level could be found.\n    Unsupported(UnsupportedError),\n\n    /// An error occurred while interacting with the environment.\n    IoError(io::Error),\n}","parent":null,"children":[{"krate":0,"index":2316},{"krate":0,"index":2319},{"krate":0,"index":2322},{"krate":0,"index":2325},{"krate":0,"index":2328},{"krate":0,"index":2331}],"decl_id":null,"docs":" The generic error type for image operations.","sig":null,"attributes":[{"value":"/ The generic error type for image operations.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11241,"byte_end":11289,"line_start":23,"line_end":23,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11290,"byte_end":11293,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This high level enum allows, by variant matching, a rough separation of concerns between","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11294,"byte_end":11386,"line_start":25,"line_end":25,"column_start":1,"column_end":93}},{"value":"/ underlying IO, the caller, format specifications, and the `image` implementation.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":11387,"byte_end":11472,"line_start":26,"line_end":26,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":2336},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13395,"byte_end":13411,"line_start":74,"line_end":74,"column_start":12,"column_end":28},"name":"UnsupportedError","qualname":"::error::UnsupportedError","value":"UnsupportedError {  }","parent":null,"children":[{"krate":0,"index":2337},{"krate":0,"index":2338}],"decl_id":null,"docs":" The implementation for an operation was not provided.","sig":null,"attributes":[{"value":"/ The implementation for an operation was not provided.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13179,"byte_end":13236,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13237,"byte_end":13240,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ See the variant [`Unsupported`] for more documentation.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13241,"byte_end":13300,"line_start":70,"line_end":70,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13301,"byte_end":13304,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ [`Unsupported`]: enum.ImageError.html#variant.Unsupported","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13305,"byte_end":13366,"line_start":72,"line_end":72,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2342},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13650,"byte_end":13655,"line_start":83,"line_end":83,"column_start":5,"column_end":10},"name":"Color","qualname":"::error::UnsupportedErrorKind::Color","value":"UnsupportedErrorKind::Color(ExtendedColorType)","parent":{"krate":0,"index":2341},"children":[],"decl_id":null,"docs":" The required color type can not be handled.\n","sig":null,"attributes":[{"value":"/ The required color type can not be handled.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13598,"byte_end":13645,"line_start":82,"line_end":82,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2345},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13722,"byte_end":13728,"line_start":85,"line_end":85,"column_start":5,"column_end":11},"name":"Format","qualname":"::error::UnsupportedErrorKind::Format","value":"UnsupportedErrorKind::Format(ImageFormatHint)","parent":{"krate":0,"index":2341},"children":[],"decl_id":null,"docs":" An image format is not supported.\n","sig":null,"attributes":[{"value":"/ An image format is not supported.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13680,"byte_end":13717,"line_start":84,"line_end":84,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2348},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13872,"byte_end":13886,"line_start":88,"line_end":88,"column_start":5,"column_end":19},"name":"GenericFeature","qualname":"::error::UnsupportedErrorKind::GenericFeature","value":"UnsupportedErrorKind::GenericFeature(String)","parent":{"krate":0,"index":2341},"children":[],"decl_id":null,"docs":" Some feature specified by string.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ Some feature specified by string.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13751,"byte_end":13788,"line_start":86,"line_end":86,"column_start":5,"column_end":42}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13793,"byte_end":13867,"line_start":87,"line_end":87,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2351},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13919,"byte_end":13934,"line_start":90,"line_end":90,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::UnsupportedErrorKind::__NonExhaustive","value":"UnsupportedErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":2341},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2341},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13571,"byte_end":13591,"line_start":81,"line_end":81,"column_start":10,"column_end":30},"name":"UnsupportedErrorKind","qualname":"::error::UnsupportedErrorKind","value":"pub enum UnsupportedErrorKind {\n\n    /// The required color type can not be handled.\n    Color(ExtendedColorType),\n\n    /// An image format is not supported.\n    Format(ImageFormatHint),\n\n    /// Some feature specified by string.\n    /// This is discouraged and is likely to get deprecated (but not removed).\n    GenericFeature(String),\n\n    #[doc(hidden)]\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2342},{"krate":0,"index":2345},{"krate":0,"index":2348},{"krate":0,"index":2351}],"decl_id":null,"docs":" Details what feature is not supported.\n","sig":null,"attributes":[{"value":"/ Details what feature is not supported.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13478,"byte_end":13520,"line_start":79,"line_end":79,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":2365},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14253,"byte_end":14266,"line_start":100,"line_end":100,"column_start":12,"column_end":25},"name":"EncodingError","qualname":"::error::EncodingError","value":"EncodingError {  }","parent":null,"children":[{"krate":0,"index":2366},{"krate":0,"index":2367}],"decl_id":null,"docs":" An error was encountered while encoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding an image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":13960,"byte_end":14013,"line_start":93,"line_end":93,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14014,"byte_end":14017,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Encoding`] variant. See its","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14018,"byte_end":14112,"line_start":95,"line_end":95,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14113,"byte_end":14152,"line_start":96,"line_end":96,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14153,"byte_end":14156,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Encoding`]: enum.ImageError.html#variant.Encoding","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14157,"byte_end":14224,"line_start":98,"line_end":98,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":2370},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14648,"byte_end":14662,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"ParameterError","qualname":"::error::ParameterError","value":"ParameterError {  }","parent":null,"children":[{"krate":0,"index":2371},{"krate":0,"index":2372}],"decl_id":null,"docs":" An error was encountered in inputs arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in inputs arguments.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14356,"byte_end":14405,"line_start":106,"line_end":106,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14406,"byte_end":14409,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Parameter`] variant. See its","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14410,"byte_end":14505,"line_start":108,"line_end":108,"column_start":1,"column_end":96}},{"value":"/ documentation for more information.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14506,"byte_end":14545,"line_start":109,"line_end":109,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14546,"byte_end":14549,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Parameter`]: enum.ImageError.html#variant.Parameter","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14550,"byte_end":14619,"line_start":111,"line_end":111,"column_start":1,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2376},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14910,"byte_end":14927,"line_start":122,"line_end":122,"column_start":5,"column_end":22},"name":"DimensionMismatch","qualname":"::error::ParameterErrorKind::DimensionMismatch","value":"ParameterErrorKind::DimensionMismatch","parent":{"krate":0,"index":2375},"children":[],"decl_id":null,"docs":" The dimensions passed are wrong.\n","sig":null,"attributes":[{"value":"/ The dimensions passed are wrong.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14869,"byte_end":14905,"line_start":121,"line_end":121,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2378},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15025,"byte_end":15038,"line_start":124,"line_end":124,"column_start":5,"column_end":18},"name":"FailedAlready","qualname":"::error::ParameterErrorKind::FailedAlready","value":"ParameterErrorKind::FailedAlready","parent":{"krate":0,"index":2375},"children":[],"decl_id":null,"docs":" Repeated an operation for which error that could not be cloned was emitted already.\n","sig":null,"attributes":[{"value":"/ Repeated an operation for which error that could not be cloned was emitted already.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14933,"byte_end":15020,"line_start":123,"line_end":123,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2380},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15166,"byte_end":15173,"line_start":127,"line_end":127,"column_start":5,"column_end":12},"name":"Generic","qualname":"::error::ParameterErrorKind::Generic","value":"ParameterErrorKind::Generic(String)","parent":{"krate":0,"index":2375},"children":[],"decl_id":null,"docs":" A string describing the parameter.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ A string describing the parameter.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15044,"byte_end":15082,"line_start":125,"line_end":125,"column_start":5,"column_end":43}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15087,"byte_end":15161,"line_start":126,"line_end":126,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2383},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15234,"byte_end":15244,"line_start":129,"line_end":129,"column_start":5,"column_end":15},"name":"NoMoreData","qualname":"::error::ParameterErrorKind::NoMoreData","value":"ParameterErrorKind::NoMoreData","parent":{"krate":0,"index":2375},"children":[],"decl_id":null,"docs":" The end of the image has been reached.\n","sig":null,"attributes":[{"value":"/ The end of the image has been reached.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15187,"byte_end":15229,"line_start":128,"line_end":128,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2385},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15328,"byte_end":15343,"line_start":132,"line_end":132,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::ParameterErrorKind::__NonExhaustive","value":"ParameterErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":2375},"children":[],"decl_id":null,"docs":" Do not use this, not part of stability guarantees.\n","sig":null,"attributes":[{"value":"/ Do not use this, not part of stability guarantees.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15269,"byte_end":15323,"line_start":131,"line_end":131,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":2375},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14844,"byte_end":14862,"line_start":120,"line_end":120,"column_start":10,"column_end":28},"name":"ParameterErrorKind","qualname":"::error::ParameterErrorKind","value":"pub enum ParameterErrorKind {\n\n    /// The dimensions passed are wrong.\n    DimensionMismatch,\n\n    /// Repeated an operation for which error that could not be cloned was emitted already.\n    FailedAlready,\n\n    /// A string describing the parameter.\n    /// This is discouraged and is likely to get deprecated (but not removed).\n    Generic(String),\n\n    /// The end of the image has been reached.\n    NoMoreData,\n\n    #[doc(hidden)]\n    /// Do not use this, not part of stability guarantees.\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2376},{"krate":0,"index":2378},{"krate":0,"index":2380},{"krate":0,"index":2383},{"krate":0,"index":2385}],"decl_id":null,"docs":" Details how a parameter is malformed.\n","sig":null,"attributes":[{"value":"/ Details how a parameter is malformed.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":14752,"byte_end":14793,"line_start":118,"line_end":118,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":2399},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15662,"byte_end":15675,"line_start":142,"line_end":142,"column_start":12,"column_end":25},"name":"DecodingError","qualname":"::error::DecodingError","value":"DecodingError {  }","parent":null,"children":[{"krate":0,"index":2400},{"krate":0,"index":2401}],"decl_id":null,"docs":" An error was encountered while decoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding an image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15369,"byte_end":15422,"line_start":135,"line_end":135,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15423,"byte_end":15426,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Decoding`] variant. See its","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15427,"byte_end":15521,"line_start":137,"line_end":137,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15522,"byte_end":15561,"line_start":138,"line_end":138,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15562,"byte_end":15565,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Decoding`]: enum.ImageError.html#variant.Decoding","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15566,"byte_end":15633,"line_start":140,"line_end":140,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":2404},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16075,"byte_end":16085,"line_start":154,"line_end":154,"column_start":12,"column_end":22},"name":"LimitError","qualname":"::error::LimitError","value":"LimitError {  }","parent":null,"children":[{"krate":0,"index":2405}],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15764,"byte_end":15841,"line_start":147,"line_end":147,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15842,"byte_end":15845,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Limits`] variant. See its","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15846,"byte_end":15938,"line_start":149,"line_end":149,"column_start":1,"column_end":93}},{"value":"/ documentation for more information.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15939,"byte_end":15978,"line_start":150,"line_end":150,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15979,"byte_end":15982,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Limits`]: enum.ImageError.html#variant.Limits","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":15983,"byte_end":16046,"line_start":152,"line_end":152,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2409},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16617,"byte_end":16631,"line_start":167,"line_end":167,"column_start":5,"column_end":19},"name":"DimensionError","qualname":"::error::LimitErrorKind::DimensionError","value":"LimitErrorKind::DimensionError","parent":{"krate":0,"index":2408},"children":[],"decl_id":null,"docs":" The resulting image exceed dimension limits in either direction.\n","sig":null,"attributes":[{"value":"/ The resulting image exceed dimension limits in either direction.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16544,"byte_end":16612,"line_start":166,"line_end":166,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2411},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16715,"byte_end":16733,"line_start":169,"line_end":169,"column_start":5,"column_end":23},"name":"InsufficientMemory","qualname":"::error::LimitErrorKind::InsufficientMemory","value":"LimitErrorKind::InsufficientMemory","parent":{"krate":0,"index":2408},"children":[],"decl_id":null,"docs":" The operation would have performed an allocation larger than allowed.\n","sig":null,"attributes":[{"value":"/ The operation would have performed an allocation larger than allowed.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16637,"byte_end":16710,"line_start":168,"line_end":168,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2413},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16817,"byte_end":16832,"line_start":172,"line_end":172,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::LimitErrorKind::__NonExhaustive","value":"LimitErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":2408},"children":[],"decl_id":null,"docs":" Do not use this, not part of stability guarantees.\n","sig":null,"attributes":[{"value":"/ Do not use this, not part of stability guarantees.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16758,"byte_end":16812,"line_start":171,"line_end":171,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":2408},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16523,"byte_end":16537,"line_start":165,"line_end":165,"column_start":10,"column_end":24},"name":"LimitErrorKind","qualname":"::error::LimitErrorKind","value":"pub enum LimitErrorKind {\n\n    /// The resulting image exceed dimension limits in either direction.\n    DimensionError,\n\n    /// The operation would have performed an allocation larger than allowed.\n    InsufficientMemory,\n\n    #[doc(hidden)]\n    /// Do not use this, not part of stability guarantees.\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2409},{"krate":0,"index":2411},{"krate":0,"index":2413}],"decl_id":null,"docs":" Indicates the limit that prevented an operation from completing.","sig":null,"attributes":[{"value":"/ Indicates the limit that prevented an operation from completing.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16156,"byte_end":16224,"line_start":159,"line_end":159,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16225,"byte_end":16228,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ Note that this enumeration is not exhaustive and may in the future be extended to provide more","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16229,"byte_end":16327,"line_start":161,"line_end":161,"column_start":1,"column_end":99}},{"value":"/ detailed information or to incorporate other resources types.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16328,"byte_end":16393,"line_start":162,"line_end":162,"column_start":1,"column_end":66}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16439,"byte_end":16477,"line_start":164,"line_end":164,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2431},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17019,"byte_end":17024,"line_start":179,"line_end":179,"column_start":5,"column_end":10},"name":"Exact","qualname":"::error::ImageFormatHint::Exact","value":"ImageFormatHint::Exact(ImageFormat)","parent":{"krate":0,"index":2430},"children":[],"decl_id":null,"docs":" The format is known exactly.\n","sig":null,"attributes":[{"value":"/ The format is known exactly.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16982,"byte_end":17014,"line_start":178,"line_end":178,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2434},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17092,"byte_end":17096,"line_start":182,"line_end":182,"column_start":5,"column_end":9},"name":"Name","qualname":"::error::ImageFormatHint::Name","value":"ImageFormatHint::Name(String)","parent":{"krate":0,"index":2430},"children":[],"decl_id":null,"docs":" The format can be identified by a name.\n","sig":null,"attributes":[{"value":"/ The format can be identified by a name.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17044,"byte_end":17087,"line_start":181,"line_end":181,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2437},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17168,"byte_end":17181,"line_start":185,"line_end":185,"column_start":5,"column_end":18},"name":"PathExtension","qualname":"::error::ImageFormatHint::PathExtension","value":"ImageFormatHint::PathExtension(std::path::PathBuf)","parent":{"krate":0,"index":2430},"children":[],"decl_id":null,"docs":" A common path extension for the format is known.\n","sig":null,"attributes":[{"value":"/ A common path extension for the format is known.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17111,"byte_end":17163,"line_start":184,"line_end":184,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2440},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17268,"byte_end":17275,"line_start":188,"line_end":188,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::error::ImageFormatHint::Unknown","value":"ImageFormatHint::Unknown","parent":{"krate":0,"index":2430},"children":[],"decl_id":null,"docs":" The format is not known or could not be determined.\n","sig":null,"attributes":[{"value":"/ The format is not known or could not be determined.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17208,"byte_end":17263,"line_start":187,"line_end":187,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2442},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17301,"byte_end":17316,"line_start":191,"line_end":191,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::ImageFormatHint::__NonExhaustive","value":"ImageFormatHint::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":2430},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2430},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16960,"byte_end":16975,"line_start":177,"line_end":177,"column_start":10,"column_end":25},"name":"ImageFormatHint","qualname":"::error::ImageFormatHint","value":"pub enum ImageFormatHint {\n\n    /// The format is known exactly.\n    Exact(ImageFormat),\n\n    /// The format can be identified by a name.\n    Name(String),\n\n    /// A common path extension for the format is known.\n    PathExtension(std::path::PathBuf),\n\n    /// The format is not known or could not be determined.\n    Unknown,\n\n    #[doc(hidden)]\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2431},{"krate":0,"index":2434},{"krate":0,"index":2437},{"krate":0,"index":2440},{"krate":0,"index":2442}],"decl_id":null,"docs":" A best effort representation for image formats.\n","sig":null,"attributes":[{"value":"/ A best effort representation for image formats.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":16858,"byte_end":16909,"line_start":175,"line_end":175,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17588,"byte_end":17608,"line_start":199,"line_end":199,"column_start":12,"column_end":32},"name":"from_format_and_kind","qualname":"<UnsupportedError>::from_format_and_kind","value":"pub fn from_format_and_kind(ImageFormatHint, UnsupportedErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `UnsupportedError` for an image with details on the unsupported feature.","sig":null,"attributes":[{"value":"/ Create an `UnsupportedError` for an image with details on the unsupported feature.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17370,"byte_end":17456,"line_start":195,"line_end":195,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17461,"byte_end":17464,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ If the operation was not connected to a particular image format then the hint may be","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17469,"byte_end":17557,"line_start":197,"line_end":197,"column_start":5,"column_end":93}},{"value":"/ `Unknown`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17562,"byte_end":17576,"line_start":198,"line_end":198,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17836,"byte_end":17840,"line_start":207,"line_end":207,"column_start":12,"column_end":16},"name":"kind","qualname":"<UnsupportedError>::kind","value":"pub fn kind(&Self) -> UnsupportedErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `UnsupportedErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `UnsupportedErrorKind` of the error.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17758,"byte_end":17824,"line_start":206,"line_end":206,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17979,"byte_end":17990,"line_start":212,"line_end":212,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<UnsupportedError>::format_hint","value":"pub fn format_hint(&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17911,"byte_end":17967,"line_start":211,"line_end":211,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18182,"byte_end":18185,"line_start":219,"line_end":219,"column_start":12,"column_end":15},"name":"new","qualname":"<DecodingError>::new","value":"pub fn new<impl Into<Box<dyn Error + Send + Sync>>: Into<Box<Error + Send +\n                                                             Sync>>>(ImageFormatHint,\n                                                                     impl Into<Box<dyn Error + Send + Sync>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.\n","sig":null,"attributes":[{"value":"/ Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18081,"byte_end":18170,"line_start":218,"line_end":218,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18553,"byte_end":18569,"line_start":232,"line_end":232,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<DecodingError>::from_format_hint","value":"pub fn from_format_hint(ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create a `DecodingError` for an image format.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18397,"byte_end":18446,"line_start":229,"line_end":229,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18451,"byte_end":18454,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18459,"byte_end":18541,"line_start":231,"line_end":231,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18768,"byte_end":18779,"line_start":240,"line_end":240,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<DecodingError>::format_hint","value":"pub fn format_hint(&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18700,"byte_end":18756,"line_start":239,"line_end":239,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18972,"byte_end":18975,"line_start":247,"line_end":247,"column_start":12,"column_end":15},"name":"new","qualname":"<EncodingError>::new","value":"pub fn new<impl Into<Box<dyn Error + Send + Sync>>: Into<Box<Error + Send +\n                                                             Sync>>>(ImageFormatHint,\n                                                                     impl Into<Box<dyn Error + Send + Sync>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.\n","sig":null,"attributes":[{"value":"/ Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18870,"byte_end":18960,"line_start":246,"line_end":246,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19344,"byte_end":19360,"line_start":260,"line_end":260,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<EncodingError>::from_format_hint","value":"pub fn from_format_hint(ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create an `EncodingError` for an image format.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19187,"byte_end":19237,"line_start":257,"line_end":257,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19242,"byte_end":19245,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19250,"byte_end":19332,"line_start":259,"line_end":259,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19558,"byte_end":19569,"line_start":268,"line_end":268,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<EncodingError>::format_hint","value":"pub fn format_hint(&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Return the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Return the image format associated with this error.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19491,"byte_end":19546,"line_start":267,"line_end":267,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19741,"byte_end":19750,"line_start":275,"line_end":275,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<ParameterError>::from_kind","value":"pub fn from_kind(ParameterErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a `ParameterError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a `ParameterError` directly from a corresponding kind.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19661,"byte_end":19729,"line_start":274,"line_end":274,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19957,"byte_end":19961,"line_start":283,"line_end":283,"column_start":12,"column_end":16},"name":"kind","qualname":"<ParameterError>::kind","value":"pub fn kind(&Self) -> ParameterErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `ParameterErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `ParameterErrorKind` of the error.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19881,"byte_end":19945,"line_start":282,"line_end":282,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20134,"byte_end":20143,"line_start":290,"line_end":290,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<LimitError>::from_kind","value":"pub fn from_kind(LimitErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a generic `LimitError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a generic `LimitError` directly from a corresponding kind.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20050,"byte_end":20122,"line_start":289,"line_end":289,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20308,"byte_end":20312,"line_start":297,"line_end":297,"column_start":12,"column_end":16},"name":"kind","qualname":"<LimitError>::kind","value":"pub fn kind(&Self) -> LimitErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `LimitErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `LimitErrorKind` of the error.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20236,"byte_end":20296,"line_start":296,"line_end":296,"column_start":5,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":91},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":21191,"byte_end":21202,"line_start":333,"line_end":333,"column_start":10,"column_end":21},"name":"ImageResult","qualname":"::error::ImageResult","value":"Result<T, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Result of an image decoding/encoding process\n","sig":null,"attributes":[{"value":"/ Result of an image decoding/encoding process","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":21133,"byte_end":21181,"line_start":332,"line_end":332,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":117},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8311,"byte_end":8317,"line_start":184,"line_end":184,"column_start":9,"column_end":15},"name":"buffer","qualname":"::buffer","value":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127}],"decl_id":null,"docs":" Iterators and other auxiliary structure for the `ImageBuffer` type.\n","sig":null,"attributes":[{"value":"/ Iterators and other auxiliary structure for the `ImageBuffer` type.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8231,"byte_end":8302,"line_start":183,"line_end":183,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":128},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"math","qualname":"::math","value":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/mod.rs","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":174}],"decl_id":null,"docs":" Mathematical helper functions and types.\n","sig":null,"attributes":[{"value":"! Mathematical helper functions and types.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/mod.rs","byte_start":27835,"byte_end":27879,"line_start":1,"line_end":1,"column_start":1,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":129},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nq","qualname":"::math::nq","value":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":2456},{"krate":0,"index":2464},{"krate":0,"index":2462},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":153}],"decl_id":null,"docs":" NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\n See \"Kohonen neural networks for optimal colour quantization\"\n in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\n for a discussion of the algorithm.\n See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>\n","sig":null,"attributes":[{"value":"! NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":27945,"byte_end":28016,"line_start":1,"line_end":1,"column_start":1,"column_end":72}},{"value":"! See \"Kohonen neural networks for optimal colour quantization\"","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":28017,"byte_end":28082,"line_start":2,"line_end":2,"column_start":1,"column_end":66}},{"value":"! in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":28083,"byte_end":28156,"line_start":3,"line_end":3,"column_start":1,"column_end":74}},{"value":"! for a discussion of the algorithm.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":28157,"byte_end":28195,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"! See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":28196,"byte_end":28300,"line_start":5,"line_end":5,"column_start":1,"column_end":105}}]},{"kind":"Struct","id":{"krate":0,"index":145},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31835,"byte_end":31843,"line_start":101,"line_end":101,"column_start":12,"column_end":20},"name":"NeuQuant","qualname":"::math::nq::NeuQuant","value":"NeuQuant {  }","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152}],"decl_id":null,"docs":" Neural network color quantizer","sig":null,"attributes":[{"value":"/ Neural network color quantizer","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30138,"byte_end":30172,"line_start":62,"line_end":62,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30173,"byte_end":30176,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30177,"byte_end":30191,"line_start":64,"line_end":64,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30192,"byte_end":30199,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/ use image::imageops::colorops::{index_colors, ColorMap};","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30200,"byte_end":30260,"line_start":66,"line_end":66,"column_start":1,"column_end":61}},{"value":"/ use image::math::nq::NeuQuant;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30261,"byte_end":30295,"line_start":67,"line_end":67,"column_start":1,"column_end":35}},{"value":"/ use image::{ImageBuffer, Rgba, RgbaImage};","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30296,"byte_end":30342,"line_start":68,"line_end":68,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30343,"byte_end":30346,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ // Create simple color image with RGBA pixels.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30347,"byte_end":30397,"line_start":70,"line_end":70,"column_start":1,"column_end":51}},{"value":"/ let (w, h) = (2, 2);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30398,"byte_end":30422,"line_start":71,"line_end":71,"column_start":1,"column_end":25}},{"value":"/ let red: Rgba<u8> = [255, 0, 0, 255].into();","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30423,"byte_end":30471,"line_start":72,"line_end":72,"column_start":1,"column_end":49}},{"value":"/ let green: Rgba<u8> = [0, 255, 0, 255].into();","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30472,"byte_end":30522,"line_start":73,"line_end":73,"column_start":1,"column_end":51}},{"value":"/ let blue: Rgba<u8> = [0, 0, 255, 255].into();","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30523,"byte_end":30572,"line_start":74,"line_end":74,"column_start":1,"column_end":50}},{"value":"/ let white: Rgba<u8> = [255, 255, 255, 255].into();","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30573,"byte_end":30627,"line_start":75,"line_end":75,"column_start":1,"column_end":55}},{"value":"/ let mut color_image = RgbaImage::new(w, h);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30628,"byte_end":30675,"line_start":76,"line_end":76,"column_start":1,"column_end":48}},{"value":"/ color_image.put_pixel(0, 0, red);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30676,"byte_end":30713,"line_start":77,"line_end":77,"column_start":1,"column_end":38}},{"value":"/ color_image.put_pixel(1, 0, green);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30714,"byte_end":30753,"line_start":78,"line_end":78,"column_start":1,"column_end":40}},{"value":"/ color_image.put_pixel(0, 1, blue);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30754,"byte_end":30792,"line_start":79,"line_end":79,"column_start":1,"column_end":39}},{"value":"/ color_image.put_pixel(1, 1, white);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30793,"byte_end":30832,"line_start":80,"line_end":80,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30833,"byte_end":30836,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // Create a `NeuQuant` colormap that will build an approximate color palette that best matches","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30837,"byte_end":30935,"line_start":82,"line_end":82,"column_start":1,"column_end":99}},{"value":"/ // the original image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30936,"byte_end":30962,"line_start":83,"line_end":83,"column_start":1,"column_end":27}},{"value":"/ // Note, the NeuQuant algorithm is only designed to work with 6-8 bit output, so `colors`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":30963,"byte_end":31056,"line_start":84,"line_end":84,"column_start":1,"column_end":94}},{"value":"/ // should be a power of 2 in the range [64, 256].","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31057,"byte_end":31110,"line_start":85,"line_end":85,"column_start":1,"column_end":54}},{"value":"/ let pixels = color_image.clone().into_raw();","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31111,"byte_end":31159,"line_start":86,"line_end":86,"column_start":1,"column_end":49}},{"value":"/ let cmap = NeuQuant::new(1, 256, &pixels);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31160,"byte_end":31206,"line_start":87,"line_end":87,"column_start":1,"column_end":47}},{"value":"/ // Map the original image through the color map to create an indexed image stored in a","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31207,"byte_end":31297,"line_start":88,"line_end":88,"column_start":1,"column_end":91}},{"value":"/ // `GrayImage`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31298,"byte_end":31317,"line_start":89,"line_end":89,"column_start":1,"column_end":20}},{"value":"/ let palletized = index_colors(&color_image, &cmap);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31318,"byte_end":31373,"line_start":90,"line_end":90,"column_start":1,"column_end":56}},{"value":"/ // Map indexed image back `RgbaImage`.  Note the NeuQuant algorithm creates an approximation of","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31374,"byte_end":31473,"line_start":91,"line_end":91,"column_start":1,"column_end":100}},{"value":"/ // the original colors, so even in this simple example the output is not pixel equivalent to","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31474,"byte_end":31570,"line_start":92,"line_end":92,"column_start":1,"column_end":97}},{"value":"/ // the original.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31571,"byte_end":31591,"line_start":93,"line_end":93,"column_start":1,"column_end":21}},{"value":"/ let mapped = ImageBuffer::from_fn(w, h, |x, y| -> Rgba<u8> {","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31592,"byte_end":31656,"line_start":94,"line_end":94,"column_start":1,"column_end":65}},{"value":"/     let p = palletized.get_pixel(x, y);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31657,"byte_end":31700,"line_start":95,"line_end":95,"column_start":1,"column_end":44}},{"value":"/     cmap.lookup(p.0[0] as usize)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31701,"byte_end":31737,"line_start":96,"line_end":96,"column_start":1,"column_end":37}},{"value":"/         .expect(\"indexed color out-of-range\")","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31738,"byte_end":31787,"line_start":97,"line_end":97,"column_start":1,"column_end":50}},{"value":"/         .into()","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31788,"byte_end":31807,"line_start":98,"line_end":98,"column_start":1,"column_end":20}},{"value":"/ });","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31808,"byte_end":31815,"line_start":99,"line_end":99,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":31816,"byte_end":31823,"line_start":100,"line_end":100,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":32145,"byte_end":32148,"line_start":113,"line_end":113,"column_start":12,"column_end":15},"name":"new","qualname":"<NeuQuant>::new","value":"pub fn new(i32, usize, &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new neural network and trains it with the supplied data\n","sig":null,"attributes":[{"value":"/ Creates a new neural network and trains it with the supplied data","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":32064,"byte_end":32133,"line_start":112,"line_end":112,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":32689,"byte_end":32693,"line_start":129,"line_end":129,"column_start":12,"column_end":16},"name":"init","qualname":"<NeuQuant>::init","value":"pub fn init(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Initializes the neural network and trains it with the supplied data\n","sig":null,"attributes":[{"value":"/ Initializes the neural network and trains it with the supplied data","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":32606,"byte_end":32677,"line_start":128,"line_end":128,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":33683,"byte_end":33692,"line_start":161,"line_end":161,"column_start":12,"column_end":21},"name":"map_pixel","qualname":"<NeuQuant>::map_pixel","value":"pub fn map_pixel(&Self, &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Maps the pixel in-place to the best-matching color in the color map\n","sig":null,"attributes":[{"value":"/ Maps the pixel in-place to the best-matching color in the color map","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":33578,"byte_end":33649,"line_start":159,"line_end":159,"column_start":5,"column_end":76}},{"value":"inline(always)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":33654,"byte_end":33671,"line_start":160,"line_end":160,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":34162,"byte_end":34170,"line_start":173,"line_end":173,"column_start":12,"column_end":20},"name":"index_of","qualname":"<NeuQuant>::index_of","value":"pub fn index_of(&Self, &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Finds the best-matching index in the color map for `pixel`\n","sig":null,"attributes":[{"value":"/ Finds the best-matching index in the color map for `pixel`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":34066,"byte_end":34128,"line_start":171,"line_end":171,"column_start":5,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":34133,"byte_end":34150,"line_start":172,"line_end":172,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":34431,"byte_end":34437,"line_start":180,"line_end":180,"column_start":12,"column_end":18},"name":"lookup","qualname":"<NeuQuant>::lookup","value":"pub fn lookup(&Self, usize) -> Option<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":" Lookup pixel values for color at `idx` in the colormap.\n","sig":null,"attributes":[{"value":"/ Lookup pixel values for color at `idx` in the colormap.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":34360,"byte_end":34419,"line_start":179,"line_end":179,"column_start":5,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":170},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::math::utils","value":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","parent":null,"children":[{"krate":0,"index":171}],"decl_id":null,"docs":" Shared mathematical utility functions.\n","sig":null,"attributes":[{"value":"! Shared mathematical utility functions.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44067,"byte_end":44109,"line_start":1,"line_end":1,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":171},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44354,"byte_end":44359,"line_start":13,"line_end":13,"column_start":8,"column_end":13},"name":"clamp","qualname":"::math::utils::clamp","value":"pub fn clamp<N>(N, N, N) -> N where N: PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Cut value to be inside given range","sig":null,"attributes":[{"value":"/ Cut value to be inside given range","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44111,"byte_end":44149,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44150,"byte_end":44153,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44154,"byte_end":44161,"line_start":5,"line_end":5,"column_start":1,"column_end":8}},{"value":"/ use image::math::utils;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44162,"byte_end":44189,"line_start":6,"line_end":6,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44190,"byte_end":44193,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(utils::clamp(-5, 0, 10),  0);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44194,"byte_end":44238,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp( 6, 0, 10),  6);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44239,"byte_end":44283,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp(15, 0, 10), 10);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44284,"byte_end":44328,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44329,"byte_end":44336,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/utils.rs","byte_start":44337,"byte_end":44346,"line_start":12,"line_end":12,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":2467},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/rect.rs","byte_start":44640,"byte_end":44644,"line_start":3,"line_end":3,"column_start":12,"column_end":16},"name":"Rect","qualname":"::math::rect::Rect","value":"Rect { x, y, width, height }","parent":null,"children":[{"krate":0,"index":2468},{"krate":0,"index":2469},{"krate":0,"index":2470},{"krate":0,"index":2471}],"decl_id":null,"docs":" A Rectangle defined by its top left corner, width and height.\n","sig":null,"attributes":[{"value":"/ A Rectangle defined by its top left corner, width and height.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/rect.rs","byte_start":44512,"byte_end":44577,"line_start":1,"line_end":1,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2468},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/rect.rs","byte_start":44704,"byte_end":44705,"line_start":5,"line_end":5,"column_start":9,"column_end":10},"name":"x","qualname":"::math::rect::Rect::x","value":"u32","parent":{"krate":0,"index":2467},"children":[],"decl_id":null,"docs":" The x coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The x coordinate of the top left corner.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/rect.rs","byte_start":44651,"byte_end":44695,"line_start":4,"line_end":4,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":2469},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/rect.rs","byte_start":44769,"byte_end":44770,"line_start":7,"line_end":7,"column_start":9,"column_end":10},"name":"y","qualname":"::math::rect::Rect::y","value":"u32","parent":{"krate":0,"index":2467},"children":[],"decl_id":null,"docs":" The y coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The y coordinate of the top left corner.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/rect.rs","byte_start":44716,"byte_end":44760,"line_start":6,"line_end":6,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":2470},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/rect.rs","byte_start":44816,"byte_end":44821,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"name":"width","qualname":"::math::rect::Rect::width","value":"u32","parent":{"krate":0,"index":2467},"children":[],"decl_id":null,"docs":" The rectangle's width.\n","sig":null,"attributes":[{"value":"/ The rectangle's width.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/rect.rs","byte_start":44781,"byte_end":44807,"line_start":8,"line_end":8,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2471},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/rect.rs","byte_start":44868,"byte_end":44874,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"name":"height","qualname":"::math::rect::Rect::height","value":"u32","parent":{"krate":0,"index":2467},"children":[],"decl_id":null,"docs":" The rectangle's height.\n","sig":null,"attributes":[{"value":"/ The rectangle's height.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/rect.rs","byte_start":44832,"byte_end":44859,"line_start":10,"line_end":10,"column_start":5,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":175},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"imageops","qualname":"::imageops","value":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":3942},{"krate":0,"index":190},{"krate":0,"index":3944},{"krate":0,"index":191},{"krate":0,"index":3946},{"krate":0,"index":192},{"krate":0,"index":3948},{"krate":0,"index":193},{"krate":0,"index":3950},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":4002},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":265},{"krate":0,"index":335},{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":430},{"krate":0,"index":433},{"krate":0,"index":438},{"krate":0,"index":443}],"decl_id":null,"docs":" Image Processing Functions\n","sig":null,"attributes":[{"value":"! Image Processing Functions","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":44884,"byte_end":44914,"line_start":1,"line_end":1,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":234},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":57057,"byte_end":57065,"line_start":9,"line_end":9,"column_start":8,"column_end":16},"name":"rotate90","qualname":"::imageops::affine::rotate90","value":"pub fn rotate90<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":57008,"byte_end":57049,"line_start":8,"line_end":8,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":236},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":57397,"byte_end":57406,"line_start":21,"line_end":21,"column_start":8,"column_end":17},"name":"rotate180","qualname":"::imageops::affine::rotate180","value":"pub fn rotate180<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":57347,"byte_end":57389,"line_start":20,"line_end":20,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":238},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":57739,"byte_end":57748,"line_start":33,"line_end":33,"column_start":8,"column_end":17},"name":"rotate270","qualname":"::imageops::affine::rotate270","value":"pub fn rotate270<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":57689,"byte_end":57731,"line_start":32,"line_end":32,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":240},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":58136,"byte_end":58147,"line_start":45,"line_end":45,"column_start":8,"column_end":19},"name":"rotate90_in","qualname":"::imageops::affine::rotate90_in","value":"pub fn rotate90_in<I, Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":58031,"byte_end":58128,"line_start":44,"line_end":44,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":243},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":58921,"byte_end":58933,"line_start":70,"line_end":70,"column_start":8,"column_end":20},"name":"rotate180_in","qualname":"::imageops::affine::rotate180_in","value":"pub fn rotate180_in<I, Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":58815,"byte_end":58913,"line_start":69,"line_end":69,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":246},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":59716,"byte_end":59728,"line_start":95,"line_end":95,"column_start":8,"column_end":20},"name":"rotate270_in","qualname":"::imageops::affine::rotate270_in","value":"pub fn rotate270_in<I, Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":59610,"byte_end":59708,"line_start":94,"line_end":94,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":249},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":60434,"byte_end":60449,"line_start":120,"line_end":120,"column_start":8,"column_end":23},"name":"flip_horizontal","qualname":"::imageops::affine::flip_horizontal","value":"pub fn flip_horizontal<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":60396,"byte_end":60426,"line_start":119,"line_end":119,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":251},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":60774,"byte_end":60787,"line_start":132,"line_end":132,"column_start":8,"column_end":21},"name":"flip_vertical","qualname":"::imageops::affine::flip_vertical","value":"pub fn flip_vertical<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically\n","sig":null,"attributes":[{"value":"/ Flip an image vertically","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":60738,"byte_end":60766,"line_start":131,"line_end":131,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":253},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":61169,"byte_end":61187,"line_start":144,"line_end":144,"column_start":8,"column_end":26},"name":"flip_horizontal_in","qualname":"::imageops::affine::flip_horizontal_in","value":"pub fn flip_horizontal_in<I,\n                          Container>(&I,\n                                     &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":61074,"byte_end":61161,"line_start":143,"line_end":143,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":256},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":61948,"byte_end":61964,"line_start":169,"line_end":169,"column_start":8,"column_end":24},"name":"flip_vertical_in","qualname":"::imageops::affine::flip_vertical_in","value":"pub fn flip_vertical_in<I,\n                        Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image vertically and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":61855,"byte_end":61940,"line_start":168,"line_end":168,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":259},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":62691,"byte_end":62709,"line_start":194,"line_end":194,"column_start":8,"column_end":26},"name":"rotate180_in_place","qualname":"::imageops::affine::rotate180_in_place","value":"pub fn rotate180_in_place<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise in place.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise in place.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":62632,"byte_end":62683,"line_start":193,"line_end":193,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":261},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":63489,"byte_end":63513,"line_start":225,"line_end":225,"column_start":8,"column_end":32},"name":"flip_horizontal_in_place","qualname":"::imageops::affine::flip_horizontal_in_place","value":"pub fn flip_horizontal_in_place<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally in place.\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally in place.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":63441,"byte_end":63481,"line_start":224,"line_end":224,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":263},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":63919,"byte_end":63941,"line_start":240,"line_end":240,"column_start":8,"column_end":30},"name":"flip_vertical_in_place","qualname":"::imageops::affine::flip_vertical_in_place","value":"pub fn flip_vertical_in_place<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically in place.\n","sig":null,"attributes":[{"value":"/ Flip an image vertically in place.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/affine.rs","byte_start":63873,"byte_end":63911,"line_start":239,"line_end":239,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":265},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"colorops","qualname":"::imageops::colorops","value":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":4026},{"krate":0,"index":272},{"krate":0,"index":4028},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":293},{"krate":0,"index":299},{"krate":0,"index":304},{"krate":0,"index":2487},{"krate":0,"index":2490},{"krate":0,"index":2489},{"krate":0,"index":310},{"krate":0,"index":316},{"krate":0,"index":323},{"krate":0,"index":327},{"krate":0,"index":332}],"decl_id":null,"docs":" Functions for altering and converting the color of pixelbufs\n","sig":null,"attributes":[{"value":"! Functions for altering and converting the color of pixelbufs","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":68894,"byte_end":68958,"line_start":1,"line_end":1,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":284},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":69343,"byte_end":69352,"line_start":16,"line_end":16,"column_start":8,"column_end":17},"name":"grayscale","qualname":"::imageops::colorops::grayscale","value":"pub fn grayscale<I: GenericImageView>(&I)\n-> ImageBuffer<Luma<Subpixel<I>>, Vec<Subpixel<I>>> where\nSubpixel<I>: 'static, <Subpixel<I> as Num>::FromStrRadixErr: 'static","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to grayscale\n","sig":null,"attributes":[{"value":"/ Convert the supplied image to grayscale","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":69292,"byte_end":69335,"line_start":15,"line_end":15,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":286},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":69884,"byte_end":69890,"line_start":36,"line_end":36,"column_start":8,"column_end":14},"name":"invert","qualname":"::imageops::colorops::invert","value":"pub fn invert<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Invert each pixel within the supplied image.\n This function operates in place.\n","sig":null,"attributes":[{"value":"/ Invert each pixel within the supplied image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":69791,"byte_end":69839,"line_start":34,"line_end":34,"column_start":1,"column_end":49}},{"value":"/ This function operates in place.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":69840,"byte_end":69876,"line_start":35,"line_end":35,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":288},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":70353,"byte_end":70361,"line_start":52,"line_end":52,"column_start":8,"column_end":16},"name":"contrast","qualname":"::imageops::colorops::contrast","value":"pub fn contrast<I, P, S>(&I, f32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of the supplied image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of the supplied image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":70154,"byte_end":70200,"line_start":49,"line_end":49,"column_start":1,"column_end":47}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":70201,"byte_end":70260,"line_start":50,"line_end":50,"column_start":1,"column_end":60}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":70261,"byte_end":70345,"line_start":51,"line_end":51,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":293},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":71336,"byte_end":71344,"line_start":87,"line_end":87,"column_start":8,"column_end":16},"name":"brighten","qualname":"::imageops::colorops::brighten","value":"pub fn brighten<I, P, S>(&I, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Brighten the supplied image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the supplied image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":71162,"byte_end":71194,"line_start":84,"line_end":84,"column_start":1,"column_end":33}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":71195,"byte_end":71251,"line_start":85,"line_end":85,"column_start":1,"column_end":57}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":71252,"byte_end":71328,"line_start":86,"line_end":86,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":299},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":72330,"byte_end":72339,"line_start":122,"line_end":122,"column_start":8,"column_end":17},"name":"huerotate","qualname":"::imageops::colorops::huerotate","value":"pub fn huerotate<I, P, S>(&I, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":72114,"byte_end":72148,"line_start":118,"line_end":118,"column_start":1,"column_end":35}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":72149,"byte_end":72200,"line_start":119,"line_end":119,"column_start":1,"column_end":52}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":72201,"byte_end":72270,"line_start":120,"line_end":120,"column_start":1,"column_end":70}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":72271,"byte_end":72322,"line_start":121,"line_end":121,"column_start":1,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":304},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74253,"byte_end":74261,"line_start":179,"line_end":179,"column_start":11,"column_end":19},"name":"ColorMap","qualname":"::imageops::colorops::ColorMap","value":"ColorMap","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309}],"decl_id":null,"docs":" A color map\n","sig":null,"attributes":[{"value":"/ A color map","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74227,"byte_end":74242,"line_start":178,"line_end":178,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":305},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74325,"byte_end":74330,"line_start":181,"line_end":181,"column_start":10,"column_end":15},"name":"Color","qualname":"::imageops::colorops::ColorMap::Color","value":"type Color;","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" The color type on which the map operates on\n","sig":null,"attributes":[{"value":"/ The color type on which the map operates on","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74268,"byte_end":74315,"line_start":180,"line_end":180,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74423,"byte_end":74431,"line_start":184,"line_end":184,"column_start":8,"column_end":16},"name":"index_of","qualname":"::imageops::colorops::ColorMap::index_of","value":"pub fn index_of(&Self, &Self::Color) -> usize","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" Returns the index of the closest match of `color`\n in the color map.\n","sig":null,"attributes":[{"value":"/ Returns the index of the closest match of `color`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74336,"byte_end":74389,"line_start":182,"line_end":182,"column_start":5,"column_end":58}},{"value":"/ in the color map.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74394,"byte_end":74415,"line_start":183,"line_end":183,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74639,"byte_end":74645,"line_start":187,"line_end":187,"column_start":8,"column_end":14},"name":"lookup","qualname":"::imageops::colorops::ColorMap::lookup","value":"pub fn lookup(&Self, usize) -> Option<Self::Color>","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" Looks up color by index in the color map.  If `idx` is out of range for the color map, or\n ColorMap doesn't implement `lookup` `None` is returned.\n","sig":null,"attributes":[{"value":"/ Looks up color by index in the color map.  If `idx` is out of range for the color map, or","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74474,"byte_end":74567,"line_start":185,"line_end":185,"column_start":5,"column_end":98}},{"value":"/ ColorMap doesn't implement `lookup` `None` is returned.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74572,"byte_end":74631,"line_start":186,"line_end":186,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74826,"byte_end":74836,"line_start":192,"line_end":192,"column_start":8,"column_end":18},"name":"has_lookup","qualname":"::imageops::colorops::ColorMap::has_lookup","value":"pub fn has_lookup(&Self) -> bool","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" Determine if this implementation of ColorMap overrides the default `lookup`.\n","sig":null,"attributes":[{"value":"/ Determine if this implementation of ColorMap overrides the default `lookup`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74738,"byte_end":74818,"line_start":191,"line_end":191,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74941,"byte_end":74950,"line_start":196,"line_end":196,"column_start":8,"column_end":17},"name":"map_color","qualname":"::imageops::colorops::ColorMap::map_color","value":"pub fn map_color(&Self, &mut Self::Color)","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" Maps `color` to the closest color in the color map.\n","sig":null,"attributes":[{"value":"/ Maps `color` to the closest color in the color map.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74878,"byte_end":74933,"line_start":195,"line_end":195,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":2487},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":76095,"byte_end":76102,"line_start":229,"line_end":229,"column_start":12,"column_end":19},"name":"BiLevel","qualname":"::imageops::colorops::BiLevel","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bi-level color map","sig":null,"attributes":[{"value":"/ A bi-level color map","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":74987,"byte_end":75011,"line_start":199,"line_end":199,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75012,"byte_end":75015,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75016,"byte_end":75030,"line_start":201,"line_end":201,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75031,"byte_end":75038,"line_start":202,"line_end":202,"column_start":1,"column_end":8}},{"value":"/ use image::imageops::colorops::{index_colors, BiLevel, ColorMap};","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75039,"byte_end":75108,"line_start":203,"line_end":203,"column_start":1,"column_end":70}},{"value":"/ use image::{ImageBuffer, Luma};","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75109,"byte_end":75144,"line_start":204,"line_end":204,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75145,"byte_end":75148,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ let (w, h) = (16, 16);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75149,"byte_end":75175,"line_start":206,"line_end":206,"column_start":1,"column_end":27}},{"value":"/ // Create an image with a smooth horizontal gradient from black (0) to white (255).","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75176,"byte_end":75263,"line_start":207,"line_end":207,"column_start":1,"column_end":88}},{"value":"/ let gray = ImageBuffer::from_fn(w, h, |x, y| -> Luma<u8> { [(255 * x / w) as u8].into() });","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75264,"byte_end":75359,"line_start":208,"line_end":208,"column_start":1,"column_end":96}},{"value":"/ // Mapping the gray image through the `BiLevel` filter should map gray pixels less than half","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75360,"byte_end":75456,"line_start":209,"line_end":209,"column_start":1,"column_end":97}},{"value":"/ // intensity (127) to black (0), and anything greater to white (255).","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75457,"byte_end":75530,"line_start":210,"line_end":210,"column_start":1,"column_end":74}},{"value":"/ let cmap = BiLevel;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75531,"byte_end":75554,"line_start":211,"line_end":211,"column_start":1,"column_end":24}},{"value":"/ let palletized = index_colors(&gray, &cmap);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75555,"byte_end":75603,"line_start":212,"line_end":212,"column_start":1,"column_end":49}},{"value":"/ let mapped = ImageBuffer::from_fn(w, h, |x, y| {","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75604,"byte_end":75656,"line_start":213,"line_end":213,"column_start":1,"column_end":53}},{"value":"/     let p = palletized.get_pixel(x, y);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75657,"byte_end":75700,"line_start":214,"line_end":214,"column_start":1,"column_end":44}},{"value":"/     cmap.lookup(p.0[0] as usize)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75701,"byte_end":75737,"line_start":215,"line_end":215,"column_start":1,"column_end":37}},{"value":"/         .expect(\"indexed color out-of-range\")","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75738,"byte_end":75787,"line_start":216,"line_end":216,"column_start":1,"column_end":50}},{"value":"/ });","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75788,"byte_end":75795,"line_start":217,"line_end":217,"column_start":1,"column_end":8}},{"value":"/ // Create an black and white image of expected output.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75796,"byte_end":75854,"line_start":218,"line_end":218,"column_start":1,"column_end":59}},{"value":"/ let bw = ImageBuffer::from_fn(w, h, |x, y| -> Luma<u8> {","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75855,"byte_end":75915,"line_start":219,"line_end":219,"column_start":1,"column_end":61}},{"value":"/     if x <= (w / 2) {","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75916,"byte_end":75941,"line_start":220,"line_end":220,"column_start":1,"column_end":26}},{"value":"/         [0].into()","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75942,"byte_end":75964,"line_start":221,"line_end":221,"column_start":1,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75965,"byte_end":75981,"line_start":222,"line_end":222,"column_start":1,"column_end":17}},{"value":"/         [255].into()","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":75982,"byte_end":76006,"line_start":223,"line_end":223,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":76007,"byte_end":76016,"line_start":224,"line_end":224,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":76017,"byte_end":76024,"line_start":225,"line_end":225,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(mapped, bw);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":76025,"byte_end":76052,"line_start":226,"line_end":226,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":76053,"byte_end":76060,"line_start":227,"line_end":227,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":327},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":78507,"byte_end":78513,"line_start":319,"line_end":319,"column_start":8,"column_end":14},"name":"dither","qualname":"::imageops::colorops::dither","value":"pub fn dither<Pix, Map: ?Sized>(&mut ImageBuffer<Pix, Vec<u8>>, &Map) where\nMap: ColorMap<Color = Pix>, Pix: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors of the image using the supplied `color_map` while applying\n Floyd-Steinberg dithering to improve the visual conception\n","sig":null,"attributes":[{"value":"/ Reduces the colors of the image using the supplied `color_map` while applying","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":78355,"byte_end":78436,"line_start":317,"line_end":317,"column_start":1,"column_end":82}},{"value":"/ Floyd-Steinberg dithering to improve the visual conception","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":78437,"byte_end":78499,"line_start":318,"line_end":318,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":332},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":80067,"byte_end":80079,"line_start":357,"line_end":357,"column_start":8,"column_end":20},"name":"index_colors","qualname":"::imageops::colorops::index_colors","value":"pub fn index_colors<Pix, Map: ?Sized>(&ImageBuffer<Pix, Vec<u8>>, &Map)\n-> ImageBuffer<Luma<u8>, Vec<u8>> where Map: ColorMap<Color = Pix>,\nPix: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors using the supplied `color_map` and returns an image of the indices\n","sig":null,"attributes":[{"value":"/ Reduces the colors using the supplied `color_map` and returns an image of the indices","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":79970,"byte_end":80059,"line_start":356,"line_end":356,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2493},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83771,"byte_end":83778,"line_start":84,"line_end":84,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::imageops::sample::FilterType::Nearest","value":"FilterType::Nearest","parent":{"krate":0,"index":2492},"children":[],"decl_id":null,"docs":" Nearest Neighbor\n","sig":null,"attributes":[{"value":"/ Nearest Neighbor","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83746,"byte_end":83766,"line_start":83,"line_end":83,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2495},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83807,"byte_end":83815,"line_start":87,"line_end":87,"column_start":5,"column_end":13},"name":"Triangle","qualname":"::imageops::sample::FilterType::Triangle","value":"FilterType::Triangle","parent":{"krate":0,"index":2492},"children":[],"decl_id":null,"docs":" Linear Filter\n","sig":null,"attributes":[{"value":"/ Linear Filter","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83785,"byte_end":83802,"line_start":86,"line_end":86,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2497},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83843,"byte_end":83853,"line_start":90,"line_end":90,"column_start":5,"column_end":15},"name":"CatmullRom","qualname":"::imageops::sample::FilterType::CatmullRom","value":"FilterType::CatmullRom","parent":{"krate":0,"index":2492},"children":[],"decl_id":null,"docs":" Cubic Filter\n","sig":null,"attributes":[{"value":"/ Cubic Filter","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83822,"byte_end":83838,"line_start":89,"line_end":89,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2499},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83884,"byte_end":83892,"line_start":93,"line_end":93,"column_start":5,"column_end":13},"name":"Gaussian","qualname":"::imageops::sample::FilterType::Gaussian","value":"FilterType::Gaussian","parent":{"krate":0,"index":2492},"children":[],"decl_id":null,"docs":" Gaussian Filter\n","sig":null,"attributes":[{"value":"/ Gaussian Filter","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83860,"byte_end":83879,"line_start":92,"line_end":92,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2501},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83929,"byte_end":83937,"line_start":96,"line_end":96,"column_start":5,"column_end":13},"name":"Lanczos3","qualname":"::imageops::sample::FilterType::Lanczos3","value":"FilterType::Lanczos3","parent":{"krate":0,"index":2492},"children":[],"decl_id":null,"docs":" Lanczos with window 3\n","sig":null,"attributes":[{"value":"/ Lanczos with window 3","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83899,"byte_end":83924,"line_start":95,"line_end":95,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":2492},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83729,"byte_end":83739,"line_start":82,"line_end":82,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::imageops::sample::FilterType","value":"pub enum FilterType {\n\n    /// Nearest Neighbor\n    Nearest,\n\n    /// Linear Filter\n    Triangle,\n\n    /// Cubic Filter\n    CatmullRom,\n\n    /// Gaussian Filter\n    Gaussian,\n\n    /// Lanczos with window 3\n    Lanczos3,\n}","parent":null,"children":[{"krate":0,"index":2493},{"krate":0,"index":2495},{"krate":0,"index":2497},{"krate":0,"index":2499},{"krate":0,"index":2501}],"decl_id":null,"docs":" Available Sampling Filters.","sig":null,"attributes":[{"value":"/ Available Sampling Filters.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81287,"byte_end":81318,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81319,"byte_end":81322,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81323,"byte_end":81338,"line_start":17,"line_end":17,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81339,"byte_end":81342,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ To test the different sampling filters on a real example, you can find two","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81343,"byte_end":81421,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ examples called","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81422,"byte_end":81441,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/ [`scaledown`](https://github.com/image-rs/image/tree/master/examples/scaledown)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81442,"byte_end":81525,"line_start":21,"line_end":21,"column_start":1,"column_end":84}},{"value":"/ and","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81526,"byte_end":81533,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ [`scaleup`](https://github.com/image-rs/image/tree/master/examples/scaleup)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81534,"byte_end":81613,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ in the `examples` directory of the crate source code.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81614,"byte_end":81671,"line_start":24,"line_end":24,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81672,"byte_end":81675,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Here is a 3.58 MiB","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81676,"byte_end":81698,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/ [test image](https://github.com/image-rs/image/blob/master/examples/scaledown/test.jpg)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81699,"byte_end":81790,"line_start":27,"line_end":27,"column_start":1,"column_end":92}},{"value":"/ that has been scaled down to 300x225 px:","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81791,"byte_end":81835,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81836,"byte_end":81839,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ <!-- NOTE: To test new test images locally, replace the GitHub path with `../../../docs/` -->","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81840,"byte_end":81937,"line_start":30,"line_end":30,"column_start":1,"column_end":98}},{"value":"/ <div style=\"display: flex; flex-wrap: wrap; align-items: flex-start;\">","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":81938,"byte_end":82012,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82013,"byte_end":82053,"line_start":32,"line_end":32,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-near.png\" title=\"Nearest\"><br>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82054,"byte_end":82192,"line_start":33,"line_end":33,"column_start":1,"column_end":139}},{"value":"/     Nearest Neighbor","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82193,"byte_end":82217,"line_start":34,"line_end":34,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82218,"byte_end":82230,"line_start":35,"line_end":35,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82231,"byte_end":82271,"line_start":36,"line_end":36,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-tri.png\" title=\"Triangle\"><br>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82272,"byte_end":82410,"line_start":37,"line_end":37,"column_start":1,"column_end":139}},{"value":"/     Linear: Triangle","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82411,"byte_end":82435,"line_start":38,"line_end":38,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82436,"byte_end":82448,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82449,"byte_end":82489,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-cmr.png\" title=\"CatmullRom\"><br>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82490,"byte_end":82630,"line_start":41,"line_end":41,"column_start":1,"column_end":141}},{"value":"/     Cubic: Catmull-Rom","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82631,"byte_end":82657,"line_start":42,"line_end":42,"column_start":1,"column_end":27}},{"value":"/   </div>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82658,"byte_end":82670,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82671,"byte_end":82711,"line_start":44,"line_end":44,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-gauss.png\" title=\"Gaussian\"><br>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82712,"byte_end":82852,"line_start":45,"line_end":45,"column_start":1,"column_end":141}},{"value":"/     Gaussian","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82853,"byte_end":82869,"line_start":46,"line_end":46,"column_start":1,"column_end":17}},{"value":"/   </div>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82870,"byte_end":82882,"line_start":47,"line_end":47,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82883,"byte_end":82923,"line_start":48,"line_end":48,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-lcz2.png\" title=\"Lanczos3\"><br>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":82924,"byte_end":83063,"line_start":49,"line_end":49,"column_start":1,"column_end":140}},{"value":"/     Lanczos with window 3","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83064,"byte_end":83093,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/   </div>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83094,"byte_end":83106,"line_start":51,"line_end":51,"column_start":1,"column_end":13}},{"value":"/ </div>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83107,"byte_end":83117,"line_start":52,"line_end":52,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83118,"byte_end":83121,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ## Speed","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83122,"byte_end":83134,"line_start":54,"line_end":54,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83135,"byte_end":83138,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Time required to create each of the examples above, tested on an Intel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83139,"byte_end":83213,"line_start":56,"line_end":56,"column_start":1,"column_end":75}},{"value":"/ i7-4770 CPU with Rust 1.37 in release mode:","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83214,"byte_end":83261,"line_start":57,"line_end":57,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83262,"byte_end":83265,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ <table style=\"width: auto;\">","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83266,"byte_end":83298,"line_start":59,"line_end":59,"column_start":1,"column_end":33}},{"value":"/   <tr>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83299,"byte_end":83309,"line_start":60,"line_end":60,"column_start":1,"column_end":11}},{"value":"/     <th>Nearest</th>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83310,"byte_end":83334,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/     <td>31 ms</td>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83335,"byte_end":83357,"line_start":62,"line_end":62,"column_start":1,"column_end":23}},{"value":"/   </tr>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83358,"byte_end":83369,"line_start":63,"line_end":63,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83370,"byte_end":83380,"line_start":64,"line_end":64,"column_start":1,"column_end":11}},{"value":"/     <th>Triangle</th>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83381,"byte_end":83406,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/     <td>414 ms</td>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83407,"byte_end":83430,"line_start":66,"line_end":66,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83431,"byte_end":83442,"line_start":67,"line_end":67,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83443,"byte_end":83453,"line_start":68,"line_end":68,"column_start":1,"column_end":11}},{"value":"/     <th>CatmullRom</th>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83454,"byte_end":83481,"line_start":69,"line_end":69,"column_start":1,"column_end":28}},{"value":"/     <td>817 ms</td>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83482,"byte_end":83505,"line_start":70,"line_end":70,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83506,"byte_end":83517,"line_start":71,"line_end":71,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83518,"byte_end":83528,"line_start":72,"line_end":72,"column_start":1,"column_end":11}},{"value":"/     <th>Gaussian</th>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83529,"byte_end":83554,"line_start":73,"line_end":73,"column_start":1,"column_end":26}},{"value":"/     <td>1180 ms</td>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83555,"byte_end":83579,"line_start":74,"line_end":74,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83580,"byte_end":83591,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83592,"byte_end":83602,"line_start":76,"line_end":76,"column_start":1,"column_end":11}},{"value":"/     <th>Lanczos3</th>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83603,"byte_end":83628,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/     <td>1170 ms</td>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83629,"byte_end":83653,"line_start":78,"line_end":78,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83654,"byte_end":83665,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"/ </table>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":83666,"byte_end":83678,"line_start":80,"line_end":80,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":382},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":93399,"byte_end":93408,"line_start":393,"line_end":393,"column_start":8,"column_end":17},"name":"thumbnail","qualname":"::imageops::sample::thumbnail","value":"pub fn thumbnail<I, P, S>(&I, u32, u32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + Enlargeable + 'static","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specific dimensions.","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specific dimensions.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":92653,"byte_end":92710,"line_start":381,"line_end":381,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":92711,"byte_end":92714,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ For downscaling, this method uses a fast integer algorithm where each source pixel contributes","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":92715,"byte_end":92813,"line_start":383,"line_end":383,"column_start":1,"column_end":99}},{"value":"/ to exactly one target pixel.  May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":92814,"byte_end":92909,"line_start":384,"line_end":384,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":92910,"byte_end":92913,"line_start":385,"line_end":385,"column_start":1,"column_end":4}},{"value":"/ In case the current width is smaller than the new width or similar for the height, another","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":92914,"byte_end":93008,"line_start":386,"line_end":386,"column_start":1,"column_end":95}},{"value":"/ strategy is used instead.  For each pixel in the output, a rectangular region of the input is","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":93009,"byte_end":93106,"line_start":387,"line_end":387,"column_start":1,"column_end":98}},{"value":"/ determined, just as previously.  But when no input pixel is part of this region, the nearest","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":93107,"byte_end":93203,"line_start":388,"line_end":388,"column_start":1,"column_end":97}},{"value":"/ pixels are interpolated instead.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":93204,"byte_end":93240,"line_start":389,"line_end":389,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":93241,"byte_end":93244,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ For speed reasons, all interpolation is performed linearly over the colour values.  It will not","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":93245,"byte_end":93344,"line_start":391,"line_end":391,"column_start":1,"column_end":100}},{"value":"/ take the pixel colour spaces into account.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":93345,"byte_end":93391,"line_start":392,"line_end":392,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":405},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":101267,"byte_end":101276,"line_start":632,"line_end":632,"column_start":8,"column_end":17},"name":"filter3x3","qualname":"::imageops::sample::filter3x3","value":"pub fn filter3x3<I, P, S>(&I, &[f32]) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Perform a 3x3 box filter on the supplied image.\n ```kernel``` is an array of the filter weights of length 9.\n","sig":null,"attributes":[{"value":"/ Perform a 3x3 box filter on the supplied image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":101144,"byte_end":101195,"line_start":630,"line_end":630,"column_start":1,"column_end":52}},{"value":"/ ```kernel``` is an array of the filter weights of length 9.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":101196,"byte_end":101259,"line_start":631,"line_end":631,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":410},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":103703,"byte_end":103709,"line_start":712,"line_end":712,"column_start":8,"column_end":14},"name":"resize","qualname":"::imageops::sample::resize","value":"pub fn resize<I: GenericImageView>(&I, u32, u32, FilterType)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specified dimensions.\n ```nwidth``` and ```nheight``` are the new dimensions.\n ```filter``` is the sampling filter to use.\n","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specified dimensions.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":103530,"byte_end":103588,"line_start":709,"line_end":709,"column_start":1,"column_end":59}},{"value":"/ ```nwidth``` and ```nheight``` are the new dimensions.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":103589,"byte_end":103647,"line_start":710,"line_end":710,"column_start":1,"column_end":59}},{"value":"/ ```filter``` is the sampling filter to use.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":103648,"byte_end":103695,"line_start":711,"line_end":711,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":412},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":104835,"byte_end":104839,"line_start":751,"line_end":751,"column_start":8,"column_end":12},"name":"blur","qualname":"::imageops::sample::blur","value":"pub fn blur<I: GenericImageView>(&I, f32)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on the supplied image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on the supplied image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":104723,"byte_end":104774,"line_start":749,"line_end":749,"column_start":1,"column_end":52}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":104775,"byte_end":104827,"line_start":750,"line_end":750,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":415},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":105662,"byte_end":105671,"line_start":778,"line_end":778,"column_start":8,"column_end":17},"name":"unsharpen","qualname":"::imageops::sample::unsharpen","value":"pub fn unsharpen<I, P, S>(&I, f32, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on the supplied image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is the threshold for the difference between","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on the supplied image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":105401,"byte_end":105454,"line_start":773,"line_end":773,"column_start":1,"column_end":54}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":105455,"byte_end":105506,"line_start":774,"line_end":774,"column_start":1,"column_end":52}},{"value":"/ ```threshold``` is the threshold for the difference between","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":105507,"byte_end":105570,"line_start":775,"line_end":775,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":105571,"byte_end":105574,"line_start":776,"line_end":776,"column_start":1,"column_end":4}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":105575,"byte_end":105654,"line_start":777,"line_end":777,"column_start":1,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":420},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45895,"byte_end":45899,"line_start":33,"line_end":33,"column_start":8,"column_end":12},"name":"crop","qualname":"::imageops::crop","value":"pub fn crop<I: GenericImageView>(&mut I, u32, u32, u32, u32)\n-> SubImage<&mut I>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view into an image\n","sig":null,"attributes":[{"value":"/ Return a mutable view into an image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45848,"byte_end":45887,"line_start":32,"line_end":32,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":422},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":46193,"byte_end":46201,"line_start":45,"line_end":45,"column_start":8,"column_end":16},"name":"crop_imm","qualname":"::imageops::crop_imm","value":"pub fn crop_imm<I: GenericImageView>(&I, u32, u32, u32, u32) -> SubImage<&I>","parent":null,"children":[],"decl_id":null,"docs":" Return an immutable view into an image\n","sig":null,"attributes":[{"value":"/ Return an immutable view into an image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":46143,"byte_end":46185,"line_start":44,"line_end":44,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":426},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48985,"byte_end":48999,"line_start":129,"line_end":129,"column_start":8,"column_end":22},"name":"overlay_bounds","qualname":"::imageops::overlay_bounds","value":"pub fn overlay_bounds((u32, u32), (u32, u32), u32, u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Calculate the region that can be copied from top to bottom.","sig":null,"attributes":[{"value":"/ Calculate the region that can be copied from top to bottom.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":46813,"byte_end":46876,"line_start":74,"line_end":74,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":46877,"byte_end":46880,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ Given image size of bottom and top image, and a point at which we want to place the top image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":46881,"byte_end":46978,"line_start":76,"line_end":76,"column_start":1,"column_end":98}},{"value":"/ onto the bottom image, how large can we be? Have to wary of the following issues:","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":46979,"byte_end":47064,"line_start":77,"line_end":77,"column_start":1,"column_end":86}},{"value":"/ * Top might be larger than bottom","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47065,"byte_end":47102,"line_start":78,"line_end":78,"column_start":1,"column_end":38}},{"value":"/ * Overflows in the computation","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47103,"byte_end":47137,"line_start":79,"line_end":79,"column_start":1,"column_end":35}},{"value":"/ * Coordinates could be completely out of bounds","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47138,"byte_end":47189,"line_start":80,"line_end":80,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47190,"byte_end":47193,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ The main idea is to make use of inequalities provided by the nature of `saturing_add` and","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47194,"byte_end":47287,"line_start":82,"line_end":82,"column_start":1,"column_end":94}},{"value":"/ `saturating_sub`. These intrinsically validate that all resulting coordinates will be in bounds","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47288,"byte_end":47387,"line_start":83,"line_end":83,"column_start":1,"column_end":100}},{"value":"/ for both images.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47388,"byte_end":47408,"line_start":84,"line_end":84,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47409,"byte_end":47412,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ We want that all these coordinate accesses are safe:","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47413,"byte_end":47469,"line_start":86,"line_end":86,"column_start":1,"column_end":57}},{"value":"/ 1. `bottom.get_pixel(x + [0..x_range), y + [0..y_range))`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47470,"byte_end":47531,"line_start":87,"line_end":87,"column_start":1,"column_end":62}},{"value":"/ 2. `top.get_pixel([0..x_range), [0..y_range))`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47532,"byte_end":47582,"line_start":88,"line_end":88,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47583,"byte_end":47586,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ Proof that the function provides the necessary bounds for width. Note that all unaugmented math","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47587,"byte_end":47686,"line_start":90,"line_end":90,"column_start":1,"column_end":100}},{"value":"/ operations are to be read in standard arithmetic, not integer arithmetic. Since no direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47687,"byte_end":47780,"line_start":91,"line_end":91,"column_start":1,"column_end":94}},{"value":"/ integer arithmetic occurs in the implementation, this is unambiguous.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47781,"byte_end":47854,"line_start":92,"line_end":92,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47855,"byte_end":47858,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47859,"byte_end":47870,"line_start":94,"line_end":94,"column_start":1,"column_end":12}},{"value":"/ Three short notes/lemmata:","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47871,"byte_end":47901,"line_start":95,"line_end":95,"column_start":1,"column_end":31}},{"value":"/ - Iff `(a - b) <= 0` then `a.saturating_sub(b) = 0`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47902,"byte_end":47957,"line_start":96,"line_end":96,"column_start":1,"column_end":56}},{"value":"/ - Iff `(a - b) >= 0` then `a.saturating_sub(b) = a - b`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":47958,"byte_end":48017,"line_start":97,"line_end":97,"column_start":1,"column_end":60}},{"value":"/ - If  `a <= c` then `a.saturating_sub(b) <= c.saturating_sub(b)`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48018,"byte_end":48086,"line_start":98,"line_end":98,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48087,"byte_end":48090,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ 1.1 We show that if `bottom_width <= x`, then `x_range = 0` therefore `x + [0..x_range)` is empty.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48091,"byte_end":48193,"line_start":100,"line_end":100,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48194,"byte_end":48197,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48198,"byte_end":48209,"line_start":102,"line_end":102,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48210,"byte_end":48282,"line_start":103,"line_end":103,"column_start":1,"column_end":73}},{"value":"/ <= bottom_width.saturating_sub(x)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48283,"byte_end":48320,"line_start":104,"line_end":104,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48321,"byte_end":48324,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ bottom_width <= x","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48325,"byte_end":48346,"line_start":106,"line_end":106,"column_start":1,"column_end":22}},{"value":"/ <==> bottom_width - x <= 0","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48347,"byte_end":48377,"line_start":107,"line_end":107,"column_start":1,"column_end":31}},{"value":"/ <==> bottom_width.saturating_sub(x) = 0","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48378,"byte_end":48421,"line_start":108,"line_end":108,"column_start":1,"column_end":44}},{"value":"/  ==> x_range <= 0","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48422,"byte_end":48443,"line_start":109,"line_end":109,"column_start":1,"column_end":22}},{"value":"/  ==> x_range  = 0","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48444,"byte_end":48465,"line_start":110,"line_end":110,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48466,"byte_end":48469,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ 1.2 If `x < bottom_width` then `x + x_range < bottom_width`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48470,"byte_end":48533,"line_start":112,"line_end":112,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48534,"byte_end":48537,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ x + x_range","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48538,"byte_end":48553,"line_start":114,"line_end":114,"column_start":1,"column_end":16}},{"value":"/ <= x + bottom_width.saturating_sub(x)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48554,"byte_end":48595,"line_start":115,"line_end":115,"column_start":1,"column_end":42}},{"value":"/  = x + (bottom_width - x)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48596,"byte_end":48625,"line_start":116,"line_end":116,"column_start":1,"column_end":30}},{"value":"/  = bottom_width","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48626,"byte_end":48645,"line_start":117,"line_end":117,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48646,"byte_end":48649,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ 2. We show that `x_range <= top_width`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48650,"byte_end":48692,"line_start":119,"line_end":119,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48693,"byte_end":48696,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48697,"byte_end":48708,"line_start":121,"line_end":121,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48709,"byte_end":48781,"line_start":122,"line_end":122,"column_start":1,"column_end":73}},{"value":"/ <= top_width.saturating_add(x).saturating_sub(x)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48782,"byte_end":48834,"line_start":123,"line_end":123,"column_start":1,"column_end":53}},{"value":"/ <= (top_wdith + x).saturating_sub(x)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48835,"byte_end":48875,"line_start":124,"line_end":124,"column_start":1,"column_end":41}},{"value":"/  = top_width (due to `top_width >= 0` and `x >= 0`)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48876,"byte_end":48931,"line_start":125,"line_end":125,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48932,"byte_end":48939,"line_start":126,"line_end":126,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48940,"byte_end":48943,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ Proof is the same for height.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":48944,"byte_end":48977,"line_start":128,"line_end":128,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":427},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":49513,"byte_end":49520,"line_start":147,"line_end":147,"column_start":8,"column_end":15},"name":"overlay","qualname":"::imageops::overlay","value":"pub fn overlay<I, J>(&mut I, &J, u32, u32) where I: GenericImage,\nJ: GenericImageView<Pixel = I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Overlay an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Overlay an image at a given coordinate (x, y)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":49456,"byte_end":49505,"line_start":146,"line_end":146,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":430},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50539,"byte_end":50543,"line_start":183,"line_end":183,"column_start":8,"column_end":12},"name":"tile","qualname":"::imageops::tile","value":"pub fn tile<I, J>(&mut I, &J) where I: GenericImage, J: GenericImageView<Pixel\n= I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Tile an image by repeating it multiple times","sig":null,"attributes":[{"value":"/ Tile an image by repeating it multiple times","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50179,"byte_end":50227,"line_start":169,"line_end":169,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50228,"byte_end":50231,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50232,"byte_end":50246,"line_start":171,"line_end":171,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50247,"byte_end":50260,"line_start":172,"line_end":172,"column_start":1,"column_end":14}},{"value":"/ use image::{RgbaImage};","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50261,"byte_end":50288,"line_start":173,"line_end":173,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50289,"byte_end":50292,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50293,"byte_end":50308,"line_start":175,"line_end":175,"column_start":1,"column_end":16}},{"value":"/      let mut img = RgbaImage::new(1920, 1080);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50309,"byte_end":50359,"line_start":176,"line_end":176,"column_start":1,"column_end":51}},{"value":"/      let tile = image::open(\"tile.png\").unwrap();","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50360,"byte_end":50413,"line_start":177,"line_end":177,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50414,"byte_end":50417,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/      image::imageops::tile(&mut img, &tile);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50418,"byte_end":50466,"line_start":179,"line_end":179,"column_start":1,"column_end":49}},{"value":"/      img.save(\"tiled_wallpaper.png\").unwrap();","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50467,"byte_end":50517,"line_start":180,"line_end":180,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50518,"byte_end":50523,"line_start":181,"line_end":181,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50524,"byte_end":50531,"line_start":182,"line_end":182,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":433},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51340,"byte_end":51357,"line_start":211,"line_end":211,"column_start":8,"column_end":25},"name":"vertical_gradient","qualname":"::imageops::vertical_gradient","value":"pub fn vertical_gradient<S, P, I>(&mut I, &P, &P) where I: GenericImage<Pixel\n= P>, P: Pixel<Subpixel = S> + 'static, S: Primitive + Lerp + 'static","parent":null,"children":[],"decl_id":null,"docs":" Fill the image with a linear vertical gradient\n \n This function assumes a linear color space.\n \n # Examples\n ```no_run\n use image::{Rgba, RgbaImage, Pixel};\n \n fn main() {\n     let mut img = RgbaImage::new(100, 100);\n     let start = Rgba::from_slice(&[0, 128, 0, 0]);\n     let end = Rgba::from_slice(&[255, 255, 255, 255]);\n \n     image::imageops::vertical_gradient(&mut img, start, end);\n     img.save(\"vertical_gradient.png\").unwrap();\n }\n","sig":null,"attributes":[{"value":"/ Fill the image with a linear vertical gradient","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50842,"byte_end":50892,"line_start":195,"line_end":195,"column_start":1,"column_end":51}},{"value":"/ ","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50893,"byte_end":50897,"line_start":196,"line_end":196,"column_start":1,"column_end":5}},{"value":"/ This function assumes a linear color space.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50898,"byte_end":50945,"line_start":197,"line_end":197,"column_start":1,"column_end":48}},{"value":"/ ","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50946,"byte_end":50950,"line_start":198,"line_end":198,"column_start":1,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50951,"byte_end":50965,"line_start":199,"line_end":199,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50966,"byte_end":50979,"line_start":200,"line_end":200,"column_start":1,"column_end":14}},{"value":"/ use image::{Rgba, RgbaImage, Pixel};","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":50980,"byte_end":51020,"line_start":201,"line_end":201,"column_start":1,"column_end":41}},{"value":"/ ","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51021,"byte_end":51025,"line_start":202,"line_end":202,"column_start":1,"column_end":5}},{"value":"/ fn main() {","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51026,"byte_end":51041,"line_start":203,"line_end":203,"column_start":1,"column_end":16}},{"value":"/     let mut img = RgbaImage::new(100, 100);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51042,"byte_end":51089,"line_start":204,"line_end":204,"column_start":1,"column_end":48}},{"value":"/     let start = Rgba::from_slice(&[0, 128, 0, 0]);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51090,"byte_end":51144,"line_start":205,"line_end":205,"column_start":1,"column_end":55}},{"value":"/     let end = Rgba::from_slice(&[255, 255, 255, 255]);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51145,"byte_end":51203,"line_start":206,"line_end":206,"column_start":1,"column_end":59}},{"value":"/ ","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51204,"byte_end":51208,"line_start":207,"line_end":207,"column_start":1,"column_end":5}},{"value":"/     image::imageops::vertical_gradient(&mut img, start, end);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51209,"byte_end":51274,"line_start":208,"line_end":208,"column_start":1,"column_end":66}},{"value":"/     img.save(\"vertical_gradient.png\").unwrap();","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51275,"byte_end":51326,"line_start":209,"line_end":209,"column_start":1,"column_end":52}},{"value":"/ }","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51327,"byte_end":51332,"line_start":210,"line_end":210,"column_start":1,"column_end":6}}]},{"kind":"Function","id":{"krate":0,"index":438},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52387,"byte_end":52406,"line_start":246,"line_end":246,"column_start":8,"column_end":27},"name":"horizontal_gradient","qualname":"::imageops::horizontal_gradient","value":"pub fn horizontal_gradient<S, P, I>(&mut I, &P, &P) where\nI: GenericImage<Pixel = P>, P: Pixel<Subpixel = S> + 'static, S: Primitive +\nLerp + 'static","parent":null,"children":[],"decl_id":null,"docs":" Fill the image with a linear horizontal gradient\n \n This function assumes a linear color space.","sig":null,"attributes":[{"value":"/ Fill the image with a linear horizontal gradient","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51884,"byte_end":51936,"line_start":230,"line_end":230,"column_start":1,"column_end":53}},{"value":"/ ","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51937,"byte_end":51941,"line_start":231,"line_end":231,"column_start":1,"column_end":5}},{"value":"/ This function assumes a linear color space.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51942,"byte_end":51989,"line_start":232,"line_end":232,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51990,"byte_end":51993,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":51994,"byte_end":52008,"line_start":234,"line_end":234,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52009,"byte_end":52022,"line_start":235,"line_end":235,"column_start":1,"column_end":14}},{"value":"/ use image::{Rgba, RgbaImage, Pixel};","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52023,"byte_end":52063,"line_start":236,"line_end":236,"column_start":1,"column_end":41}},{"value":"/ ","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52064,"byte_end":52068,"line_start":237,"line_end":237,"column_start":1,"column_end":5}},{"value":"/ fn main() {","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52069,"byte_end":52084,"line_start":238,"line_end":238,"column_start":1,"column_end":16}},{"value":"/     let mut img = RgbaImage::new(100, 100);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52085,"byte_end":52132,"line_start":239,"line_end":239,"column_start":1,"column_end":48}},{"value":"/     let start = Rgba::from_slice(&[0, 128, 0, 0]);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52133,"byte_end":52187,"line_start":240,"line_end":240,"column_start":1,"column_end":55}},{"value":"/     let end = Rgba::from_slice(&[255, 255, 255, 255]);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52188,"byte_end":52246,"line_start":241,"line_end":241,"column_start":1,"column_end":59}},{"value":"/ ","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52247,"byte_end":52251,"line_start":242,"line_end":242,"column_start":1,"column_end":5}},{"value":"/     image::imageops::horizontal_gradient(&mut img, start, end);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52252,"byte_end":52319,"line_start":243,"line_end":243,"column_start":1,"column_end":68}},{"value":"/     img.save(\"horizontal_gradient.png\").unwrap();","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52320,"byte_end":52373,"line_start":244,"line_end":244,"column_start":1,"column_end":54}},{"value":"/ }","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52374,"byte_end":52379,"line_start":245,"line_end":245,"column_start":1,"column_end":6}}]},{"kind":"Function","id":{"krate":0,"index":443},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":53003,"byte_end":53010,"line_start":266,"line_end":266,"column_start":8,"column_end":15},"name":"replace","qualname":"::imageops::replace","value":"pub fn replace<I, J>(&mut I, &J, u32, u32) where I: GenericImage,\nJ: GenericImageView<Pixel = I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Replace the contents of an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Replace the contents of an image at a given coordinate (x, y)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":52930,"byte_end":52995,"line_start":265,"line_end":265,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":446},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/mod.rs","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":493},{"krate":0,"index":541}],"decl_id":null,"docs":" Input and output of images.\n","sig":null,"attributes":[{"value":"! Input and output of images.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/mod.rs","byte_start":108632,"byte_end":108663,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":468},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110860,"byte_end":110866,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"Reader","qualname":"::io::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471}],"decl_id":null,"docs":" A multi-format image reader.","sig":null,"attributes":[{"value":"/ A multi-format image reader.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109061,"byte_end":109093,"line_start":12,"line_end":12,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109094,"byte_end":109097,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Wraps an input reader to facilitate automatic detection of an image's format, appropriate","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109098,"byte_end":109191,"line_start":14,"line_end":14,"column_start":1,"column_end":94}},{"value":"/ decoding method, and dispatches into the set of supported [`ImageDecoder`] implementations.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109192,"byte_end":109287,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109288,"byte_end":109291,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109292,"byte_end":109304,"line_start":17,"line_end":17,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109305,"byte_end":109308,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Opening a file, deducing the format based on the file path automatically, and trying to decode","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109309,"byte_end":109407,"line_start":19,"line_end":19,"column_start":1,"column_end":99}},{"value":"/ the image contained can be performed by constructing the reader and immediately consuming it.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109408,"byte_end":109505,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109506,"byte_end":109509,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109510,"byte_end":109523,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/ # use image::ImageError;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109524,"byte_end":109552,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109553,"byte_end":109581,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109582,"byte_end":109625,"line_start":25,"line_end":25,"column_start":1,"column_end":44}},{"value":"/ let image = Reader::open(\"path/to/image.png\")?","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109626,"byte_end":109676,"line_start":26,"line_end":26,"column_start":1,"column_end":51}},{"value":"/     .decode()?;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109677,"byte_end":109696,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/ # Ok(()) }","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109697,"byte_end":109711,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109712,"byte_end":109719,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109720,"byte_end":109723,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ It is also possible to make a guess based on the content. This is especially handy if the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109724,"byte_end":109817,"line_start":31,"line_end":31,"column_start":1,"column_end":94}},{"value":"/ source is some blob in memory and you have constructed the reader in another way. Here is an","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109818,"byte_end":109914,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ example with a `pnm` black-and-white subformat that encodes its pixel matrix with ascii values.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":109915,"byte_end":110014,"line_start":33,"line_end":33,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110015,"byte_end":110018,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # use image::ImageError;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110114,"byte_end":110142,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110143,"byte_end":110171,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110172,"byte_end":110215,"line_start":39,"line_end":39,"column_start":1,"column_end":44}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110216,"byte_end":110240,"line_start":40,"line_end":40,"column_start":1,"column_end":25}},{"value":"/ use image::ImageFormat;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110241,"byte_end":110268,"line_start":41,"line_end":41,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110269,"byte_end":110272,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ let raw_data = b\"P1 2 2\\n\\","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110273,"byte_end":110303,"line_start":43,"line_end":43,"column_start":1,"column_end":31}},{"value":"/     0 1\\n\\","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110304,"byte_end":110318,"line_start":44,"line_end":44,"column_start":1,"column_end":15}},{"value":"/     1 0\\n\";","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110319,"byte_end":110334,"line_start":45,"line_end":45,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110335,"byte_end":110338,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ let mut reader = Reader::new(Cursor::new(raw_data))","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110339,"byte_end":110394,"line_start":47,"line_end":47,"column_start":1,"column_end":56}},{"value":"/     .with_guessed_format()","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110395,"byte_end":110425,"line_start":48,"line_end":48,"column_start":1,"column_end":31}},{"value":"/     .expect(\"Cursor io never fails\");","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110426,"byte_end":110467,"line_start":49,"line_end":49,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(reader.format(), Some(ImageFormat::Pnm));","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110468,"byte_end":110524,"line_start":50,"line_end":50,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110525,"byte_end":110528,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ let image = reader.decode()?;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110529,"byte_end":110562,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/ # Ok(()) }","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110563,"byte_end":110577,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110578,"byte_end":110585,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110586,"byte_end":110589,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ As a final fallback or if only a specific format must be used, the reader always allows manual","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110590,"byte_end":110688,"line_start":56,"line_end":56,"column_start":1,"column_end":99}},{"value":"/ specification of the supposed image format with [`set_format`].","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110689,"byte_end":110756,"line_start":57,"line_end":57,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110757,"byte_end":110760,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ [`set_format`]: #method.set_format","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110761,"byte_end":110799,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/ [`ImageDecoder`]: ../trait.ImageDecoder.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":110800,"byte_end":110848,"line_start":60,"line_end":60,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111387,"byte_end":111390,"line_start":76,"line_end":76,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R>>::new","value":"pub fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new image reader without a preset format.","sig":null,"attributes":[{"value":"/ Create a new image reader without a preset format.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111030,"byte_end":111084,"line_start":69,"line_end":69,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111089,"byte_end":111092,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ It is possible to guess the format based on the content of the read object with","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111097,"byte_end":111180,"line_start":71,"line_end":71,"column_start":5,"column_end":88}},{"value":"/ [`with_guessed_format`], or to set the format directly with [`set_format`].","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111185,"byte_end":111264,"line_start":72,"line_end":72,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111269,"byte_end":111272,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ [`with_guessed_format`]: #method.with_guessed_format","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111277,"byte_end":111333,"line_start":74,"line_end":74,"column_start":5,"column_end":61}},{"value":"/ [`set_format`]: method.set_format","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111338,"byte_end":111375,"line_start":75,"line_end":75,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111560,"byte_end":111571,"line_start":84,"line_end":84,"column_start":12,"column_end":23},"name":"with_format","qualname":"<Reader<R>>::with_format","value":"pub fn with_format(R, ImageFormat) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a reader with specified format.\n","sig":null,"attributes":[{"value":"/ Construct a reader with specified format.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111503,"byte_end":111548,"line_start":83,"line_end":83,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111765,"byte_end":111771,"line_start":92,"line_end":92,"column_start":12,"column_end":18},"name":"format","qualname":"<Reader<R>>::format","value":"pub fn format(&Self) -> Option<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Get the currently determined format.\n","sig":null,"attributes":[{"value":"/ Get the currently determined format.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111713,"byte_end":111753,"line_start":91,"line_end":91,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111906,"byte_end":111916,"line_start":97,"line_end":97,"column_start":12,"column_end":22},"name":"set_format","qualname":"<Reader<R>>::set_format","value":"pub fn set_format(&mut Self, ImageFormat)","parent":null,"children":[],"decl_id":null,"docs":" Supply the format as which to interpret the read image.\n","sig":null,"attributes":[{"value":"/ Supply the format as which to interpret the read image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111835,"byte_end":111894,"line_start":96,"line_end":96,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112246,"byte_end":112258,"line_start":105,"line_end":105,"column_start":12,"column_end":24},"name":"clear_format","qualname":"<Reader<R>>::clear_format","value":"pub fn clear_format(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove the current information on the image format.","sig":null,"attributes":[{"value":"/ Remove the current information on the image format.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111998,"byte_end":112053,"line_start":101,"line_end":101,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112058,"byte_end":112061,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ Note that many operations require format information to be present and will return e.g. an","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112066,"byte_end":112160,"line_start":103,"line_end":103,"column_start":5,"column_end":99}},{"value":"/ `ImageError::Unsupported` when the image format has not been set.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112165,"byte_end":112234,"line_start":104,"line_end":104,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112345,"byte_end":112355,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the reader.\n","sig":null,"attributes":[{"value":"/ Unwrap the reader.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112311,"byte_end":112333,"line_start":109,"line_end":109,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112838,"byte_end":112842,"line_start":124,"line_end":124,"column_start":12,"column_end":16},"name":"open","qualname":"<Reader<BufReader<File>>>::open","value":"pub fn open<P>(P) -> io::Result<Self> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Open a file to read, format will be guessed from path.","sig":null,"attributes":[{"value":"/ Open a file to read, format will be guessed from path.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112432,"byte_end":112490,"line_start":116,"line_end":116,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112495,"byte_end":112498,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ This will not attempt any io operation on the opened file.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112503,"byte_end":112565,"line_start":118,"line_end":118,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112570,"byte_end":112573,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ If you want to inspect the content for a better guess on the format, which does not depend","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112578,"byte_end":112672,"line_start":120,"line_end":120,"column_start":5,"column_end":99}},{"value":"/ on file extensions, follow this call with a call to [`with_guessed_format`].","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112677,"byte_end":112757,"line_start":121,"line_end":121,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112762,"byte_end":112765,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ [`with_guessed_format`]: #method.with_guessed_format","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112770,"byte_end":112826,"line_start":123,"line_end":123,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114484,"byte_end":114503,"line_start":166,"line_end":166,"column_start":12,"column_end":31},"name":"with_guessed_format","qualname":"<Reader<R>>::with_guessed_format","value":"pub fn with_guessed_format(Self) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Make a format guess based on the content, replacing it on success.","sig":null,"attributes":[{"value":"/ Make a format guess based on the content, replacing it on success.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113210,"byte_end":113280,"line_start":138,"line_end":138,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113285,"byte_end":113288,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok` with the guess if no io error occurs. Additionally, replaces the current","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113293,"byte_end":113382,"line_start":140,"line_end":140,"column_start":5,"column_end":94}},{"value":"/ format if the guess was successful. If the guess was unable to determine a format then","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113387,"byte_end":113477,"line_start":141,"line_end":141,"column_start":5,"column_end":95}},{"value":"/ the current format of the reader is unchanged.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113482,"byte_end":113532,"line_start":142,"line_end":142,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113537,"byte_end":113540,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the underlying reader fails. The format is unchanged. The error is a","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113545,"byte_end":113637,"line_start":144,"line_end":144,"column_start":5,"column_end":97}},{"value":"/ `std::io::Error` and not `ImageError` since the only error case is an error when the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113642,"byte_end":113730,"line_start":145,"line_end":145,"column_start":5,"column_end":93}},{"value":"/ underlying reader seeks.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113735,"byte_end":113763,"line_start":146,"line_end":146,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113768,"byte_end":113771,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ When an error occurs, the reader may not have been properly reset and it is potentially","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113776,"byte_end":113867,"line_start":148,"line_end":148,"column_start":5,"column_end":96}},{"value":"/ hazardous to continue with more io.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113872,"byte_end":113911,"line_start":149,"line_end":149,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113916,"byte_end":113919,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ ## Usage","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113924,"byte_end":113936,"line_start":151,"line_end":151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113941,"byte_end":113944,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ This supplements the path based type deduction from [`open`](Reader::open) with content based deduction.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113949,"byte_end":114057,"line_start":153,"line_end":153,"column_start":5,"column_end":113}},{"value":"/ This is more common in Linux and UNIX operating systems and also helpful if the path can","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114062,"byte_end":114154,"line_start":154,"line_end":154,"column_start":5,"column_end":97}},{"value":"/ not be directly controlled.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114159,"byte_end":114190,"line_start":155,"line_end":155,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114195,"byte_end":114198,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114203,"byte_end":114216,"line_start":157,"line_end":157,"column_start":5,"column_end":18}},{"value":"/ # use image::ImageError;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114221,"byte_end":114249,"line_start":158,"line_end":158,"column_start":5,"column_end":33}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114254,"byte_end":114282,"line_start":159,"line_end":159,"column_start":5,"column_end":33}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114287,"byte_end":114330,"line_start":160,"line_end":160,"column_start":5,"column_end":48}},{"value":"/ let image = Reader::open(\"image.unknown\")?","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114335,"byte_end":114381,"line_start":161,"line_end":161,"column_start":5,"column_end":51}},{"value":"/     .with_guessed_format()?","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114386,"byte_end":114417,"line_start":162,"line_end":162,"column_start":5,"column_end":36}},{"value":"/     .decode()?;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114422,"byte_end":114441,"line_start":163,"line_end":163,"column_start":5,"column_end":24}},{"value":"/ # Ok(()) }","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114446,"byte_end":114460,"line_start":164,"line_end":164,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":114465,"byte_end":114472,"line_start":165,"line_end":165,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115461,"byte_end":115476,"line_start":192,"line_end":192,"column_start":12,"column_end":27},"name":"into_dimensions","qualname":"<Reader<R>>::into_dimensions","value":"pub fn into_dimensions(Self) -> ImageResult<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Read the image dimensions.","sig":null,"attributes":[{"value":"/ Read the image dimensions.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115248,"byte_end":115278,"line_start":187,"line_end":187,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115283,"byte_end":115286,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115291,"byte_end":115366,"line_start":189,"line_end":189,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115371,"byte_end":115374,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115379,"byte_end":115449,"line_start":191,"line_end":191,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115870,"byte_end":115876,"line_start":202,"line_end":202,"column_start":12,"column_end":18},"name":"decode","qualname":"<Reader<R>>::decode","value":"pub fn decode(Self) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Read the image (replaces `load`).","sig":null,"attributes":[{"value":"/ Read the image (replaces `load`).","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115650,"byte_end":115687,"line_start":197,"line_end":197,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115692,"byte_end":115695,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115700,"byte_end":115775,"line_start":199,"line_end":199,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115780,"byte_end":115783,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":115788,"byte_end":115858,"line_start":201,"line_end":201,"column_start":5,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":524},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":117947,"byte_end":117951,"line_start":65,"line_end":65,"column_start":8,"column_end":12},"name":"load","qualname":"::io::free_functions::load","value":"pub fn load<R: BufRead + Seek>(R, ImageFormat) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a Reader","sig":null,"attributes":[{"value":"/ Create a new image from a Reader","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":117734,"byte_end":117770,"line_start":58,"line_end":58,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":117771,"byte_end":117774,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":117775,"byte_end":117821,"line_start":60,"line_end":60,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":117822,"byte_end":117825,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":117826,"byte_end":117867,"line_start":62,"line_end":62,"column_start":1,"column_end":42}},{"value":"allow(unused_variables)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":117868,"byte_end":117894,"line_start":63,"line_end":63,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":537},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":127730,"byte_end":127742,"line_start":285,"line_end":285,"column_start":8,"column_end":20},"name":"guess_format","qualname":"::io::free_functions::guess_format","value":"pub fn guess_format(&[u8]) -> ImageResult<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Guess image format from memory block","sig":null,"attributes":[{"value":"/ Guess image format from memory block","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":127469,"byte_end":127509,"line_start":280,"line_end":280,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":127510,"byte_end":127513,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format based on the Magic Bytes at the beginning.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":127514,"byte_end":127607,"line_start":282,"line_end":282,"column_start":1,"column_end":94}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":127608,"byte_end":127650,"line_start":283,"line_end":283,"column_start":1,"column_end":43}},{"value":"/ This is not to be trusted on the validity of the whole memory block","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":127651,"byte_end":127722,"line_start":284,"line_end":284,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":542},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flat","qualname":"::flat","value":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":4152},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":2511},{"krate":0,"index":2519},{"krate":0,"index":2516},{"krate":0,"index":2522},{"krate":0,"index":2542},{"krate":0,"index":2541},{"krate":0,"index":2539},{"krate":0,"index":2535},{"krate":0,"index":2536},{"krate":0,"index":2532},{"krate":0,"index":2533},{"krate":0,"index":2529},{"krate":0,"index":2544},{"krate":0,"index":2570},{"krate":0,"index":2569},{"krate":0,"index":2567},{"krate":0,"index":2563},{"krate":0,"index":2564},{"krate":0,"index":2560},{"krate":0,"index":2561},{"krate":0,"index":2550},{"krate":0,"index":2548},{"krate":0,"index":569},{"krate":0,"index":592},{"krate":0,"index":596},{"krate":0,"index":638},{"krate":0,"index":2572},{"krate":0,"index":2581},{"krate":0,"index":2577},{"krate":0,"index":2585},{"krate":0,"index":2594},{"krate":0,"index":2590},{"krate":0,"index":2598},{"krate":0,"index":2620},{"krate":0,"index":2619},{"krate":0,"index":2617},{"krate":0,"index":2613},{"krate":0,"index":2614},{"krate":0,"index":2610},{"krate":0,"index":2611},{"krate":0,"index":2607},{"krate":0,"index":2622},{"krate":0,"index":2645},{"krate":0,"index":2644},{"krate":0,"index":2642},{"krate":0,"index":2639},{"krate":0,"index":2640},{"krate":0,"index":2636},{"krate":0,"index":2637},{"krate":0,"index":2633},{"krate":0,"index":643},{"krate":0,"index":656},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":675},{"krate":0,"index":679},{"krate":0,"index":691},{"krate":0,"index":703},{"krate":0,"index":711},{"krate":0,"index":716},{"krate":0,"index":718},{"krate":0,"index":719}],"decl_id":null,"docs":" Image representations for ffi.","sig":null,"attributes":[{"value":"! Image representations for ffi.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128518,"byte_end":128552,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128553,"byte_end":128556,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # Usage","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128557,"byte_end":128568,"line_start":3,"line_end":3,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128569,"byte_end":128572,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! Imagine you want to offer a very simple ffi interface: The caller provides an image buffer and","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128573,"byte_end":128671,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"! your program creates a thumbnail from it and dumps that image as `png`. This module is designed","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128672,"byte_end":128771,"line_start":6,"line_end":6,"column_start":1,"column_end":100}},{"value":"! to help you transition from raw memory data to Rust representation.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128772,"byte_end":128843,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128844,"byte_end":128847,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! ```no_run","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128848,"byte_end":128861,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"! use std::ptr;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128862,"byte_end":128879,"line_start":10,"line_end":10,"column_start":1,"column_end":18}},{"value":"! use std::slice;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128880,"byte_end":128899,"line_start":11,"line_end":11,"column_start":1,"column_end":20}},{"value":"! use image::Rgb;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128900,"byte_end":128919,"line_start":12,"line_end":12,"column_start":1,"column_end":20}},{"value":"! use image::flat::{FlatSamples, SampleLayout};","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128920,"byte_end":128969,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"! use image::imageops::thumbnail;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":128970,"byte_end":129005,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129006,"byte_end":129009,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! #[no_mangle]","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129010,"byte_end":129026,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"! pub extern \"C\" fn store_rgb8_compressed(","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129027,"byte_end":129071,"line_start":17,"line_end":17,"column_start":1,"column_end":45}},{"value":"!     data: *const u8, len: usize,","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129072,"byte_end":129108,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"!     layout: *const SampleLayout","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129109,"byte_end":129144,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"! )","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129145,"byte_end":129150,"line_start":20,"line_end":20,"column_start":1,"column_end":6}},{"value":"!     -> bool","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129151,"byte_end":129166,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"! {","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129167,"byte_end":129172,"line_start":22,"line_end":22,"column_start":1,"column_end":6}},{"value":"!     let samples = unsafe { slice::from_raw_parts(data, len) };","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129173,"byte_end":129239,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"!     let layout = unsafe { ptr::read(layout) };","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129240,"byte_end":129290,"line_start":24,"line_end":24,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129291,"byte_end":129294,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"!     let buffer = FlatSamples {","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129295,"byte_end":129329,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"!         samples,","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129330,"byte_end":129350,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"!         layout,","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129351,"byte_end":129370,"line_start":28,"line_end":28,"column_start":1,"column_end":20}},{"value":"!         color_hint: None,","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129371,"byte_end":129400,"line_start":29,"line_end":29,"column_start":1,"column_end":30}},{"value":"!     };","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129401,"byte_end":129411,"line_start":30,"line_end":30,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129412,"byte_end":129415,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"!     let view = match buffer.as_view::<Rgb<u8>>() {","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129416,"byte_end":129470,"line_start":32,"line_end":32,"column_start":1,"column_end":55}},{"value":"!         Err(_) => return false, // Invalid layout.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129471,"byte_end":129525,"line_start":33,"line_end":33,"column_start":1,"column_end":55}},{"value":"!         Ok(view) => view,","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129526,"byte_end":129555,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"!     };","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129556,"byte_end":129566,"line_start":35,"line_end":35,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129567,"byte_end":129570,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"!     thumbnail(&view, 64, 64)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129571,"byte_end":129603,"line_start":37,"line_end":37,"column_start":1,"column_end":33}},{"value":"!         .save(\"output.png\")","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129604,"byte_end":129635,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"!         .map(|_| true)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129636,"byte_end":129662,"line_start":39,"line_end":39,"column_start":1,"column_end":27}},{"value":"!         .unwrap_or_else(|_| false)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129663,"byte_end":129701,"line_start":40,"line_end":40,"column_start":1,"column_end":39}},{"value":"! }","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129702,"byte_end":129707,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129708,"byte_end":129715,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":129716,"byte_end":129719,"line_start":43,"line_end":43,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2511},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131710,"byte_end":131721,"line_start":81,"line_end":81,"column_start":12,"column_end":23},"name":"FlatSamples","qualname":"::flat::FlatSamples","value":"FlatSamples { samples, layout, color_hint }","parent":null,"children":[{"krate":0,"index":2513},{"krate":0,"index":2514},{"krate":0,"index":2515}],"decl_id":null,"docs":" A flat buffer over a (multi channel) image.","sig":null,"attributes":[{"value":"/ A flat buffer over a (multi channel) image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130127,"byte_end":130174,"line_start":56,"line_end":56,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130175,"byte_end":130178,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ In contrast to `ImageBuffer`, this representation of a sample collection is much more lenient","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130179,"byte_end":130276,"line_start":58,"line_end":58,"column_start":1,"column_end":98}},{"value":"/ in the layout thereof. It also allows grouping by color planes instead of by pixel as long as","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130277,"byte_end":130374,"line_start":59,"line_end":59,"column_start":1,"column_end":98}},{"value":"/ the strides of each extent are constant. This struct itself has no invariants on the strides","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130375,"byte_end":130471,"line_start":60,"line_end":60,"column_start":1,"column_end":97}},{"value":"/ but not every possible configuration can be interpreted as a [`GenericImageView`] or","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130472,"byte_end":130560,"line_start":61,"line_end":61,"column_start":1,"column_end":89}},{"value":"/ [`GenericImage`]. The methods [`as_view`] and [`as_view_mut`] construct the actual implementors","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130561,"byte_end":130660,"line_start":62,"line_end":62,"column_start":1,"column_end":100}},{"value":"/ of these traits and perform necessary checks. To manually perform this and other layout checks","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130661,"byte_end":130759,"line_start":63,"line_end":63,"column_start":1,"column_end":99}},{"value":"/ use [`is_normal`] or [`has_aliased_samples`].","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130760,"byte_end":130809,"line_start":64,"line_end":64,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130810,"byte_end":130813,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Instances can be constructed not only by hand. The buffer instances returned by library","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130814,"byte_end":130905,"line_start":66,"line_end":66,"column_start":1,"column_end":92}},{"value":"/ functions such as [`ImageBuffer::as_flat_samples`] guarantee that the conversion to a generic","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":130906,"byte_end":131003,"line_start":67,"line_end":67,"column_start":1,"column_end":98}},{"value":"/ image or generic view succeeds. A very different constructor is [`with_monocolor`]. It uses a","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131004,"byte_end":131101,"line_start":68,"line_end":68,"column_start":1,"column_end":98}},{"value":"/ single pixel as the backing storage for an arbitrarily sized read-only raster by mapping each","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131102,"byte_end":131199,"line_start":69,"line_end":69,"column_start":1,"column_end":98}},{"value":"/ pixel to the same samples by setting some strides to `0`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131200,"byte_end":131261,"line_start":70,"line_end":70,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131262,"byte_end":131265,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ [`GenericImage`]: ../trait.GenericImage.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131266,"byte_end":131314,"line_start":72,"line_end":72,"column_start":1,"column_end":49}},{"value":"/ [`GenericImageView`]: ../trait.GenericImageView.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131315,"byte_end":131371,"line_start":73,"line_end":73,"column_start":1,"column_end":57}},{"value":"/ [`ImageBuffer::as_flat_samples`]: ../struct.ImageBuffer.html#method.as_flat_samples","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131372,"byte_end":131459,"line_start":74,"line_end":74,"column_start":1,"column_end":88}},{"value":"/ [`is_normal`]: #method.is_normal","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131460,"byte_end":131496,"line_start":75,"line_end":75,"column_start":1,"column_end":37}},{"value":"/ [`has_aliased_samples`]: #method.has_aliased_samples","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131497,"byte_end":131553,"line_start":76,"line_end":76,"column_start":1,"column_end":57}},{"value":"/ [`as_view`]: #method.as_view","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131554,"byte_end":131586,"line_start":77,"line_end":77,"column_start":1,"column_end":33}},{"value":"/ [`as_view_mut`]: #method.as_view_mut","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131587,"byte_end":131627,"line_start":78,"line_end":78,"column_start":1,"column_end":41}},{"value":"/ [`with_monocolor`]: #method.with_monocolor","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131628,"byte_end":131674,"line_start":79,"line_end":79,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":2513},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131799,"byte_end":131806,"line_start":83,"line_end":83,"column_start":9,"column_end":16},"name":"samples","qualname":"::flat::FlatSamples::samples","value":"Buffer","parent":{"krate":0,"index":2511},"children":[],"decl_id":null,"docs":" Underlying linear container holding sample values.\n","sig":null,"attributes":[{"value":"/ Underlying linear container holding sample values.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131736,"byte_end":131790,"line_start":82,"line_end":82,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":2514},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131890,"byte_end":131896,"line_start":86,"line_end":86,"column_start":9,"column_end":15},"name":"layout","qualname":"::flat::FlatSamples::layout","value":"flat::SampleLayout","parent":{"krate":0,"index":2511},"children":[],"decl_id":null,"docs":" A `repr(C)` description of the layout of buffer samples.\n","sig":null,"attributes":[{"value":"/ A `repr(C)` description of the layout of buffer samples.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131821,"byte_end":131881,"line_start":85,"line_end":85,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":2515},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132351,"byte_end":132361,"line_start":94,"line_end":94,"column_start":9,"column_end":19},"name":"color_hint","qualname":"::flat::FlatSamples::color_hint","value":"std::option::Option<color::ColorType>","parent":{"krate":0,"index":2511},"children":[],"decl_id":null,"docs":" Supplementary color information.","sig":null,"attributes":[{"value":"/ Supplementary color information.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131917,"byte_end":131953,"line_start":88,"line_end":88,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131958,"byte_end":131961,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ You may keep this as `None` in most cases. This is NOT checked in `View` or other","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":131966,"byte_end":132051,"line_start":90,"line_end":90,"column_start":5,"column_end":90}},{"value":"/ converters. It is intended mainly as a way for types that convert to this buffer type to","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132056,"byte_end":132148,"line_start":91,"line_end":91,"column_start":5,"column_end":97}},{"value":"/ attach their otherwise static color information. A dynamic image representation could","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132153,"byte_end":132242,"line_start":92,"line_end":92,"column_start":5,"column_end":94}},{"value":"/ however use this to resolve representational ambiguities such as the order of RGB channels.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132247,"byte_end":132342,"line_start":93,"line_end":93,"column_start":5,"column_end":100}}]},{"kind":"Struct","id":{"krate":0,"index":2522},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132511,"byte_end":132523,"line_start":100,"line_end":100,"column_start":12,"column_end":24},"name":"SampleLayout","qualname":"::flat::SampleLayout","value":"SampleLayout { channels, channel_stride, width, width_stride, height, height_stride }","parent":null,"children":[{"krate":0,"index":2523},{"krate":0,"index":2524},{"krate":0,"index":2525},{"krate":0,"index":2526},{"krate":0,"index":2527},{"krate":0,"index":2528}],"decl_id":null,"docs":" A ffi compatible description of a sample buffer.\n","sig":null,"attributes":[{"value":"/ A ffi compatible description of a sample buffer.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132385,"byte_end":132437,"line_start":97,"line_end":97,"column_start":1,"column_end":53}},{"value":"repr(C)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132438,"byte_end":132448,"line_start":98,"line_end":98,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2523},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132607,"byte_end":132615,"line_start":102,"line_end":102,"column_start":9,"column_end":17},"name":"channels","qualname":"::flat::SampleLayout::channels","value":"u8","parent":{"krate":0,"index":2522},"children":[],"decl_id":null,"docs":" The number of channels in the color representation of the image.\n","sig":null,"attributes":[{"value":"/ The number of channels in the color representation of the image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132530,"byte_end":132598,"line_start":101,"line_end":101,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":2524},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132701,"byte_end":132715,"line_start":105,"line_end":105,"column_start":9,"column_end":23},"name":"channel_stride","qualname":"::flat::SampleLayout::channel_stride","value":"usize","parent":{"krate":0,"index":2522},"children":[],"decl_id":null,"docs":" Add this to an index to get to the sample in the next channel.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the sample in the next channel.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132626,"byte_end":132692,"line_start":104,"line_end":104,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2525},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132777,"byte_end":132782,"line_start":108,"line_end":108,"column_start":9,"column_end":14},"name":"width","qualname":"::flat::SampleLayout::width","value":"u32","parent":{"krate":0,"index":2522},"children":[],"decl_id":null,"docs":" The width of the represented image.\n","sig":null,"attributes":[{"value":"/ The width of the represented image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132729,"byte_end":132768,"line_start":107,"line_end":107,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2526},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132869,"byte_end":132881,"line_start":111,"line_end":111,"column_start":9,"column_end":21},"name":"width_stride","qualname":"::flat::SampleLayout::width_stride","value":"usize","parent":{"krate":0,"index":2522},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in x-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in x-direction.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132794,"byte_end":132860,"line_start":110,"line_end":110,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2527},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132944,"byte_end":132950,"line_start":114,"line_end":114,"column_start":9,"column_end":15},"name":"height","qualname":"::flat::SampleLayout::height","value":"u32","parent":{"krate":0,"index":2522},"children":[],"decl_id":null,"docs":" The height of the represented image.\n","sig":null,"attributes":[{"value":"/ The height of the represented image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132895,"byte_end":132935,"line_start":113,"line_end":113,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2528},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133037,"byte_end":133050,"line_start":117,"line_end":117,"column_start":9,"column_end":22},"name":"height_stride","qualname":"::flat::SampleLayout::height_stride","value":"usize","parent":{"krate":0,"index":2522},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in y-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in y-direction.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":132962,"byte_end":133028,"line_start":116,"line_end":116,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134025,"byte_end":134041,"line_start":141,"line_end":141,"column_start":12,"column_end":28},"name":"row_major_packed","qualname":"<SampleLayout>::row_major_packed","value":"pub fn row_major_packed(u8, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a row-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a row-major image packed in all directions.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133231,"byte_end":133287,"line_start":125,"line_end":125,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133292,"byte_end":133295,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::RowMajorPacked`. It can therefore be converted to","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133300,"byte_end":133395,"line_start":127,"line_end":127,"column_start":5,"column_end":100}},{"value":"/ safely to an `ImageBuffer` with a large enough underlying buffer.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133400,"byte_end":133469,"line_start":128,"line_end":128,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133474,"byte_end":133477,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133482,"byte_end":133489,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133494,"byte_end":133544,"line_start":131,"line_end":131,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::row_major_packed(3, 640, 480);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133549,"byte_end":133610,"line_start":132,"line_end":132,"column_start":5,"column_end":66}},{"value":"/ assert!(layout.is_normal(NormalForm::RowMajorPacked));","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133615,"byte_end":133673,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133678,"byte_end":133685,"line_start":134,"line_end":134,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133690,"byte_end":133693,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133698,"byte_end":133710,"line_start":136,"line_end":136,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133715,"byte_end":133718,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133723,"byte_end":133818,"line_start":138,"line_end":138,"column_start":5,"column_end":100}},{"value":"/ in the `height` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133823,"byte_end":133914,"line_start":139,"line_end":139,"column_start":5,"column_end":96}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133919,"byte_end":134013,"line_start":140,"line_end":140,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":135292,"byte_end":135311,"line_start":170,"line_end":170,"column_start":12,"column_end":31},"name":"column_major_packed","qualname":"<SampleLayout>::column_major_packed","value":"pub fn column_major_packed(u8, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a column-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a column-major image packed in all directions.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134479,"byte_end":134538,"line_start":154,"line_end":154,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134543,"byte_end":134546,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::ColumnMajorPacked`. This is not particularly","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134551,"byte_end":134641,"line_start":156,"line_end":156,"column_start":5,"column_end":95}},{"value":"/ useful for conversion but can be used to describe such a buffer without pitfalls.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134646,"byte_end":134731,"line_start":157,"line_end":157,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134736,"byte_end":134739,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134744,"byte_end":134751,"line_start":159,"line_end":159,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134756,"byte_end":134806,"line_start":160,"line_end":160,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::column_major_packed(3, 640, 480);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134811,"byte_end":134875,"line_start":161,"line_end":161,"column_start":5,"column_end":69}},{"value":"/ assert!(layout.is_normal(NormalForm::ColumnMajorPacked));","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134880,"byte_end":134941,"line_start":162,"line_end":162,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134946,"byte_end":134953,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134958,"byte_end":134961,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134966,"byte_end":134978,"line_start":165,"line_end":165,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134983,"byte_end":134986,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":134991,"byte_end":135086,"line_start":167,"line_end":167,"column_start":5,"column_end":100}},{"value":"/ in the `width` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":135091,"byte_end":135181,"line_start":168,"line_end":168,"column_start":5,"column_end":95}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":135186,"byte_end":135280,"line_start":169,"line_end":169,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":135927,"byte_end":135938,"line_start":187,"line_end":187,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<SampleLayout>::strides_cwh","value":"pub fn strides_cwh(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":135752,"byte_end":135811,"line_start":183,"line_end":183,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":135816,"byte_end":135819,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":135824,"byte_end":135895,"line_start":185,"line_end":185,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":135900,"byte_end":135915,"line_start":186,"line_end":186,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136255,"byte_end":136262,"line_start":195,"line_end":195,"column_start":12,"column_end":19},"name":"extents","qualname":"<SampleLayout>::extents","value":"pub fn extents(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136053,"byte_end":136104,"line_start":191,"line_end":191,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136109,"byte_end":136112,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136117,"byte_end":136210,"line_start":193,"line_end":193,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136215,"byte_end":136243,"line_start":194,"line_end":194,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136636,"byte_end":136642,"line_start":203,"line_end":203,"column_start":12,"column_end":18},"name":"bounds","qualname":"<SampleLayout>::bounds","value":"pub fn bounds(&Self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136384,"byte_end":136438,"line_start":199,"line_end":199,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136443,"byte_end":136446,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136451,"byte_end":136541,"line_start":201,"line_end":201,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136546,"byte_end":136624,"line_start":202,"line_end":202,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138795,"byte_end":138805,"line_start":258,"line_end":258,"column_start":12,"column_end":22},"name":"min_length","qualname":"<SampleLayout>::min_length","value":"pub fn min_length(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136730,"byte_end":136820,"line_start":207,"line_end":207,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136825,"byte_end":136828,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136833,"byte_end":136928,"line_start":209,"line_end":209,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":136933,"byte_end":137023,"line_start":210,"line_end":210,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137028,"byte_end":137119,"line_start":211,"line_end":211,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137124,"byte_end":137181,"line_start":212,"line_end":212,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137186,"byte_end":137189,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137194,"byte_end":137211,"line_start":214,"line_end":214,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137216,"byte_end":137219,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137224,"byte_end":137308,"line_start":216,"line_end":216,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137313,"byte_end":137404,"line_start":217,"line_end":217,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137409,"byte_end":137412,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137417,"byte_end":137442,"line_start":219,"line_end":219,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137447,"byte_end":137450,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137455,"byte_end":137509,"line_start":221,"line_end":221,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137514,"byte_end":137538,"line_start":222,"line_end":222,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137543,"byte_end":137560,"line_start":223,"line_end":223,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137565,"byte_end":137590,"line_start":224,"line_end":224,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137595,"byte_end":137613,"line_start":225,"line_end":225,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137618,"byte_end":137621,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137626,"byte_end":137637,"line_start":227,"line_end":227,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137642,"byte_end":137665,"line_start":228,"line_end":228,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137670,"byte_end":137689,"line_start":229,"line_end":229,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137694,"byte_end":137736,"line_start":230,"line_end":230,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137741,"byte_end":137748,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137753,"byte_end":137756,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137761,"byte_end":137853,"line_start":233,"line_end":233,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137858,"byte_end":137948,"line_start":234,"line_end":234,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137953,"byte_end":137956,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137961,"byte_end":137989,"line_start":236,"line_end":236,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":137994,"byte_end":137997,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138002,"byte_end":138094,"line_start":238,"line_end":238,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138099,"byte_end":138193,"line_start":239,"line_end":239,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138198,"byte_end":138253,"line_start":240,"line_end":240,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138258,"byte_end":138261,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138266,"byte_end":138290,"line_start":242,"line_end":242,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138295,"byte_end":138312,"line_start":243,"line_end":243,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138317,"byte_end":138342,"line_start":244,"line_end":244,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138347,"byte_end":138365,"line_start":245,"line_end":245,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138370,"byte_end":138373,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138378,"byte_end":138389,"line_start":247,"line_end":247,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138394,"byte_end":138410,"line_start":248,"line_end":248,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138415,"byte_end":138434,"line_start":249,"line_end":249,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138439,"byte_end":138462,"line_start":250,"line_end":250,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138467,"byte_end":138496,"line_start":251,"line_end":251,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138501,"byte_end":138536,"line_start":252,"line_end":252,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138541,"byte_end":138548,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138553,"byte_end":138556,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138561,"byte_end":138655,"line_start":255,"line_end":255,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138660,"byte_end":138753,"line_start":256,"line_end":256,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":138758,"byte_end":138783,"line_start":257,"line_end":257,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":139137,"byte_end":139141,"line_start":268,"line_end":268,"column_start":12,"column_end":16},"name":"fits","qualname":"<SampleLayout>::fits","value":"pub fn fits(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":139071,"byte_end":139125,"line_start":267,"line_end":267,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":140251,"byte_end":140270,"line_start":293,"line_end":293,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<SampleLayout>::has_aliased_samples","value":"pub fn has_aliased_samples(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":139901,"byte_end":139950,"line_start":288,"line_end":288,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":139955,"byte_end":139958,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":139963,"byte_end":140056,"line_start":290,"line_end":290,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":140061,"byte_end":140155,"line_start":291,"line_end":291,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":140160,"byte_end":140239,"line_start":292,"line_end":292,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":141515,"byte_end":141524,"line_start":323,"line_end":323,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<SampleLayout>::is_normal","value":"pub fn is_normal(&Self, NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":141005,"byte_end":141070,"line_start":316,"line_end":316,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":141075,"byte_end":141078,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":141083,"byte_end":141176,"line_start":318,"line_end":318,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":141181,"byte_end":141276,"line_start":319,"line_end":319,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":141281,"byte_end":141373,"line_start":320,"line_end":320,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":141378,"byte_end":141472,"line_start":321,"line_end":321,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":141477,"byte_end":141503,"line_start":322,"line_end":322,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143222,"byte_end":143231,"line_start":378,"line_end":378,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<SampleLayout>::in_bounds","value":"pub fn in_bounds(&Self, u8, u32, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":142880,"byte_end":142941,"line_start":373,"line_end":373,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":142946,"byte_end":142949,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":142954,"byte_end":143043,"line_start":375,"line_end":375,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143048,"byte_end":143142,"line_start":376,"line_end":376,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143147,"byte_end":143210,"line_start":377,"line_end":377,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143505,"byte_end":143510,"line_start":385,"line_end":385,"column_start":12,"column_end":17},"name":"index","qualname":"<SampleLayout>::index","value":"pub fn index(&Self, u8, u32, u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143358,"byte_end":143403,"line_start":382,"line_end":382,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143408,"byte_end":143411,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143416,"byte_end":143493,"line_start":384,"line_end":384,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":144104,"byte_end":144125,"line_start":398,"line_end":398,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<SampleLayout>::index_ignoring_bounds","value":"pub fn index_ignoring_bounds(&Self, usize, usize, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (channel, x, y).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (channel, x, y).","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143733,"byte_end":143792,"line_start":393,"line_end":393,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143797,"byte_end":143800,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143805,"byte_end":143894,"line_start":395,"line_end":395,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143899,"byte_end":143993,"line_start":396,"line_end":396,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":143998,"byte_end":144092,"line_start":397,"line_end":397,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":145056,"byte_end":145071,"line_start":419,"line_end":419,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<SampleLayout>::in_bounds_index","value":"pub fn in_bounds_index(&Self, u8, u32, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":144755,"byte_end":144795,"line_start":414,"line_end":414,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":144800,"byte_end":144803,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":144808,"byte_end":144900,"line_start":416,"line_end":416,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":144905,"byte_end":145000,"line_start":417,"line_end":417,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":145005,"byte_end":145044,"line_start":418,"line_end":418,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":145599,"byte_end":145608,"line_start":430,"line_end":430,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<SampleLayout>::shrink_to","value":"pub fn shrink_to(&mut Self, u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":145274,"byte_end":145339,"line_start":425,"line_end":425,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":145344,"byte_end":145347,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":145352,"byte_end":145440,"line_start":427,"line_end":427,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":145445,"byte_end":145540,"line_start":428,"line_end":428,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":145545,"byte_end":145587,"line_start":429,"line_end":429,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146281,"byte_end":146292,"line_start":457,"line_end":457,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<FlatSamples<Buffer>>::strides_cwh","value":"pub fn strides_cwh(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146106,"byte_end":146165,"line_start":453,"line_end":453,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146170,"byte_end":146173,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146178,"byte_end":146249,"line_start":455,"line_end":455,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146254,"byte_end":146269,"line_start":456,"line_end":456,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146574,"byte_end":146581,"line_start":465,"line_end":465,"column_start":12,"column_end":19},"name":"extents","qualname":"<FlatSamples<Buffer>>::extents","value":"pub fn extents(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146372,"byte_end":146423,"line_start":461,"line_end":461,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146428,"byte_end":146431,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146436,"byte_end":146529,"line_start":463,"line_end":463,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146534,"byte_end":146562,"line_start":464,"line_end":464,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146909,"byte_end":146915,"line_start":473,"line_end":473,"column_start":12,"column_end":18},"name":"bounds","qualname":"<FlatSamples<Buffer>>::bounds","value":"pub fn bounds(&Self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146657,"byte_end":146711,"line_start":469,"line_end":469,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146716,"byte_end":146719,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146724,"byte_end":146814,"line_start":471,"line_end":471,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146819,"byte_end":146897,"line_start":472,"line_end":472,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":147029,"byte_end":147035,"line_start":478,"line_end":478,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<FlatSamples<Buffer>>::as_ref","value":"pub fn as_ref<T>(&Self) -> FlatSamples<&[T]> where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference based version.\n","sig":null,"attributes":[{"value":"/ Get a reference based version.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146983,"byte_end":147017,"line_start":477,"line_end":477,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":147309,"byte_end":147315,"line_start":487,"line_end":487,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<FlatSamples<Buffer>>::as_mut","value":"pub fn as_mut<T>(&mut Self) -> FlatSamples<&mut [T]> where Buffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference based version.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference based version.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":147255,"byte_end":147297,"line_start":486,"line_end":486,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":147594,"byte_end":147600,"line_start":496,"line_end":496,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<FlatSamples<Buffer>>::to_vec","value":"pub fn to_vec<T>(&Self) -> FlatSamples<Vec<T>> where T: Clone,\nBuffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Copy the data into an owned vector.\n","sig":null,"attributes":[{"value":"/ Copy the data into an owned vector.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":147543,"byte_end":147582,"line_start":495,"line_end":495,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148873,"byte_end":148883,"line_start":527,"line_end":527,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<FlatSamples<Buffer>>::get_sample","value":"pub fn get_sample<T>(&Self, u8, u32, u32) -> Option<&T> where\nBuffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a reference to a single sample.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":147853,"byte_end":147892,"line_start":506,"line_end":506,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":147897,"byte_end":147900,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::Index` but guarantees to properly","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":147905,"byte_end":148000,"line_start":508,"line_end":508,"column_start":5,"column_end":100}},{"value":"/ check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148005,"byte_end":148083,"line_start":509,"line_end":509,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148088,"byte_end":148091,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148096,"byte_end":148103,"line_start":511,"line_end":511,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148108,"byte_end":148136,"line_start":512,"line_end":512,"column_start":5,"column_end":33}},{"value":"/ let flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148141,"byte_end":148200,"line_start":513,"line_end":513,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148205,"byte_end":148208,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ // Get the blue channel at (10, 10).","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148213,"byte_end":148253,"line_start":515,"line_end":515,"column_start":5,"column_end":45}},{"value":"/ assert!(flat.get_sample(1, 10, 10).is_some());","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148258,"byte_end":148308,"line_start":516,"line_end":516,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148313,"byte_end":148316,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148321,"byte_end":148354,"line_start":518,"line_end":518,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_sample(3, 10, 10).is_none());","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148359,"byte_end":148409,"line_start":519,"line_end":519,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148414,"byte_end":148421,"line_start":520,"line_end":520,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148426,"byte_end":148429,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148434,"byte_end":148524,"line_start":522,"line_end":522,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148529,"byte_end":148610,"line_start":523,"line_end":523,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148615,"byte_end":148710,"line_start":524,"line_end":524,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148715,"byte_end":148802,"line_start":525,"line_end":525,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":148807,"byte_end":148861,"line_start":526,"line_end":526,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150480,"byte_end":150494,"line_start":560,"line_end":560,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<FlatSamples<Buffer>>::get_mut_sample","value":"pub fn get_mut_sample<T>(&mut Self, u8, u32, u32) -> Option<&mut T> where\nBuffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a single sample.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149070,"byte_end":149117,"line_start":534,"line_end":534,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149122,"byte_end":149125,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::IndexMut` but guarantees to","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149130,"byte_end":149219,"line_start":536,"line_end":536,"column_start":5,"column_end":94}},{"value":"/ properly check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149224,"byte_end":149311,"line_start":537,"line_end":537,"column_start":5,"column_end":92}},{"value":"/ Contrary to conversion to `ViewMut`, this does not require that samples are packed since it","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149316,"byte_end":149411,"line_start":538,"line_end":538,"column_start":5,"column_end":100}},{"value":"/ does not need to convert samples to a color representation.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149416,"byte_end":149479,"line_start":539,"line_end":539,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149484,"byte_end":149487,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149492,"byte_end":149586,"line_start":541,"line_end":541,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149591,"byte_end":149660,"line_start":542,"line_end":542,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149665,"byte_end":149668,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149673,"byte_end":149680,"line_start":544,"line_end":544,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149685,"byte_end":149713,"line_start":545,"line_end":545,"column_start":5,"column_end":33}},{"value":"/ let mut flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149718,"byte_end":149781,"line_start":546,"line_end":546,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149786,"byte_end":149789,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ // Assign some new color to the blue channel at (10, 10).","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149794,"byte_end":149855,"line_start":548,"line_end":548,"column_start":5,"column_end":66}},{"value":"/ *flat.get_mut_sample(1, 10, 10).unwrap() = 255;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149860,"byte_end":149911,"line_start":549,"line_end":549,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149916,"byte_end":149919,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149924,"byte_end":149957,"line_start":551,"line_end":551,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_mut_sample(3, 10, 10).is_none());","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":149962,"byte_end":150016,"line_start":552,"line_end":552,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150021,"byte_end":150028,"line_start":553,"line_end":553,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150033,"byte_end":150036,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150041,"byte_end":150131,"line_start":555,"line_end":555,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150136,"byte_end":150217,"line_start":556,"line_end":556,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150222,"byte_end":150317,"line_start":557,"line_end":557,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150322,"byte_end":150409,"line_start":558,"line_end":558,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150414,"byte_end":150468,"line_start":559,"line_end":559,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":151158,"byte_end":151165,"line_start":575,"line_end":575,"column_start":12,"column_end":19},"name":"as_view","qualname":"<FlatSamples<Buffer>>::as_view","value":"pub fn as_view<P>(&Self) -> Result<View<&[P::Subpixel], P>, Error> where\nP: Pixel, Buffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer as an image over some type of pixel.","sig":null,"attributes":[{"value":"/ View this buffer as an image over some type of pixel.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150746,"byte_end":150803,"line_start":569,"line_end":569,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150808,"byte_end":150811,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150816,"byte_end":150906,"line_start":571,"line_end":571,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":150911,"byte_end":151005,"line_start":572,"line_end":572,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":151010,"byte_end":151104,"line_start":573,"line_end":573,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":151109,"byte_end":151146,"line_start":574,"line_end":574,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152742,"byte_end":152766,"line_start":612,"line_end":612,"column_start":12,"column_end":36},"name":"as_view_with_mut_samples","qualname":"<FlatSamples<Buffer>>::as_view_with_mut_samples","value":"pub fn as_view_with_mut_samples<P>(&mut Self)\n-> Result<View<&mut [P::Subpixel], P>, Error> where P: Pixel,\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer but keep mutability at a sample level.","sig":null,"attributes":[{"value":"/ View this buffer but keep mutability at a sample level.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":151777,"byte_end":151836,"line_start":597,"line_end":597,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":151841,"byte_end":151844,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ This is similar to `as_view` but subtly different from `as_view_mut`. The resulting type","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":151849,"byte_end":151941,"line_start":599,"line_end":599,"column_start":5,"column_end":97}},{"value":"/ can be used as a `GenericImage` with the same prior invariants needed as for `as_view`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":151946,"byte_end":152037,"line_start":600,"line_end":600,"column_start":5,"column_end":96}},{"value":"/ It can not be used as a mutable `GenericImage` but does not need channels to be packed in","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152042,"byte_end":152135,"line_start":601,"line_end":601,"column_start":5,"column_end":98}},{"value":"/ their pixel representation.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152140,"byte_end":152171,"line_start":602,"line_end":602,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152176,"byte_end":152179,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152184,"byte_end":152274,"line_start":604,"line_end":604,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152279,"byte_end":152373,"line_start":605,"line_end":605,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152378,"byte_end":152472,"line_start":606,"line_end":606,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152477,"byte_end":152514,"line_start":607,"line_end":607,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152519,"byte_end":152522,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152527,"byte_end":152621,"line_start":609,"line_end":609,"column_start":5,"column_end":99}},{"value":"/ for one sample can in fact modify other samples as well. Sometimes exactly this is","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152626,"byte_end":152712,"line_start":610,"line_end":610,"column_start":5,"column_end":91}},{"value":"/ intended.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":152717,"byte_end":152730,"line_start":611,"line_end":611,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":154129,"byte_end":154140,"line_start":645,"line_end":645,"column_start":12,"column_end":23},"name":"as_view_mut","qualname":"<FlatSamples<Buffer>>::as_view_mut","value":"pub fn as_view_mut<P>(&mut Self)\n-> Result<ViewMut<&mut [P::Subpixel], P>, Error> where P: Pixel,\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Interpret this buffer as a mutable image.","sig":null,"attributes":[{"value":"/ Interpret this buffer as a mutable image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":153386,"byte_end":153431,"line_start":634,"line_end":634,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":153436,"byte_end":153439,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ To succeed, the pixels in this buffer may not alias each other and the samples of each","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":153444,"byte_end":153534,"line_start":636,"line_end":636,"column_start":5,"column_end":95}},{"value":"/ pixel must be packed (i.e. `channel_stride` is `1`). The number of channels must be","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":153539,"byte_end":153626,"line_start":637,"line_end":637,"column_start":5,"column_end":92}},{"value":"/ consistent with the channel count expected by the pixel format.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":153631,"byte_end":153698,"line_start":638,"line_end":638,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":153703,"byte_end":153706,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ This is similar to an `ImageBuffer` except it is a temporary view that is not normalized as","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":153711,"byte_end":153806,"line_start":640,"line_end":640,"column_start":5,"column_end":100}},{"value":"/ strongly. To get an owning version, consider copying the data into an `ImageBuffer`. This","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":153811,"byte_end":153904,"line_start":641,"line_end":641,"column_start":5,"column_end":98}},{"value":"/ provides many more operations, is possibly faster (if not you may want to open an issue) is","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":153909,"byte_end":154004,"line_start":642,"line_end":642,"column_start":5,"column_end":100}},{"value":"/ generally polished. You can also try to convert this buffer inline, see","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":154009,"byte_end":154084,"line_start":643,"line_end":643,"column_start":5,"column_end":80}},{"value":"/ `ImageBuffer::from_raw`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":154089,"byte_end":154117,"line_start":644,"line_end":644,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155137,"byte_end":155145,"line_start":675,"line_end":675,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<FlatSamples<Buffer>>::as_slice","value":"pub fn as_slice<T>(&Self) -> &[T] where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":154913,"byte_end":154945,"line_start":671,"line_end":671,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":154950,"byte_end":154953,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":154958,"byte_end":155050,"line_start":673,"line_end":673,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155055,"byte_end":155125,"line_start":674,"line_end":674,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155456,"byte_end":155468,"line_start":683,"line_end":683,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<FlatSamples<Buffer>>::as_mut_slice","value":"pub fn as_mut_slice<T>(&mut Self) -> &mut [T] where Buffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155232,"byte_end":155264,"line_start":679,"line_end":679,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155269,"byte_end":155272,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155277,"byte_end":155369,"line_start":681,"line_end":681,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155374,"byte_end":155444,"line_start":682,"line_end":682,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155899,"byte_end":155910,"line_start":692,"line_end":692,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<FlatSamples<Buffer>>::image_slice","value":"pub fn image_slice<T>(&Self) -> Option<&[T]> where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155563,"byte_end":155625,"line_start":687,"line_end":687,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155630,"byte_end":155633,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ This may fail when the coordinates in this image are either out-of-bounds of the underlying","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155638,"byte_end":155733,"line_start":689,"line_end":689,"column_start":5,"column_end":100}},{"value":"/ buffer or can not be represented. Note that the slice may have holes that do not correspond","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155738,"byte_end":155833,"line_start":690,"line_end":690,"column_start":5,"column_end":100}},{"value":"/ to any sample in the image represented by it.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":155838,"byte_end":155887,"line_start":691,"line_end":691,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":156327,"byte_end":156342,"line_start":707,"line_end":707,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<FlatSamples<Buffer>>::image_mut_slice","value":"pub fn image_mut_slice<T>(&mut Self) -> Option<&mut [T]> where\nBuffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Mutable portion of the buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Mutable portion of the buffer that holds sample values.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":156256,"byte_end":156315,"line_start":706,"line_end":706,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":156996,"byte_end":157011,"line_start":726,"line_end":726,"column_start":12,"column_end":27},"name":"try_into_buffer","qualname":"<FlatSamples<Buffer>>::try_into_buffer","value":"pub fn try_into_buffer<P>(Self)\n-> Result<ImageBuffer<P, Buffer>, (Error, Self)> where P: Pixel + 'static,\nP::Subpixel: 'static, Buffer: Deref<Target = [P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Move the data into an image buffer.","sig":null,"attributes":[{"value":"/ Move the data into an image buffer.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":156700,"byte_end":156739,"line_start":721,"line_end":721,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":156744,"byte_end":156747,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ This does **not** convert the sample layout. The buffer needs to be in packed row-major form","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":156752,"byte_end":156848,"line_start":723,"line_end":723,"column_start":5,"column_end":101}},{"value":"/ before calling this function. In case of an error, returns the buffer again so that it does","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":156853,"byte_end":156948,"line_start":724,"line_end":724,"column_start":5,"column_end":100}},{"value":"/ not release any allocation.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":156953,"byte_end":156984,"line_start":725,"line_end":725,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159847,"byte_end":159857,"line_start":800,"line_end":800,"column_start":12,"column_end":22},"name":"min_length","qualname":"<FlatSamples<Buffer>>::min_length","value":"pub fn min_length(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":157782,"byte_end":157872,"line_start":749,"line_end":749,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":157877,"byte_end":157880,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":157885,"byte_end":157980,"line_start":751,"line_end":751,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":157985,"byte_end":158075,"line_start":752,"line_end":752,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158080,"byte_end":158171,"line_start":753,"line_end":753,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158176,"byte_end":158233,"line_start":754,"line_end":754,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158238,"byte_end":158241,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158246,"byte_end":158263,"line_start":756,"line_end":756,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158268,"byte_end":158271,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158276,"byte_end":158360,"line_start":758,"line_end":758,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158365,"byte_end":158456,"line_start":759,"line_end":759,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158461,"byte_end":158464,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158469,"byte_end":158494,"line_start":761,"line_end":761,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158499,"byte_end":158502,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158507,"byte_end":158561,"line_start":763,"line_end":763,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158566,"byte_end":158590,"line_start":764,"line_end":764,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158595,"byte_end":158612,"line_start":765,"line_end":765,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158617,"byte_end":158642,"line_start":766,"line_end":766,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158647,"byte_end":158665,"line_start":767,"line_end":767,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158670,"byte_end":158673,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158678,"byte_end":158689,"line_start":769,"line_end":769,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158694,"byte_end":158717,"line_start":770,"line_end":770,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158722,"byte_end":158741,"line_start":771,"line_end":771,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158746,"byte_end":158788,"line_start":772,"line_end":772,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158793,"byte_end":158800,"line_start":773,"line_end":773,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158805,"byte_end":158808,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158813,"byte_end":158905,"line_start":775,"line_end":775,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":158910,"byte_end":159000,"line_start":776,"line_end":776,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159005,"byte_end":159008,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159013,"byte_end":159041,"line_start":778,"line_end":778,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159046,"byte_end":159049,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159054,"byte_end":159146,"line_start":780,"line_end":780,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159151,"byte_end":159245,"line_start":781,"line_end":781,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159250,"byte_end":159305,"line_start":782,"line_end":782,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159310,"byte_end":159313,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159318,"byte_end":159342,"line_start":784,"line_end":784,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159347,"byte_end":159364,"line_start":785,"line_end":785,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159369,"byte_end":159394,"line_start":786,"line_end":786,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159399,"byte_end":159417,"line_start":787,"line_end":787,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159422,"byte_end":159425,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159430,"byte_end":159441,"line_start":789,"line_end":789,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159446,"byte_end":159462,"line_start":790,"line_end":790,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159467,"byte_end":159486,"line_start":791,"line_end":791,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159491,"byte_end":159514,"line_start":792,"line_end":792,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159519,"byte_end":159548,"line_start":793,"line_end":793,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159553,"byte_end":159588,"line_start":794,"line_end":794,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159593,"byte_end":159600,"line_start":795,"line_end":795,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159605,"byte_end":159608,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159613,"byte_end":159707,"line_start":797,"line_end":797,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159712,"byte_end":159805,"line_start":798,"line_end":798,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159810,"byte_end":159835,"line_start":799,"line_end":799,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159994,"byte_end":159998,"line_start":805,"line_end":805,"column_start":12,"column_end":16},"name":"fits","qualname":"<FlatSamples<Buffer>>::fits","value":"pub fn fits(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":159928,"byte_end":159982,"line_start":804,"line_end":804,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160419,"byte_end":160438,"line_start":814,"line_end":814,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<FlatSamples<Buffer>>::has_aliased_samples","value":"pub fn has_aliased_samples(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160069,"byte_end":160118,"line_start":809,"line_end":809,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160123,"byte_end":160126,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160131,"byte_end":160224,"line_start":811,"line_end":811,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160229,"byte_end":160323,"line_start":812,"line_end":812,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160328,"byte_end":160407,"line_start":813,"line_end":813,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161019,"byte_end":161028,"line_start":825,"line_end":825,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<FlatSamples<Buffer>>::is_normal","value":"pub fn is_normal(&Self, NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160509,"byte_end":160574,"line_start":818,"line_end":818,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160579,"byte_end":160582,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160587,"byte_end":160680,"line_start":820,"line_end":820,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160685,"byte_end":160780,"line_start":821,"line_end":821,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160785,"byte_end":160877,"line_start":822,"line_end":822,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160882,"byte_end":160976,"line_start":823,"line_end":823,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":160981,"byte_end":161007,"line_start":824,"line_end":824,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161453,"byte_end":161462,"line_start":834,"line_end":834,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<FlatSamples<Buffer>>::in_bounds","value":"pub fn in_bounds(&Self, u8, u32, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161111,"byte_end":161172,"line_start":829,"line_end":829,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161177,"byte_end":161180,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161185,"byte_end":161274,"line_start":831,"line_end":831,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161279,"byte_end":161373,"line_start":832,"line_end":832,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161378,"byte_end":161441,"line_start":833,"line_end":833,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161712,"byte_end":161717,"line_start":841,"line_end":841,"column_start":12,"column_end":17},"name":"index","qualname":"<FlatSamples<Buffer>>::index","value":"pub fn index(&Self, u8, u32, u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161565,"byte_end":161610,"line_start":838,"line_end":838,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161615,"byte_end":161618,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161623,"byte_end":161700,"line_start":840,"line_end":840,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162196,"byte_end":162217,"line_start":850,"line_end":850,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<FlatSamples<Buffer>>::index_ignoring_bounds","value":"pub fn index_ignoring_bounds(&Self, usize, usize, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (x, y, channel).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (x, y, channel).","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161825,"byte_end":161884,"line_start":845,"line_end":845,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161889,"byte_end":161892,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161897,"byte_end":161986,"line_start":847,"line_end":847,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":161991,"byte_end":162085,"line_start":848,"line_end":848,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162090,"byte_end":162184,"line_start":849,"line_end":849,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162649,"byte_end":162664,"line_start":859,"line_end":859,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<FlatSamples<Buffer>>::in_bounds_index","value":"pub fn in_bounds_index(&Self, u8, u32, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162348,"byte_end":162388,"line_start":854,"line_end":854,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162393,"byte_end":162396,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162401,"byte_end":162493,"line_start":856,"line_end":856,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162498,"byte_end":162593,"line_start":857,"line_end":857,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162598,"byte_end":162637,"line_start":858,"line_end":858,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163099,"byte_end":163108,"line_start":868,"line_end":868,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<FlatSamples<Buffer>>::shrink_to","value":"pub fn shrink_to(&mut Self, u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162774,"byte_end":162839,"line_start":863,"line_end":863,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162844,"byte_end":162847,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162852,"byte_end":162940,"line_start":865,"line_end":865,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":162945,"byte_end":163040,"line_start":866,"line_end":866,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163045,"byte_end":163087,"line_start":867,"line_end":867,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163994,"byte_end":164008,"line_start":894,"line_end":894,"column_start":12,"column_end":26},"name":"with_monocolor","qualname":"<FlatSamples<&'buf [Subpixel]>>::with_monocolor","value":"pub fn with_monocolor<P>(&'buf P, u32, u32) -> Self where P: Pixel<Subpixel =\nSubpixel>, Subpixel: Primitive","parent":null,"children":[],"decl_id":null,"docs":" Create a monocolor image from a single pixel.","sig":null,"attributes":[{"value":"/ Create a monocolor image from a single pixel.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163282,"byte_end":163331,"line_start":874,"line_end":874,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163336,"byte_end":163339,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ This can be used as a very cheap source of a `GenericImageView` with an arbitrary number of","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163344,"byte_end":163439,"line_start":876,"line_end":876,"column_start":5,"column_end":100}},{"value":"/ pixels of a single color, without any dynamic allocation.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163444,"byte_end":163505,"line_start":877,"line_end":877,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163510,"byte_end":163513,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ ## Examples","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163518,"byte_end":163533,"line_start":879,"line_end":879,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163538,"byte_end":163541,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163546,"byte_end":163553,"line_start":881,"line_end":881,"column_start":5,"column_end":12}},{"value":"/ # fn paint_something<T>(_: T) {}","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163558,"byte_end":163594,"line_start":882,"line_end":882,"column_start":5,"column_end":41}},{"value":"/ use image::{flat::FlatSamples, GenericImage, RgbImage, Rgb};","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163599,"byte_end":163663,"line_start":883,"line_end":883,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163668,"byte_end":163671,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ let background = Rgb([20, 20, 20]);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163676,"byte_end":163715,"line_start":885,"line_end":885,"column_start":5,"column_end":44}},{"value":"/ let bg = FlatSamples::with_monocolor(&background, 200, 200);;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163720,"byte_end":163785,"line_start":886,"line_end":886,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163790,"byte_end":163793,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ let mut image = RgbImage::new(200, 200);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163798,"byte_end":163842,"line_start":888,"line_end":888,"column_start":5,"column_end":49}},{"value":"/ paint_something(&mut image);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163847,"byte_end":163879,"line_start":889,"line_end":889,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163884,"byte_end":163887,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ // Reset the canvas","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163892,"byte_end":163915,"line_start":891,"line_end":891,"column_start":5,"column_end":28}},{"value":"/ image.copy_from(&bg.as_view().unwrap(), 0, 0);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163920,"byte_end":163970,"line_start":892,"line_end":892,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163975,"byte_end":163982,"line_start":893,"line_end":893,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2572},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165213,"byte_end":165217,"line_start":929,"line_end":929,"column_start":12,"column_end":16},"name":"View","qualname":"::flat::View","value":"View {  }","parent":null,"children":[{"krate":0,"index":2575},{"krate":0,"index":2576}],"decl_id":null,"docs":" A flat buffer that can be used as an image view.","sig":null,"attributes":[{"value":"/ A flat buffer that can be used as an image view.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":164511,"byte_end":164563,"line_start":914,"line_end":914,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":164564,"byte_end":164567,"line_start":915,"line_end":915,"column_start":1,"column_end":4}},{"value":"/ This is a nearly trivial wrapper around a buffer but at least sanitizes by checking the buffer","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":164568,"byte_end":164666,"line_start":916,"line_end":916,"column_start":1,"column_end":99}},{"value":"/ length first and constraining the pixel type.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":164667,"byte_end":164716,"line_start":917,"line_end":917,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":164717,"byte_end":164720,"line_start":918,"line_end":918,"column_start":1,"column_end":4}},{"value":"/ Note that this does not eliminate panics as the `AsRef<[T]>` implementation of `Buffer` may be","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":164721,"byte_end":164819,"line_start":919,"line_end":919,"column_start":1,"column_end":99}},{"value":"/ unreliable, i.e. return different buffers at different times. This of course is a non-issue for","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":164820,"byte_end":164919,"line_start":920,"line_end":920,"column_start":1,"column_end":100}},{"value":"/ all common collections where the bounds check once must be enough.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":164920,"byte_end":164990,"line_start":921,"line_end":921,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":164991,"byte_end":164994,"line_start":922,"line_end":922,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":164995,"byte_end":165017,"line_start":923,"line_end":923,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165018,"byte_end":165021,"line_start":924,"line_end":924,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165022,"byte_end":165105,"line_start":925,"line_end":925,"column_start":1,"column_end":84}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165106,"byte_end":165173,"line_start":926,"line_end":926,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165174,"byte_end":165177,"line_start":927,"line_end":927,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2585},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166063,"byte_end":166070,"line_start":952,"line_end":952,"column_start":12,"column_end":19},"name":"ViewMut","qualname":"::flat::ViewMut","value":"ViewMut {  }","parent":null,"children":[{"krate":0,"index":2588},{"krate":0,"index":2589}],"decl_id":null,"docs":" A mutable owning version of a flat buffer.","sig":null,"attributes":[{"value":"/ A mutable owning version of a flat buffer.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165341,"byte_end":165387,"line_start":937,"line_end":937,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165388,"byte_end":165391,"line_start":938,"line_end":938,"column_start":1,"column_end":4}},{"value":"/ While this wraps a buffer similar to `ImageBuffer`, this is mostly intended as a utility. The","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165392,"byte_end":165489,"line_start":939,"line_end":939,"column_start":1,"column_end":98}},{"value":"/ library endorsed normalized representation is still `ImageBuffer`. Also, the implementation of","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165490,"byte_end":165588,"line_start":940,"line_end":940,"column_start":1,"column_end":99}},{"value":"/ `AsMut<[P::Subpixel]>` must always yield the same buffer. Therefore there is no public way to","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165589,"byte_end":165686,"line_start":941,"line_end":941,"column_start":1,"column_end":98}},{"value":"/ construct this with an owning buffer.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165687,"byte_end":165728,"line_start":942,"line_end":942,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165729,"byte_end":165732,"line_start":943,"line_end":943,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165733,"byte_end":165755,"line_start":944,"line_end":944,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165756,"byte_end":165759,"line_start":945,"line_end":945,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165760,"byte_end":165843,"line_start":946,"line_end":946,"column_start":1,"column_end":84}},{"value":"/ * There is no aliasing of samples","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165844,"byte_end":165881,"line_start":947,"line_end":947,"column_start":1,"column_end":38}},{"value":"/ * The samples are packed, i.e. `self.inner.layout.sample_stride == 1`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165882,"byte_end":165955,"line_start":948,"line_end":948,"column_start":1,"column_end":74}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":165956,"byte_end":166023,"line_start":949,"line_end":949,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166024,"byte_end":166027,"line_start":950,"line_end":950,"column_start":1,"column_end":4}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2599},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166778,"byte_end":166786,"line_start":971,"line_end":971,"column_start":5,"column_end":13},"name":"TooLarge","qualname":"::flat::Error::TooLarge","value":"Error::TooLarge","parent":{"krate":0,"index":2598},"children":[],"decl_id":null,"docs":" The represented image was too large.","sig":null,"attributes":[{"value":"/ The represented image was too large.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166655,"byte_end":166695,"line_start":968,"line_end":968,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166700,"byte_end":166703,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ The optional value denotes a possibly accepted maximal bound.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166708,"byte_end":166773,"line_start":970,"line_end":970,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2601},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166943,"byte_end":166961,"line_start":976,"line_end":976,"column_start":5,"column_end":23},"name":"NormalFormRequired","qualname":"::flat::Error::NormalFormRequired","value":"Error::NormalFormRequired(NormalForm)","parent":{"krate":0,"index":2598},"children":[],"decl_id":null,"docs":" The represented image can not use this representation.","sig":null,"attributes":[{"value":"/ The represented image can not use this representation.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166793,"byte_end":166851,"line_start":973,"line_end":973,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166856,"byte_end":166859,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ Has an additional value of the normalized form that would be accepted.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166864,"byte_end":166938,"line_start":975,"line_end":975,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2604},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167570,"byte_end":167580,"line_start":987,"line_end":987,"column_start":5,"column_end":15},"name":"WrongColor","qualname":"::flat::Error::WrongColor","value":"Error::WrongColor(ColorType)","parent":{"krate":0,"index":2598},"children":[],"decl_id":null,"docs":" The color format did not match the channel count.","sig":null,"attributes":[{"value":"/ The color format did not match the channel count.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166980,"byte_end":167033,"line_start":978,"line_end":978,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167038,"byte_end":167041,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ In some cases you might be able to fix this by lowering the reported pixel count of the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167046,"byte_end":167137,"line_start":980,"line_end":980,"column_start":5,"column_end":96}},{"value":"/ buffer without touching the strides.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167142,"byte_end":167182,"line_start":981,"line_end":981,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167187,"byte_end":167190,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ In very special circumstances you *may* do the opposite. This is **VERY** dangerous but not","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167195,"byte_end":167290,"line_start":983,"line_end":983,"column_start":5,"column_end":100}},{"value":"/ directly memory unsafe although that will likely alias pixels. One scenario is when you","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167295,"byte_end":167386,"line_start":984,"line_end":984,"column_start":5,"column_end":96}},{"value":"/ want to construct an `Rgba` image but have only 3 bytes per pixel and for some reason don't","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167391,"byte_end":167486,"line_start":985,"line_end":985,"column_start":5,"column_end":100}},{"value":"/ care about the value of the alpha channel even though you need `Rgba`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167491,"byte_end":167565,"line_start":986,"line_end":986,"column_start":5,"column_end":79}}]},{"kind":"Enum","id":{"krate":0,"index":2598},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166643,"byte_end":166648,"line_start":967,"line_end":967,"column_start":10,"column_end":15},"name":"Error","qualname":"::flat::Error","value":"pub enum Error {\n\n    /// The represented image was too large.\n    ///\n    /// The optional value denotes a possibly accepted maximal bound.\n    TooLarge,\n\n    /// The represented image can not use this representation.\n    ///\n    /// Has an additional value of the normalized form that would be accepted.\n    NormalFormRequired(NormalForm),\n\n    /// The color format did not match the channel count.\n    ///\n    /// In some cases you might be able to fix this by lowering the reported pixel count of the\n    /// buffer without touching the strides.\n    ///\n    /// In very special circumstances you *may* do the opposite. This is **VERY** dangerous but not\n    /// directly memory unsafe although that will likely alias pixels. One scenario is when you\n    /// want to construct an `Rgba` image but have only 3 bytes per pixel and for some reason don't\n    /// care about the value of the alpha channel even though you need `Rgba`.\n    WrongColor(ColorType),\n}","parent":null,"children":[{"krate":0,"index":2599},{"krate":0,"index":2601},{"krate":0,"index":2604}],"decl_id":null,"docs":" Denotes invalid flat sample buffers when trying to convert to stricter types.","sig":null,"attributes":[{"value":"/ Denotes invalid flat sample buffers when trying to convert to stricter types.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166194,"byte_end":166275,"line_start":960,"line_end":960,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166276,"byte_end":166279,"line_start":961,"line_end":961,"column_start":1,"column_end":4}},{"value":"/ The biggest use case being `ImageBuffer` which expects closely packed","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166280,"byte_end":166353,"line_start":962,"line_end":962,"column_start":1,"column_end":74}},{"value":"/ samples in a row major matrix representation. But this error type may be","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166354,"byte_end":166430,"line_start":963,"line_end":963,"column_start":1,"column_end":77}},{"value":"/ resused for other import functions. A more versatile user may also try to","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166431,"byte_end":166508,"line_start":964,"line_end":964,"column_start":1,"column_end":78}},{"value":"/ correct the underlying representation depending on the error variant.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":166509,"byte_end":166582,"line_start":965,"line_end":965,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2623},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168079,"byte_end":168088,"line_start":1000,"line_end":1000,"column_start":5,"column_end":14},"name":"Unaliased","qualname":"::flat::NormalForm::Unaliased","value":"NormalForm::Unaliased","parent":{"krate":0,"index":2622},"children":[],"decl_id":null,"docs":" No pixel aliases another.","sig":null,"attributes":[{"value":"/ No pixel aliases another.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167856,"byte_end":167885,"line_start":996,"line_end":996,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167890,"byte_end":167893,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ Unaliased also guarantees that all index calculations in the image bounds using","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167898,"byte_end":167981,"line_start":998,"line_end":998,"column_start":5,"column_end":88}},{"value":"/ `dim_index*dim_stride` (such as `x*width_stride + y*height_stride`) do not overflow.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167986,"byte_end":168074,"line_start":999,"line_end":999,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2625},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168318,"byte_end":168329,"line_start":1006,"line_end":1006,"column_start":5,"column_end":16},"name":"PixelPacked","qualname":"::flat::NormalForm::PixelPacked","value":"NormalForm::PixelPacked","parent":{"krate":0,"index":2622},"children":[],"decl_id":null,"docs":" At least pixels are packed.","sig":null,"attributes":[{"value":"/ At least pixels are packed.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168095,"byte_end":168126,"line_start":1002,"line_end":1002,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168131,"byte_end":168134,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ Images of these types can wrap `[T]`-slices into the standard color types. This is a","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168139,"byte_end":168227,"line_start":1004,"line_end":1004,"column_start":5,"column_end":93}},{"value":"/ precondition for `GenericImage` which requires by-reference access to pixels.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168232,"byte_end":168313,"line_start":1005,"line_end":1005,"column_start":5,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2627},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168613,"byte_end":168624,"line_start":1013,"line_end":1013,"column_start":5,"column_end":16},"name":"ImagePacked","qualname":"::flat::NormalForm::ImagePacked","value":"NormalForm::ImagePacked","parent":{"krate":0,"index":2622},"children":[],"decl_id":null,"docs":" All samples are packed.","sig":null,"attributes":[{"value":"/ All samples are packed.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168336,"byte_end":168363,"line_start":1008,"line_end":1008,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168368,"byte_end":168371,"line_start":1009,"line_end":1009,"column_start":5,"column_end":8}},{"value":"/ This is orthogonal to `PixelPacked`. It requires that there are no holes in the image but","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168376,"byte_end":168469,"line_start":1010,"line_end":1010,"column_start":5,"column_end":98}},{"value":"/ it is not necessary that the pixel samples themselves are adjacent. An example of this","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168474,"byte_end":168564,"line_start":1011,"line_end":1011,"column_start":5,"column_end":95}},{"value":"/ behaviour is a planar image layout.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168569,"byte_end":168608,"line_start":1012,"line_end":1012,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2629},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168834,"byte_end":168848,"line_start":1019,"line_end":1019,"column_start":5,"column_end":19},"name":"RowMajorPacked","qualname":"::flat::NormalForm::RowMajorPacked","value":"NormalForm::RowMajorPacked","parent":{"krate":0,"index":2622},"children":[],"decl_id":null,"docs":" The samples are in row-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in row-major form and all samples are packed.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168631,"byte_end":168696,"line_start":1015,"line_end":1015,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168701,"byte_end":168704,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168709,"byte_end":168802,"line_start":1017,"line_end":1017,"column_start":5,"column_end":98}},{"value":"/ in row-major form.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168807,"byte_end":168829,"line_start":1018,"line_end":1018,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2631},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169064,"byte_end":169081,"line_start":1025,"line_end":1025,"column_start":5,"column_end":22},"name":"ColumnMajorPacked","qualname":"::flat::NormalForm::ColumnMajorPacked","value":"NormalForm::ColumnMajorPacked","parent":{"krate":0,"index":2622},"children":[],"decl_id":null,"docs":" The samples are in column-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in column-major form and all samples are packed.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168855,"byte_end":168923,"line_start":1021,"line_end":1021,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168928,"byte_end":168931,"line_start":1022,"line_end":1022,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":168936,"byte_end":169029,"line_start":1023,"line_end":1023,"column_start":5,"column_end":98}},{"value":"/ in column-major form.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169034,"byte_end":169059,"line_start":1024,"line_end":1024,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":2622},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167839,"byte_end":167849,"line_start":995,"line_end":995,"column_start":10,"column_end":20},"name":"NormalForm","qualname":"::flat::NormalForm","value":"pub enum NormalForm {\n\n    /// No pixel aliases another.\n    ///\n    /// Unaliased also guarantees that all index calculations in the image bounds using\n    /// `dim_index*dim_stride` (such as `x*width_stride + y*height_stride`) do not overflow.\n    Unaliased,\n\n    /// At least pixels are packed.\n    ///\n    /// Images of these types can wrap `[T]`-slices into the standard color types. This is a\n    /// precondition for `GenericImage` which requires by-reference access to pixels.\n    PixelPacked,\n\n    /// All samples are packed.\n    ///\n    /// This is orthogonal to `PixelPacked`. It requires that there are no holes in the image but\n    /// it is not necessary that the pixel samples themselves are adjacent. An example of this\n    /// behaviour is a planar image layout.\n    ImagePacked,\n\n    /// The samples are in row-major form and all samples are packed.\n    ///\n    /// In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is\n    /// in row-major form.\n    RowMajorPacked,\n\n    /// The samples are in column-major form and all samples are packed.\n    ///\n    /// In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is\n    /// in column-major form.\n    ColumnMajorPacked,\n}","parent":null,"children":[{"krate":0,"index":2623},{"krate":0,"index":2625},{"krate":0,"index":2627},{"krate":0,"index":2629},{"krate":0,"index":2631}],"decl_id":null,"docs":" Different normal forms of buffers.","sig":null,"attributes":[{"value":"/ Different normal forms of buffers.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167596,"byte_end":167634,"line_start":990,"line_end":990,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167635,"byte_end":167638,"line_start":991,"line_end":991,"column_start":1,"column_end":4}},{"value":"/ A normal form is an unaliased buffer with some additional constraints.  The `ÌmageBuffer` uses","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167639,"byte_end":167738,"line_start":992,"line_end":992,"column_start":1,"column_end":99}},{"value":"/ row major form with packed samples.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":167739,"byte_end":167778,"line_start":993,"line_end":993,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169289,"byte_end":169299,"line_start":1035,"line_end":1035,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<View<Buffer, P>>::into_inner","value":"pub fn into_inner(Self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169170,"byte_end":169201,"line_start":1032,"line_end":1032,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169206,"byte_end":169209,"line_start":1033,"line_end":1033,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169214,"byte_end":169277,"line_start":1034,"line_end":1034,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169782,"byte_end":169786,"line_start":1045,"line_end":1045,"column_start":12,"column_end":16},"name":"flat","qualname":"<View<Buffer, P>>::flat","value":"pub fn flat(&Self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner sample descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the inner sample descriptor.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169361,"byte_end":169412,"line_start":1039,"line_end":1039,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169417,"byte_end":169420,"line_start":1040,"line_end":1040,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169425,"byte_end":169514,"line_start":1041,"line_end":1041,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169519,"byte_end":169612,"line_start":1042,"line_end":1042,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169617,"byte_end":169704,"line_start":1043,"line_end":1043,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169709,"byte_end":169770,"line_start":1044,"line_end":1044,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":170065,"byte_end":170072,"line_start":1053,"line_end":1053,"column_start":12,"column_end":19},"name":"samples","qualname":"<View<Buffer, P>>::samples","value":"pub fn samples(&Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169851,"byte_end":169891,"line_start":1049,"line_end":1049,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169896,"byte_end":169899,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169904,"byte_end":169994,"line_start":1051,"line_end":1051,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169999,"byte_end":170053,"line_start":1052,"line_end":1052,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":170391,"byte_end":170401,"line_start":1061,"line_end":1061,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<View<Buffer, P>>::get_sample","value":"pub fn get_sample(&Self, u8, u32, u32) -> Option<&P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel if it is in-bounds.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":170132,"byte_end":170194,"line_start":1057,"line_end":1057,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":170199,"byte_end":170202,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":170207,"byte_end":170297,"line_start":1059,"line_end":1059,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":170302,"byte_end":170379,"line_start":1060,"line_end":1060,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":171275,"byte_end":171289,"line_start":1079,"line_end":1079,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<View<Buffer, P>>::get_mut_sample","value":"pub fn get_mut_sample(&mut Self, u8, u32, u32) -> Option<&mut P::Subpixel>\nwhere Buffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected subpixel if it is in-bounds.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":170733,"byte_end":170803,"line_start":1071,"line_end":1071,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":170808,"byte_end":170811,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`.  This","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":170816,"byte_end":170910,"line_start":1073,"line_end":1073,"column_start":5,"column_end":99}},{"value":"/ method will return `None` when the sample is out-of-bounds. All errors that could occur due","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":170915,"byte_end":171010,"line_start":1074,"line_end":1074,"column_start":5,"column_end":100}},{"value":"/ to overflow have been eliminated while construction the `View`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":171015,"byte_end":171082,"line_start":1075,"line_end":1075,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":171087,"byte_end":171090,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":171095,"byte_end":171189,"line_start":1077,"line_end":1077,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":171194,"byte_end":171263,"line_start":1078,"line_end":1078,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":171866,"byte_end":171876,"line_start":1094,"line_end":1094,"column_start":12,"column_end":22},"name":"min_length","qualname":"<View<Buffer, P>>::min_length","value":"pub fn min_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":171684,"byte_end":171774,"line_start":1091,"line_end":1091,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":171779,"byte_end":171782,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":171787,"byte_end":171854,"line_start":1093,"line_end":1093,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172210,"byte_end":172221,"line_start":1102,"line_end":1102,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<View<Buffer, P>>::image_slice","value":"pub fn image_slice(&Self) -> &[P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":171947,"byte_end":172009,"line_start":1098,"line_end":1098,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172014,"byte_end":172017,"line_start":1099,"line_end":1099,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172022,"byte_end":172113,"line_start":1100,"line_end":1100,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172118,"byte_end":172198,"line_start":1101,"line_end":1101,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172678,"byte_end":172693,"line_start":1111,"line_end":1111,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<View<Buffer, P>>::image_mut_slice","value":"pub fn image_mut_slice(&mut Self) -> &mut [P::Subpixel] where\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the mutable portion of the buffer that holds sample values.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172314,"byte_end":172384,"line_start":1106,"line_end":1106,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172389,"byte_end":172392,"line_start":1107,"line_end":1107,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`. While","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172397,"byte_end":172491,"line_start":1108,"line_end":1108,"column_start":5,"column_end":99}},{"value":"/ this can not fail–the validity of all coordinates has been validated during the conversion","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172496,"byte_end":172592,"line_start":1109,"line_end":1109,"column_start":5,"column_end":99}},{"value":"/ from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172597,"byte_end":172666,"line_start":1110,"line_end":1110,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173216,"byte_end":173225,"line_start":1123,"line_end":1123,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<View<Buffer, P>>::shrink_to","value":"pub fn shrink_to(&mut Self, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172886,"byte_end":172913,"line_start":1118,"line_end":1118,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172918,"byte_end":172921,"line_start":1119,"line_end":1119,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":172926,"byte_end":173013,"line_start":1120,"line_end":1120,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173018,"byte_end":173111,"line_start":1121,"line_end":1121,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173116,"byte_end":173204,"line_start":1122,"line_end":1122,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174229,"byte_end":174240,"line_start":1146,"line_end":1146,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<View<Buffer, P>>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<ViewMut<Buffer, P>, (Error, Self)> where\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this into an image with mutable pixels.","sig":null,"attributes":[{"value":"/ Try to convert this into an image with mutable pixels.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173380,"byte_end":173438,"line_start":1128,"line_end":1128,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173443,"byte_end":173446,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ The resulting image implements `GenericImage` in addition to `GenericImageView`. While this","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173451,"byte_end":173546,"line_start":1130,"line_end":1130,"column_start":5,"column_end":100}},{"value":"/ has mutable samples, it does not enforce that pixel can not alias and that samples are","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173551,"byte_end":173641,"line_start":1131,"line_end":1131,"column_start":5,"column_end":95}},{"value":"/ packed enough for a mutable pixel reference. This is slightly cheaper than the chain","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173646,"byte_end":173734,"line_start":1132,"line_end":1132,"column_start":5,"column_end":93}},{"value":"/ `self.into_inner().as_view_mut()` and keeps the `View` alive on failure.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173739,"byte_end":173815,"line_start":1133,"line_end":1133,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173820,"byte_end":173823,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173828,"byte_end":173835,"line_start":1135,"line_end":1135,"column_start":5,"column_end":12}},{"value":"/ # use image::RgbImage;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173840,"byte_end":173866,"line_start":1136,"line_end":1136,"column_start":5,"column_end":31}},{"value":"/ # use image::Rgb;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173871,"byte_end":173892,"line_start":1137,"line_end":1137,"column_start":5,"column_end":26}},{"value":"/ let mut buffer = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173897,"byte_end":173962,"line_start":1138,"line_end":1138,"column_start":5,"column_end":70}},{"value":"/ let view = buffer.as_view_with_mut_samples::<Rgb<u8>>().unwrap();","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":173967,"byte_end":174036,"line_start":1139,"line_end":1139,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174041,"byte_end":174044,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ // Inspect some pixels, …","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174049,"byte_end":174080,"line_start":1141,"line_end":1141,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174085,"byte_end":174088,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ // Doesn't fail because it was originally an `RgbImage`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174093,"byte_end":174153,"line_start":1143,"line_end":1143,"column_start":5,"column_end":65}},{"value":"/ let view_mut = view.try_upgrade().unwrap();","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174158,"byte_end":174205,"line_start":1144,"line_end":1144,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174210,"byte_end":174217,"line_start":1145,"line_end":1145,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174881,"byte_end":174891,"line_start":1168,"line_end":1168,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ViewMut<Buffer, P>>::into_inner","value":"pub fn into_inner(Self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174762,"byte_end":174793,"line_start":1165,"line_end":1165,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174798,"byte_end":174801,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174806,"byte_end":174869,"line_start":1167,"line_end":1167,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175375,"byte_end":175379,"line_start":1178,"line_end":1178,"column_start":12,"column_end":16},"name":"flat","qualname":"<ViewMut<Buffer, P>>::flat","value":"pub fn flat(&Self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the sample buffer descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the sample buffer descriptor.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174953,"byte_end":175005,"line_start":1172,"line_end":1172,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175010,"byte_end":175013,"line_start":1173,"line_end":1173,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175018,"byte_end":175107,"line_start":1174,"line_end":1174,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175112,"byte_end":175205,"line_start":1175,"line_end":1175,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175210,"byte_end":175297,"line_start":1176,"line_end":1176,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175302,"byte_end":175363,"line_start":1177,"line_end":1177,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175752,"byte_end":175759,"line_start":1187,"line_end":1187,"column_start":12,"column_end":19},"name":"samples","qualname":"<ViewMut<Buffer, P>>::samples","value":"pub fn samples(&Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175444,"byte_end":175484,"line_start":1182,"line_end":1182,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175489,"byte_end":175492,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175497,"byte_end":175587,"line_start":1184,"line_end":1184,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties. However, its contents can be accessed","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175592,"byte_end":175684,"line_start":1185,"line_end":1185,"column_start":5,"column_end":97}},{"value":"/ mutable through a slice with `image_mut_slice`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175689,"byte_end":175740,"line_start":1186,"line_end":1186,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176001,"byte_end":176011,"line_start":1194,"line_end":1194,"column_start":12,"column_end":22},"name":"min_length","qualname":"<ViewMut<Buffer, P>>::min_length","value":"pub fn min_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175819,"byte_end":175909,"line_start":1191,"line_end":1191,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175914,"byte_end":175917,"line_start":1192,"line_end":1192,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":175922,"byte_end":175989,"line_start":1193,"line_end":1193,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176322,"byte_end":176332,"line_start":1202,"line_end":1202,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<ViewMut<Buffer, P>>::get_sample","value":"pub fn get_sample(&Self, u8, u32, u32) -> Option<&P::Subpixel> where\nBuffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176082,"byte_end":176125,"line_start":1198,"line_end":1198,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176130,"byte_end":176133,"line_start":1199,"line_end":1199,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176138,"byte_end":176228,"line_start":1200,"line_end":1200,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176233,"byte_end":176310,"line_start":1201,"line_end":1201,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176957,"byte_end":176971,"line_start":1218,"line_end":1218,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<ViewMut<Buffer, P>>::get_mut_sample","value":"pub fn get_mut_sample(&mut Self, u8, u32, u32) -> Option<&mut P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected sample.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176711,"byte_end":176760,"line_start":1214,"line_end":1214,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176765,"byte_end":176768,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176773,"byte_end":176863,"line_start":1216,"line_end":1216,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":176868,"byte_end":176945,"line_start":1217,"line_end":1217,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":177582,"byte_end":177593,"line_start":1232,"line_end":1232,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<ViewMut<Buffer, P>>::image_slice","value":"pub fn image_slice(&Self) -> &[P::Subpixel] where Buffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":177319,"byte_end":177381,"line_start":1228,"line_end":1228,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":177386,"byte_end":177389,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":177394,"byte_end":177485,"line_start":1230,"line_end":1230,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":177490,"byte_end":177570,"line_start":1231,"line_end":1231,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":177792,"byte_end":177807,"line_start":1237,"line_end":1237,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<ViewMut<Buffer, P>>::image_mut_slice","value":"pub fn image_mut_slice(&mut Self) -> &mut [P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Return the mutable buffer that holds sample values.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":177725,"byte_end":177780,"line_start":1236,"line_end":1236,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":178275,"byte_end":178284,"line_start":1247,"line_end":1247,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<ViewMut<Buffer, P>>::shrink_to","value":"pub fn shrink_to(&mut Self, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":177945,"byte_end":177972,"line_start":1242,"line_end":1242,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":177977,"byte_end":177980,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":177985,"byte_end":178072,"line_start":1244,"line_end":1244,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":178077,"byte_end":178170,"line_start":1245,"line_end":1245,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":178175,"byte_end":178263,"line_start":1246,"line_end":1246,"column_start":5,"column_end":93}}]},{"kind":"Mod","id":{"krate":0,"index":721},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bmp","qualname":"::bmp","value":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","parent":null,"children":[{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":931}],"decl_id":null,"docs":"  Decoding and Encoding of BMP Images","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8771,"byte_end":8794,"line_start":212,"line_end":212,"column_start":1,"column_end":24}},{"value":"!  Decoding and Encoding of BMP Images","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191460,"byte_end":191500,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191501,"byte_end":191504,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"!  A decoder and encoder for BMP (Windows Bitmap) images","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191505,"byte_end":191563,"line_start":3,"line_end":3,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191564,"byte_end":191567,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"!  # Related Links","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191568,"byte_end":191588,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"!  * <https://msdn.microsoft.com/en-us/library/windows/desktop/dd183375%28v=vs.85%29.aspx>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191589,"byte_end":191681,"line_start":6,"line_end":6,"column_start":1,"column_end":93}},{"value":"!  * <https://en.wikipedia.org/wiki/BMP_file_format>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191682,"byte_end":191736,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/mod.rs","byte_start":191737,"byte_end":191740,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":832},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":209877,"byte_end":209887,"line_start":545,"line_end":545,"column_start":12,"column_end":22},"name":"BmpDecoder","qualname":"::bmp::decoder::BmpDecoder","value":"BmpDecoder {  }","parent":null,"children":[{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847}],"decl_id":null,"docs":" A bmp decoder\n","sig":null,"attributes":[{"value":"/ A bmp decoder","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":209848,"byte_end":209865,"line_start":544,"line_end":544,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":212455,"byte_end":212458,"line_start":632,"line_end":632,"column_start":12,"column_end":15},"name":"new","qualname":"<BmpDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<BmpDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":212382,"byte_end":212443,"line_start":631,"line_end":631,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":907},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":244212,"byte_end":244221,"line_start":1419,"line_end":1419,"column_start":12,"column_end":21},"name":"BmpReader","qualname":"::bmp::decoder::BmpReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":244155,"byte_end":244200,"line_start":1418,"line_end":1418,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":948},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":246847,"byte_end":246857,"line_start":13,"line_end":13,"column_start":12,"column_end":22},"name":"BmpEncoder","qualname":"::bmp::encoder::BmpEncoder","value":"BmpEncoder {  }","parent":null,"children":[{"krate":0,"index":951}],"decl_id":null,"docs":" The representation of a BMP encoder.\n","sig":null,"attributes":[{"value":"/ The representation of a BMP encoder.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":246795,"byte_end":246835,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":952},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247095,"byte_end":247105,"line_start":26,"line_end":26,"column_start":10,"column_end":20},"name":"BMPEncoder","qualname":"::bmp::encoder::BMPEncoder","value":"BmpEncoder","parent":null,"children":[],"decl_id":null,"docs":" BMP Encoder","sig":null,"attributes":[{"value":"/ BMP Encoder","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":246897,"byte_end":246912,"line_start":17,"line_end":17,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":246913,"byte_end":246916,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ An alias of [`BmpEncoder`].","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":246917,"byte_end":246948,"line_start":19,"line_end":19,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":246949,"byte_end":246952,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":246953,"byte_end":246969,"line_start":21,"line_end":21,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":246970,"byte_end":246973,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ [`BmpEncoder`]: struct.BmpEncoder.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":246974,"byte_end":247016,"line_start":23,"line_end":23,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247017,"byte_end":247036,"line_start":24,"line_end":24,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `BmpEncoder` instead\")","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247037,"byte_end":247085,"line_start":25,"line_end":25,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247254,"byte_end":247257,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<BmpEncoder>::new","value":"pub fn new(&'a mut W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247183,"byte_end":247242,"line_start":29,"line_end":29,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247465,"byte_end":247471,"line_start":37,"line_end":37,"column_start":12,"column_end":18},"name":"encode","qualname":"<BmpEncoder>::encode","value":"pub fn encode(&mut Self, &[u8], u32, u32, color::ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```.\n","sig":null,"attributes":[{"value":"/ Encodes the image ```image```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247326,"byte_end":247359,"line_start":34,"line_end":34,"column_start":5,"column_end":38}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247364,"byte_end":247416,"line_start":35,"line_end":35,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247421,"byte_end":247453,"line_start":36,"line_end":36,"column_start":5,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":973},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"jpeg","qualname":"::jpeg","value":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","parent":null,"children":[{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":1029},{"krate":0,"index":1175},{"krate":0,"index":1178}],"decl_id":null,"docs":" Decoding and Encoding of JPEG Images","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8993,"byte_end":9017,"line_start":224,"line_end":224,"column_start":1,"column_end":25}},{"value":"! Decoding and Encoding of JPEG Images","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":258423,"byte_end":258463,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":258464,"byte_end":258467,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! JPEG (Joint Photographic Experts Group) is an image format that supports lossy compression.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":258468,"byte_end":258563,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"! This module implements the Baseline JPEG standard.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":258564,"byte_end":258618,"line_start":4,"line_end":4,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":258619,"byte_end":258622,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":258623,"byte_end":258642,"line_start":6,"line_end":6,"column_start":1,"column_end":20}},{"value":"! * <http://www.w3.org/Graphics/JPEG/itu-t81.pdf> - The JPEG specification","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":258643,"byte_end":258719,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/mod.rs","byte_start":258720,"byte_end":258723,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":998},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":259296,"byte_end":259307,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"JpegDecoder","qualname":"::jpeg::decoder::JpegDecoder","value":"JpegDecoder {  }","parent":null,"children":[{"krate":0,"index":1000},{"krate":0,"index":1001}],"decl_id":null,"docs":" JPEG decoder\n","sig":null,"attributes":[{"value":"/ JPEG decoder","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":259268,"byte_end":259284,"line_start":12,"line_end":12,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":259486,"byte_end":259489,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<JpegDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<JpegDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":259413,"byte_end":259474,"line_start":19,"line_end":19,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1005},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":260047,"byte_end":260057,"line_start":39,"line_end":39,"column_start":12,"column_end":22},"name":"JpegReader","qualname":"::jpeg::decoder::JpegReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":259990,"byte_end":260035,"line_start":38,"line_end":38,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2853},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":291725,"byte_end":291741,"line_start":280,"line_end":280,"column_start":5,"column_end":21},"name":"PixelAspectRatio","qualname":"::jpeg::encoder::PixelDensityUnit::PixelAspectRatio","value":"PixelDensityUnit::PixelAspectRatio","parent":{"krate":0,"index":2852},"children":[],"decl_id":null,"docs":" Represents the absence of a unit, the values indicate only a\n [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)\n","sig":null,"attributes":[{"value":"/ Represents the absence of a unit, the values indicate only a","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":291577,"byte_end":291641,"line_start":278,"line_end":278,"column_start":5,"column_end":69}},{"value":"/ [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":291646,"byte_end":291720,"line_start":279,"line_end":279,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2855},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":291782,"byte_end":291788,"line_start":283,"line_end":283,"column_start":5,"column_end":11},"name":"Inches","qualname":"::jpeg::encoder::PixelDensityUnit::Inches","value":"PixelDensityUnit::Inches","parent":{"krate":0,"index":2852},"children":[],"decl_id":null,"docs":" Pixels per inch (2.54 cm)\n","sig":null,"attributes":[{"value":"/ Pixels per inch (2.54 cm)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":291748,"byte_end":291777,"line_start":282,"line_end":282,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2857},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":291825,"byte_end":291836,"line_start":286,"line_end":286,"column_start":5,"column_end":16},"name":"Centimeters","qualname":"::jpeg::encoder::PixelDensityUnit::Centimeters","value":"PixelDensityUnit::Centimeters","parent":{"krate":0,"index":2852},"children":[],"decl_id":null,"docs":" Pixels per centimeter\n","sig":null,"attributes":[{"value":"/ Pixels per centimeter","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":291795,"byte_end":291820,"line_start":285,"line_end":285,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":2852},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":291554,"byte_end":291570,"line_start":277,"line_end":277,"column_start":10,"column_end":26},"name":"PixelDensityUnit","qualname":"::jpeg::encoder::PixelDensityUnit","value":"pub enum PixelDensityUnit {\n\n    /// Represents the absence of a unit, the values indicate only a\n    /// [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)\n    PixelAspectRatio,\n\n    /// Pixels per inch (2.54 cm)\n    Inches,\n\n    /// Pixels per centimeter\n    Centimeters,\n}","parent":null,"children":[{"krate":0,"index":2853},{"krate":0,"index":2855},{"krate":0,"index":2857}],"decl_id":null,"docs":" Represents a unit in which the density of an image is measured\n","sig":null,"attributes":[{"value":"/ Represents a unit in which the density of an image is measured","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":291433,"byte_end":291499,"line_start":275,"line_end":275,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":2870},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":292173,"byte_end":292185,"line_start":299,"line_end":299,"column_start":12,"column_end":24},"name":"PixelDensity","qualname":"::jpeg::encoder::PixelDensity","value":"PixelDensity { density, unit }","parent":null,"children":[{"krate":0,"index":2871},{"krate":0,"index":2872}],"decl_id":null,"docs":" Represents the pixel density of an image","sig":null,"attributes":[{"value":"/ Represents the pixel density of an image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":291841,"byte_end":291885,"line_start":289,"line_end":289,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":291886,"byte_end":291889,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ For example, a 300 DPI image is represented by:","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":291890,"byte_end":291941,"line_start":291,"line_end":291,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":291942,"byte_end":291945,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":291946,"byte_end":291957,"line_start":293,"line_end":293,"column_start":1,"column_end":12}},{"value":"/ use image::jpeg::*;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":291958,"byte_end":291981,"line_start":294,"line_end":294,"column_start":1,"column_end":24}},{"value":"/ let hdpi = PixelDensity::dpi(300);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":291982,"byte_end":292020,"line_start":295,"line_end":295,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(hdpi, PixelDensity {density: (300,300), unit: PixelDensityUnit::Inches})","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":292021,"byte_end":292108,"line_start":296,"line_end":296,"column_start":1,"column_end":88}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":292109,"byte_end":292116,"line_start":297,"line_end":297,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":2871},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":292248,"byte_end":292255,"line_start":301,"line_end":301,"column_start":9,"column_end":16},"name":"density","qualname":"::jpeg::encoder::PixelDensity::density","value":"(u16, u16)","parent":{"krate":0,"index":2870},"children":[],"decl_id":null,"docs":" A couple of values for (Xdensity, Ydensity)\n","sig":null,"attributes":[{"value":"/ A couple of values for (Xdensity, Ydensity)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":292192,"byte_end":292239,"line_start":300,"line_end":300,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":2872},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":292327,"byte_end":292331,"line_start":303,"line_end":303,"column_start":9,"column_end":13},"name":"unit","qualname":"::jpeg::encoder::PixelDensity::unit","value":"jpeg::encoder::PixelDensityUnit","parent":{"krate":0,"index":2870},"children":[],"decl_id":null,"docs":" The unit in which the density is measured\n","sig":null,"attributes":[{"value":"/ The unit in which the density is measured","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":292273,"byte_end":292318,"line_start":302,"line_end":302,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1108},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":292537,"byte_end":292540,"line_start":310,"line_end":310,"column_start":12,"column_end":15},"name":"dpi","qualname":"<PixelDensity>::dpi","value":"pub fn dpi(u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates the most common pixel density type:\n the horizontal and the vertical density are equal,\n and measured in pixels per inch.\n","sig":null,"attributes":[{"value":"/ Creates the most common pixel density type:","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":292378,"byte_end":292425,"line_start":307,"line_end":307,"column_start":5,"column_end":52}},{"value":"/ the horizontal and the vertical density are equal,","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":292430,"byte_end":292484,"line_start":308,"line_end":308,"column_start":5,"column_end":59}},{"value":"/ and measured in pixels per inch.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":292489,"byte_end":292525,"line_start":309,"line_end":309,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":1111},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":292991,"byte_end":293002,"line_start":329,"line_end":329,"column_start":12,"column_end":23},"name":"JpegEncoder","qualname":"::jpeg::encoder::JpegEncoder","value":"JpegEncoder {  }","parent":null,"children":[{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121}],"decl_id":null,"docs":" The representation of a JPEG encoder\n","sig":null,"attributes":[{"value":"/ The representation of a JPEG encoder","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":292939,"byte_end":292979,"line_start":328,"line_end":328,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":1122},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":293481,"byte_end":293492,"line_start":352,"line_end":352,"column_start":10,"column_end":21},"name":"JPEGEncoder","qualname":"::jpeg::encoder::JPEGEncoder","value":"JpegEncoder","parent":null,"children":[],"decl_id":null,"docs":" JPEG Encoder","sig":null,"attributes":[{"value":"/ JPEG Encoder","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":293278,"byte_end":293294,"line_start":343,"line_end":343,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":293295,"byte_end":293298,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ An alias of [`JpegEncoder`].","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":293299,"byte_end":293331,"line_start":345,"line_end":345,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":293332,"byte_end":293335,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":293336,"byte_end":293352,"line_start":347,"line_end":347,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":293353,"byte_end":293356,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ [`JpegEncoder`]: struct.JpegEncoder.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":293357,"byte_end":293401,"line_start":349,"line_end":349,"column_start":1,"column_end":45}},{"value":"allow(dead_code)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":293402,"byte_end":293421,"line_start":350,"line_end":350,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `JpegEncoder` instead\")","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":293422,"byte_end":293471,"line_start":351,"line_end":351,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":293637,"byte_end":293640,"line_start":356,"line_end":356,"column_start":12,"column_end":15},"name":"new","qualname":"<JpegEncoder>::new","value":"pub fn new(&mut W) -> JpegEncoder<, W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":293567,"byte_end":293625,"line_start":355,"line_end":355,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1129},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":293933,"byte_end":293949,"line_start":363,"line_end":363,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<JpegEncoder>::new_with_quality","value":"pub fn new_with_quality(&mut W, u8) -> JpegEncoder<, W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```, and has\n the quality parameter ```quality``` with a value in the range 1-100\n where 1 is the worst and 100 is the best.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```, and has","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":293728,"byte_end":293795,"line_start":360,"line_end":360,"column_start":5,"column_end":72}},{"value":"/ the quality parameter ```quality``` with a value in the range 1-100","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":293800,"byte_end":293871,"line_start":361,"line_end":361,"column_start":5,"column_end":76}},{"value":"/ where 1 is the worst and 100 is the best.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":293876,"byte_end":293921,"line_start":362,"line_end":362,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1131},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":296317,"byte_end":296334,"line_start":435,"line_end":435,"column_start":12,"column_end":29},"name":"set_pixel_density","qualname":"<JpegEncoder>::set_pixel_density","value":"pub fn set_pixel_density(&mut Self, PixelDensity)","parent":null,"children":[],"decl_id":null,"docs":" Set the pixel density of the images the encoder will encode.\n If this method is not called, then a default pixel aspect ratio of 1x1 will be applied,\n and no DPI information will be stored in the image.\n","sig":null,"attributes":[{"value":"/ Set the pixel density of the images the encoder will encode.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":296085,"byte_end":296149,"line_start":432,"line_end":432,"column_start":5,"column_end":69}},{"value":"/ If this method is not called, then a default pixel aspect ratio of 1x1 will be applied,","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":296154,"byte_end":296245,"line_start":433,"line_end":433,"column_start":5,"column_end":96}},{"value":"/ and no DPI information will be stored in the image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":296250,"byte_end":296305,"line_start":434,"line_end":434,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":296666,"byte_end":296672,"line_start":444,"line_end":444,"column_start":12,"column_end":18},"name":"encode","qualname":"<JpegEncoder>::encode","value":"pub fn encode(&mut Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image stored in the raw byte buffer ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```","sig":null,"attributes":[{"value":"/ Encodes the image stored in the raw byte buffer ```image```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":296432,"byte_end":296495,"line_start":439,"line_end":439,"column_start":5,"column_end":68}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":296500,"byte_end":296552,"line_start":440,"line_end":440,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":296557,"byte_end":296588,"line_start":441,"line_end":441,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":296593,"byte_end":296596,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ The Image in encoded with subsampling ratio 4:2:2","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":296601,"byte_end":296654,"line_start":443,"line_end":443,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1133},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":298873,"byte_end":298885,"line_start":496,"line_end":496,"column_start":12,"column_end":24},"name":"encode_image","qualname":"<JpegEncoder>::encode_image","value":"pub fn encode_image<I: GenericImageView>(&mut Self, &I) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the given image.","sig":null,"attributes":[{"value":"/ Encodes the given image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":298345,"byte_end":298373,"line_start":487,"line_end":487,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":298378,"byte_end":298381,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ As a special feature this does not require the whole image to be present in memory at the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":298386,"byte_end":298479,"line_start":489,"line_end":489,"column_start":5,"column_end":98}},{"value":"/ same time such that it may be computed on the fly, which is why this method exists on this","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":298484,"byte_end":298578,"line_start":490,"line_end":490,"column_start":5,"column_end":99}},{"value":"/ encoder but not on others. Instead the encoder will iterate over 8-by-8 blocks of pixels at","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":298583,"byte_end":298678,"line_start":491,"line_end":491,"column_start":5,"column_end":100}},{"value":"/ a time, inspecting each pixel exactly once. You can rely on this behaviour when calling","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":298683,"byte_end":298774,"line_start":492,"line_end":492,"column_start":5,"column_end":96}},{"value":"/ this method.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":298779,"byte_end":298795,"line_start":493,"line_end":493,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":298800,"byte_end":298803,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ The Image in encoded with subsampling ratio 4:2:2","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":298808,"byte_end":298861,"line_start":495,"line_end":495,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":1194},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"png","qualname":"::png","value":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","parent":null,"children":[{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":4384},{"krate":0,"index":1209},{"krate":0,"index":4386},{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":4390},{"krate":0,"index":1212},{"krate":0,"index":4392},{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1216},{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1232},{"krate":0,"index":1233},{"krate":0,"index":1234},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1241},{"krate":0,"index":1243},{"krate":0,"index":1246},{"krate":0,"index":1250},{"krate":0,"index":1254},{"krate":0,"index":1259},{"krate":0,"index":1260},{"krate":0,"index":1274},{"krate":0,"index":1282},{"krate":0,"index":1288},{"krate":0,"index":1300},{"krate":0,"index":1305},{"krate":0,"index":2885},{"krate":0,"index":2909},{"krate":0,"index":2908},{"krate":0,"index":2906},{"krate":0,"index":2903},{"krate":0,"index":2904},{"krate":0,"index":2899},{"krate":0,"index":2900},{"krate":0,"index":2911},{"krate":0,"index":2935},{"krate":0,"index":2934},{"krate":0,"index":2932},{"krate":0,"index":2929},{"krate":0,"index":2930},{"krate":0,"index":2925},{"krate":0,"index":2926},{"krate":0,"index":1307},{"krate":0,"index":1314},{"krate":0,"index":1322},{"krate":0,"index":1325},{"krate":0,"index":1327}],"decl_id":null,"docs":" Decoding and Encoding of PNG Images","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":9032,"byte_end":9055,"line_start":226,"line_end":226,"column_start":1,"column_end":24}},{"value":"! Decoding and Encoding of PNG Images","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":324206,"byte_end":324245,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":324246,"byte_end":324249,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! PNG (Portable Network Graphics) is an image format that supports lossless compression.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":324250,"byte_end":324340,"line_start":3,"line_end":3,"column_start":1,"column_end":91}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":324341,"byte_end":324344,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":324345,"byte_end":324364,"line_start":5,"line_end":5,"column_start":1,"column_end":20}},{"value":"! * <http://www.w3.org/TR/PNG/> - The PNG Specification","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":324365,"byte_end":324422,"line_start":6,"line_end":6,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":324423,"byte_end":324426,"line_start":7,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1236},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":325179,"byte_end":325188,"line_start":28,"line_end":28,"column_start":12,"column_end":21},"name":"PngReader","qualname":"::png::PngReader","value":"PngReader {  }","parent":null,"children":[{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1240}],"decl_id":null,"docs":" Png Reader","sig":null,"attributes":[{"value":"/ Png Reader","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":324989,"byte_end":325003,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":325004,"byte_end":325007,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This reader will try to read the png one row at a time,","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":325008,"byte_end":325067,"line_start":25,"line_end":25,"column_start":1,"column_end":60}},{"value":"/ however for interlaced png files this is not possible and","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":325068,"byte_end":325129,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/ these are therefore read at once.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":325130,"byte_end":325167,"line_start":27,"line_end":27,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":1241},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":325463,"byte_end":325472,"line_start":43,"line_end":43,"column_start":10,"column_end":19},"name":"PNGReader","qualname":"::png::PNGReader","value":"PngReader<R>","parent":null,"children":[],"decl_id":null,"docs":" PNG Reader","sig":null,"attributes":[{"value":"/ PNG Reader","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":325270,"byte_end":325284,"line_start":34,"line_end":34,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":325285,"byte_end":325288,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PngReader`].","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":325289,"byte_end":325319,"line_start":36,"line_end":36,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":325320,"byte_end":325323,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":325324,"byte_end":325340,"line_start":38,"line_end":38,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":325341,"byte_end":325344,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [`PngReader`]: struct.PngReader.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":325345,"byte_end":325385,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"allow(dead_code)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":325386,"byte_end":325405,"line_start":41,"line_end":41,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `PngReader` instead\")","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":325406,"byte_end":325453,"line_start":42,"line_end":42,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1250},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":327444,"byte_end":327454,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"PngDecoder","qualname":"::png::PngDecoder","value":"PngDecoder {  }","parent":null,"children":[{"krate":0,"index":1252},{"krate":0,"index":1253}],"decl_id":null,"docs":" PNG decoder\n","sig":null,"attributes":[{"value":"/ PNG decoder","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":327417,"byte_end":327432,"line_start":109,"line_end":109,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1256},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":327632,"byte_end":327635,"line_start":117,"line_end":117,"column_start":12,"column_end":15},"name":"new","qualname":"<PngDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<PngDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":327558,"byte_end":327620,"line_start":116,"line_end":116,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1257},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":331388,"byte_end":331392,"line_start":182,"line_end":182,"column_start":12,"column_end":16},"name":"apng","qualname":"<PngDecoder<R>>::apng","value":"pub fn apng(Self) -> ApngDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Turn this into an iterator over the animation frames.","sig":null,"attributes":[{"value":"/ Turn this into an iterator over the animation frames.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":330741,"byte_end":330798,"line_start":172,"line_end":172,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":330803,"byte_end":330806,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ Reading the complete animation requires more memory than reading the data from the IDAT","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":330811,"byte_end":330902,"line_start":174,"line_end":174,"column_start":5,"column_end":96}},{"value":"/ frame–multiple frame buffers need to be reserved at the same time. We further do not","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":330907,"byte_end":330997,"line_start":175,"line_end":175,"column_start":5,"column_end":93}},{"value":"/ support compositing 16-bit colors. In any case this would be lossy as the interface of","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":331002,"byte_end":331092,"line_start":176,"line_end":176,"column_start":5,"column_end":95}},{"value":"/ animation decoders does not support 16-bit colors.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":331097,"byte_end":331151,"line_start":177,"line_end":177,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":331156,"byte_end":331159,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ If something is not supported or a limit is violated then the decoding step that requires","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":331164,"byte_end":331257,"line_start":179,"line_end":179,"column_start":5,"column_end":98}},{"value":"/ them will fail and an error will be returned instead of the frame. No further frames will","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":331262,"byte_end":331355,"line_start":180,"line_end":180,"column_start":5,"column_end":98}},{"value":"/ be returned.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":331360,"byte_end":331376,"line_start":181,"line_end":181,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1258},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":331815,"byte_end":331822,"line_start":192,"line_end":192,"column_start":12,"column_end":19},"name":"is_apng","qualname":"<PngDecoder<R>>::is_apng","value":"pub fn is_apng(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if the image contains an animation.","sig":null,"attributes":[{"value":"/ Returns if the image contains an animation.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":331461,"byte_end":331508,"line_start":186,"line_end":186,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":331513,"byte_end":331516,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Note that the file itself decides if the default image is considered to be part of the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":331521,"byte_end":331611,"line_start":188,"line_end":188,"column_start":5,"column_end":95}},{"value":"/ animation. When it is not the common interpretation is to use it as a thumbnail.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":331616,"byte_end":331700,"line_start":189,"line_end":189,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":331705,"byte_end":331708,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ If a non-animated image is converted into an `ApngDecoder` then its iterator is empty.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":331713,"byte_end":331803,"line_start":191,"line_end":191,"column_start":5,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":1274},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":333791,"byte_end":333802,"line_start":253,"line_end":253,"column_start":12,"column_end":23},"name":"ApngDecoder","qualname":"::png::ApngDecoder","value":"ApngDecoder {  }","parent":null,"children":[{"krate":0,"index":1276},{"krate":0,"index":1277},{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1280},{"krate":0,"index":1281}],"decl_id":null,"docs":" An [`AnimationDecoder`] adapter of [`PngDecoder`].","sig":null,"attributes":[{"value":"/ An [`AnimationDecoder`] adapter of [`PngDecoder`].","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":333505,"byte_end":333559,"line_start":246,"line_end":246,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":333560,"byte_end":333563,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ See [`PngDecoder::apng`] for more information.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":333564,"byte_end":333614,"line_start":248,"line_end":248,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":333615,"byte_end":333618,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ [`AnimationDecoder`]: ../trait.AnimationDecoder.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":333619,"byte_end":333675,"line_start":250,"line_end":250,"column_start":1,"column_end":57}},{"value":"/ [`PngDecoder`]: struct.PngDecoder.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":333676,"byte_end":333718,"line_start":251,"line_end":251,"column_start":1,"column_end":43}},{"value":"/ [`PngDecoder::apng`]: struct.PngDecoder.html#method.apng","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":333719,"byte_end":333779,"line_start":252,"line_end":252,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1300},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":340995,"byte_end":341005,"line_start":440,"line_end":440,"column_start":12,"column_end":22},"name":"PngEncoder","qualname":"::png::PngEncoder","value":"PngEncoder {  }","parent":null,"children":[{"krate":0,"index":1302},{"krate":0,"index":1303},{"krate":0,"index":1304}],"decl_id":null,"docs":" PNG encoder\n","sig":null,"attributes":[{"value":"/ PNG encoder","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":340968,"byte_end":340983,"line_start":439,"line_end":439,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":1305},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341287,"byte_end":341297,"line_start":455,"line_end":455,"column_start":10,"column_end":20},"name":"PNGEncoder","qualname":"::png::PNGEncoder","value":"PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" PNG Encoder","sig":null,"attributes":[{"value":"/ PNG Encoder","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341089,"byte_end":341104,"line_start":446,"line_end":446,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341105,"byte_end":341108,"line_start":447,"line_end":447,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PngEncoder`].","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341109,"byte_end":341140,"line_start":448,"line_end":448,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341141,"byte_end":341144,"line_start":449,"line_end":449,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341145,"byte_end":341161,"line_start":450,"line_end":450,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341162,"byte_end":341165,"line_start":451,"line_end":451,"column_start":1,"column_end":4}},{"value":"/ [`PngEncoder`]: struct.PngEncoder.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341166,"byte_end":341208,"line_start":452,"line_end":452,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341209,"byte_end":341228,"line_start":453,"line_end":453,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `PngEncoder` instead\")","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341229,"byte_end":341277,"line_start":454,"line_end":454,"column_start":1,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2886},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341500,"byte_end":341507,"line_start":461,"line_end":461,"column_start":5,"column_end":12},"name":"Default","qualname":"::png::CompressionType::Default","value":"CompressionType::Default","parent":{"krate":0,"index":2885},"children":[],"decl_id":null,"docs":" Default compression level\n","sig":null,"attributes":[{"value":"/ Default compression level","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341466,"byte_end":341495,"line_start":460,"line_end":460,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2888},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341547,"byte_end":341551,"line_start":463,"line_end":463,"column_start":5,"column_end":9},"name":"Fast","qualname":"::png::CompressionType::Fast","value":"CompressionType::Fast","parent":{"krate":0,"index":2885},"children":[],"decl_id":null,"docs":" Fast, minimal compression\n","sig":null,"attributes":[{"value":"/ Fast, minimal compression","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341513,"byte_end":341542,"line_start":462,"line_end":462,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2890},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341588,"byte_end":341592,"line_start":465,"line_end":465,"column_start":5,"column_end":9},"name":"Best","qualname":"::png::CompressionType::Best","value":"CompressionType::Best","parent":{"krate":0,"index":2885},"children":[],"decl_id":null,"docs":" High compression level\n","sig":null,"attributes":[{"value":"/ High compression level","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341557,"byte_end":341583,"line_start":464,"line_end":464,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2892},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341633,"byte_end":341640,"line_start":467,"line_end":467,"column_start":5,"column_end":12},"name":"Huffman","qualname":"::png::CompressionType::Huffman","value":"CompressionType::Huffman","parent":{"krate":0,"index":2885},"children":[],"decl_id":null,"docs":" Huffman coding compression\n","sig":null,"attributes":[{"value":"/ Huffman coding compression","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341598,"byte_end":341628,"line_start":466,"line_end":466,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2894},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341686,"byte_end":341689,"line_start":469,"line_end":469,"column_start":5,"column_end":8},"name":"Rle","qualname":"::png::CompressionType::Rle","value":"CompressionType::Rle","parent":{"krate":0,"index":2885},"children":[],"decl_id":null,"docs":" Run-length encoding compression\n","sig":null,"attributes":[{"value":"/ Run-length encoding compression","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341646,"byte_end":341681,"line_start":468,"line_end":468,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2896},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341715,"byte_end":341730,"line_start":472,"line_end":472,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::png::CompressionType::__NonExhaustive","value":"CompressionType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":2885},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2885},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341444,"byte_end":341459,"line_start":459,"line_end":459,"column_start":10,"column_end":25},"name":"CompressionType","qualname":"::png::CompressionType","value":"pub enum CompressionType {\n\n    /// Default compression level\n    Default,\n\n    /// Fast, minimal compression\n    Fast,\n\n    /// High compression level\n    Best,\n\n    /// Huffman coding compression\n    Huffman,\n\n    /// Run-length encoding compression\n    Rle,\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2886},{"krate":0,"index":2888},{"krate":0,"index":2890},{"krate":0,"index":2892},{"krate":0,"index":2894},{"krate":0,"index":2896}],"decl_id":null,"docs":" Compression level of a PNG encoder. The default setting is `Fast`.\n","sig":null,"attributes":[{"value":"/ Compression level of a PNG encoder. The default setting is `Fast`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341319,"byte_end":341389,"line_start":457,"line_end":457,"column_start":1,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2912},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":342165,"byte_end":342173,"line_start":483,"line_end":483,"column_start":5,"column_end":13},"name":"NoFilter","qualname":"::png::FilterType::NoFilter","value":"FilterType::NoFilter","parent":{"krate":0,"index":2911},"children":[],"decl_id":null,"docs":" No processing done, best used for low bit depth greyscale or data with a\n low color count\n","sig":null,"attributes":[{"value":"/ No processing done, best used for low bit depth greyscale or data with a","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":342060,"byte_end":342136,"line_start":481,"line_end":481,"column_start":5,"column_end":81}},{"value":"/ low color count","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":342141,"byte_end":342160,"line_start":482,"line_end":482,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2914},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":342240,"byte_end":342243,"line_start":485,"line_end":485,"column_start":5,"column_end":8},"name":"Sub","qualname":"::png::FilterType::Sub","value":"FilterType::Sub","parent":{"krate":0,"index":2911},"children":[],"decl_id":null,"docs":" Filters based on previous pixel in the same scanline\n","sig":null,"attributes":[{"value":"/ Filters based on previous pixel in the same scanline","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":342179,"byte_end":342235,"line_start":484,"line_end":484,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2916},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":342293,"byte_end":342295,"line_start":487,"line_end":487,"column_start":5,"column_end":7},"name":"Up","qualname":"::png::FilterType::Up","value":"FilterType::Up","parent":{"krate":0,"index":2911},"children":[],"decl_id":null,"docs":" Filters based on the scanline above\n","sig":null,"attributes":[{"value":"/ Filters based on the scanline above","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":342249,"byte_end":342288,"line_start":486,"line_end":486,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2918},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":342372,"byte_end":342375,"line_start":489,"line_end":489,"column_start":5,"column_end":8},"name":"Avg","qualname":"::png::FilterType::Avg","value":"FilterType::Avg","parent":{"krate":0,"index":2911},"children":[],"decl_id":null,"docs":" Filters based on the average of left and right neighbor pixels\n","sig":null,"attributes":[{"value":"/ Filters based on the average of left and right neighbor pixels","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":342301,"byte_end":342367,"line_start":488,"line_end":488,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2920},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":342462,"byte_end":342467,"line_start":491,"line_end":491,"column_start":5,"column_end":10},"name":"Paeth","qualname":"::png::FilterType::Paeth","value":"FilterType::Paeth","parent":{"krate":0,"index":2911},"children":[],"decl_id":null,"docs":" Algorithm that takes into account the left, upper left, and above pixels\n","sig":null,"attributes":[{"value":"/ Algorithm that takes into account the left, upper left, and above pixels","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":342381,"byte_end":342457,"line_start":490,"line_end":490,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2922},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":342493,"byte_end":342508,"line_start":494,"line_end":494,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::png::FilterType::__NonExhaustive","value":"FilterType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":2911},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2911},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":342043,"byte_end":342053,"line_start":480,"line_end":480,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::png::FilterType","value":"pub enum FilterType {\n\n    /// No processing done, best used for low bit depth greyscale or data with a\n    /// low color count\n    NoFilter,\n\n    /// Filters based on previous pixel in the same scanline\n    Sub,\n\n    /// Filters based on the scanline above\n    Up,\n\n    /// Filters based on the average of left and right neighbor pixels\n    Avg,\n\n    /// Algorithm that takes into account the left, upper left, and above pixels\n    Paeth,\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2912},{"krate":0,"index":2914},{"krate":0,"index":2916},{"krate":0,"index":2918},{"krate":0,"index":2920},{"krate":0,"index":2922}],"decl_id":null,"docs":" Filter algorithms used to process image data to improve compression.","sig":null,"attributes":[{"value":"/ Filter algorithms used to process image data to improve compression.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341770,"byte_end":341842,"line_start":475,"line_end":475,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341843,"byte_end":341846,"line_start":476,"line_end":476,"column_start":1,"column_end":4}},{"value":"/ The default filter is `Sub` though this default may change in the future, most notable if an","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341847,"byte_end":341943,"line_start":477,"line_end":477,"column_start":1,"column_end":97}},{"value":"/ adaptive encoding option is implemented.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":341944,"byte_end":341988,"line_start":478,"line_end":478,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1309},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":342653,"byte_end":342656,"line_start":499,"line_end":499,"column_start":12,"column_end":15},"name":"new","qualname":"<PngEncoder<W>>::new","value":"pub fn new(W) -> PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":342583,"byte_end":342641,"line_start":498,"line_end":498,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1310},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":343838,"byte_end":343854,"line_start":521,"line_end":521,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<PngEncoder<W>>::new_with_quality","value":"pub fn new_with_quality(W, CompressionType, FilterType) -> PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to `w` with `CompressionType` `compression` and\n `FilterType` `filter`.","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to `w` with `CompressionType` `compression` and","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":342824,"byte_end":342919,"line_start":507,"line_end":507,"column_start":5,"column_end":100}},{"value":"/ `FilterType` `filter`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":342924,"byte_end":342950,"line_start":508,"line_end":508,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":342955,"byte_end":342958,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ It is best to view the options as a _hint_ to the implementation on the smallest or fastest","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":342963,"byte_end":343058,"line_start":510,"line_end":510,"column_start":5,"column_end":100}},{"value":"/ option for encoding a particular image. That is, using options that map directly to a PNG","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":343063,"byte_end":343156,"line_start":511,"line_end":511,"column_start":5,"column_end":98}},{"value":"/ image parameter will use this parameter where possible. But variants that have no direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":343161,"byte_end":343253,"line_start":512,"line_end":512,"column_start":5,"column_end":97}},{"value":"/ mapping may be interpreted differently in minor versions. The exact output is expressly","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":343258,"byte_end":343349,"line_start":513,"line_end":513,"column_start":5,"column_end":96}},{"value":"/ __not__ part the SemVer stability guarantee.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":343354,"byte_end":343402,"line_start":514,"line_end":514,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":343407,"byte_end":343410,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ Note that it is not optimal to use a single filter type. It is likely that the library used","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":343415,"byte_end":343510,"line_start":516,"line_end":516,"column_start":5,"column_end":100}},{"value":"/ will at some point gain the ability to use adaptive filtering methods per pixel row (or","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":343515,"byte_end":343606,"line_start":517,"line_end":517,"column_start":5,"column_end":96}},{"value":"/ even interlaced row). We might make it the new default variant in which case choosing a","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":343611,"byte_end":343702,"line_start":518,"line_end":518,"column_start":5,"column_end":96}},{"value":"/ particular filter method likely produces larger images. Be sure to check the release notes","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":343707,"byte_end":343801,"line_start":519,"line_end":519,"column_start":5,"column_end":99}},{"value":"/ once in a while.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":343806,"byte_end":343826,"line_start":520,"line_end":520,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":344134,"byte_end":344140,"line_start":530,"line_end":530,"column_start":12,"column_end":18},"name":"encode","qualname":"<PngEncoder<W>>::encode","value":"pub fn encode(Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image `data` that has dimensions `width` and `height` and `ColorType` `c`.\n","sig":null,"attributes":[{"value":"/ Encodes the image `data` that has dimensions `width` and `height` and `ColorType` `c`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":344032,"byte_end":344122,"line_start":529,"line_end":529,"column_start":5,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":1335},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":350335,"byte_end":350341,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Frames","qualname":"::animation::Frames","value":"Frames {  }","parent":null,"children":[{"krate":0,"index":1337}],"decl_id":null,"docs":" An implementation dependent iterator, reading the frames as requested\n","sig":null,"attributes":[{"value":"/ An implementation dependent iterator, reading the frames as requested","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":350250,"byte_end":350323,"line_start":9,"line_end":9,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":350521,"byte_end":350524,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<Frames>::new","value":"pub fn new(Box<Iterator<Item = ImageResult<Frame>> + 'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Frames` from an implementation specific iterator.\n","sig":null,"attributes":[{"value":"/ Creates a new `Frames` from an implementation specific iterator.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":350441,"byte_end":350509,"line_start":15,"line_end":15,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1341},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":350916,"byte_end":350930,"line_start":25,"line_end":25,"column_start":12,"column_end":26},"name":"collect_frames","qualname":"<Frames>::collect_frames","value":"pub fn collect_frames(Self) -> ImageResult<Vec<Frame>>","parent":null,"children":[],"decl_id":null,"docs":" Steps through the iterator from the current frame until the end and pushes each frame into\n a `Vec`.\n If en error is encountered that error is returned instead.","sig":null,"attributes":[{"value":"/ Steps through the iterator from the current frame until the end and pushes each frame into","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":350635,"byte_end":350729,"line_start":20,"line_end":20,"column_start":5,"column_end":99}},{"value":"/ a `Vec`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":350734,"byte_end":350746,"line_start":21,"line_end":21,"column_start":5,"column_end":17}},{"value":"/ If en error is encountered that error is returned instead.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":350751,"byte_end":350813,"line_start":22,"line_end":22,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":350818,"byte_end":350821,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ Note: This is equivalent to `Frames::collect::<ImageResult<Vec<Frame>>>()`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":350826,"byte_end":350904,"line_start":24,"line_end":24,"column_start":5,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":2937},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":351219,"byte_end":351224,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Frame","qualname":"::animation::Frame","value":"Frame {  }","parent":null,"children":[{"krate":0,"index":2938},{"krate":0,"index":2939},{"krate":0,"index":2940},{"krate":0,"index":2941}],"decl_id":null,"docs":" A single animation frame\n","sig":null,"attributes":[{"value":"/ A single animation frame","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":351162,"byte_end":351190,"line_start":37,"line_end":37,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":2944},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":351506,"byte_end":351511,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"Delay","qualname":"::animation::Delay","value":"Delay {  }","parent":null,"children":[{"krate":0,"index":2945}],"decl_id":null,"docs":" The delay of a frame relative to the previous one.\n","sig":null,"attributes":[{"value":"/ The delay of a frame relative to the previous one.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":351383,"byte_end":351437,"line_start":49,"line_end":49,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1347},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":351613,"byte_end":351616,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<Frame>::new","value":"pub fn new(RgbaImage) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame without any delay.\n","sig":null,"attributes":[{"value":"/ Contructs a new frame without any delay.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":351557,"byte_end":351601,"line_start":56,"line_end":56,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":351844,"byte_end":351854,"line_start":67,"line_end":67,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Frame>::from_parts","value":"pub fn from_parts(RgbaImage, u32, u32, Delay) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame\n","sig":null,"attributes":[{"value":"/ Contructs a new frame","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":351807,"byte_end":351832,"line_start":66,"line_end":66,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1349},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352066,"byte_end":352071,"line_start":77,"line_end":77,"column_start":12,"column_end":17},"name":"delay","qualname":"<Frame>::delay","value":"pub fn delay(&Self) -> Delay","parent":null,"children":[],"decl_id":null,"docs":" Delay of this frame\n","sig":null,"attributes":[{"value":"/ Delay of this frame","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352031,"byte_end":352054,"line_start":76,"line_end":76,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352160,"byte_end":352166,"line_start":82,"line_end":82,"column_start":12,"column_end":18},"name":"buffer","qualname":"<Frame>::buffer","value":"pub fn buffer(&Self) -> &RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352120,"byte_end":352148,"line_start":81,"line_end":81,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1351},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352262,"byte_end":352273,"line_start":87,"line_end":87,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Frame>::into_buffer","value":"pub fn into_buffer(Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352222,"byte_end":352250,"line_start":86,"line_end":86,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352362,"byte_end":352366,"line_start":92,"line_end":92,"column_start":12,"column_end":16},"name":"left","qualname":"<Frame>::left","value":"pub fn left(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the x offset\n","sig":null,"attributes":[{"value":"/ Returns the x offset","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352326,"byte_end":352350,"line_start":91,"line_end":91,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1353},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352448,"byte_end":352451,"line_start":97,"line_end":97,"column_start":12,"column_end":15},"name":"top","qualname":"<Frame>::top","value":"pub fn top(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the y offset\n","sig":null,"attributes":[{"value":"/ Returns the y offset","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352412,"byte_end":352436,"line_start":96,"line_end":96,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1355},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352716,"byte_end":352735,"line_start":111,"line_end":111,"column_start":12,"column_end":31},"name":"from_numer_denom_ms","qualname":"<Delay>::from_numer_denom_ms","value":"pub fn from_numer_denom_ms(u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a delay from a ratio of milliseconds.","sig":null,"attributes":[{"value":"/ Create a delay from a ratio of milliseconds.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352511,"byte_end":352559,"line_start":103,"line_end":103,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352564,"byte_end":352567,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352572,"byte_end":352586,"line_start":105,"line_end":105,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352591,"byte_end":352594,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352599,"byte_end":352606,"line_start":107,"line_end":107,"column_start":5,"column_end":12}},{"value":"/ use image::Delay;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352611,"byte_end":352632,"line_start":108,"line_end":108,"column_start":5,"column_end":26}},{"value":"/ let delay_10ms = Delay::from_numer_denom_ms(10, 1);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352637,"byte_end":352692,"line_start":109,"line_end":109,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352697,"byte_end":352704,"line_start":110,"line_end":110,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":353378,"byte_end":353402,"line_start":129,"line_end":129,"column_start":12,"column_end":36},"name":"from_saturating_duration","qualname":"<Delay>::from_saturating_duration","value":"pub fn from_saturating_duration(Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convert from a duration, clamped between 0 and an implemented defined maximum.","sig":null,"attributes":[{"value":"/ Convert from a duration, clamped between 0 and an implemented defined maximum.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352855,"byte_end":352937,"line_start":115,"line_end":115,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352942,"byte_end":352945,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ The maximum is *at least* `i32::MAX` milliseconds. It should be noted that the accuracy of","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352950,"byte_end":353044,"line_start":117,"line_end":117,"column_start":5,"column_end":99}},{"value":"/ the result may be relative and very large delays have a coarse resolution.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":353049,"byte_end":353127,"line_start":118,"line_end":118,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":353132,"byte_end":353135,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":353140,"byte_end":353154,"line_start":120,"line_end":120,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":353159,"byte_end":353162,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":353167,"byte_end":353174,"line_start":122,"line_end":122,"column_start":5,"column_end":12}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":353179,"byte_end":353207,"line_start":123,"line_end":123,"column_start":5,"column_end":33}},{"value":"/ use image::Delay;","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":353212,"byte_end":353233,"line_start":124,"line_end":124,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":353238,"byte_end":353241,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ let duration = Duration::from_millis(20);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":353246,"byte_end":353291,"line_start":126,"line_end":126,"column_start":5,"column_end":50}},{"value":"/ let delay = Delay::from_saturating_duration(duration);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":353296,"byte_end":353354,"line_start":127,"line_end":127,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":353359,"byte_end":353366,"line_start":128,"line_end":128,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":354578,"byte_end":354592,"line_start":158,"line_end":158,"column_start":12,"column_end":26},"name":"numer_denom_ms","qualname":"<Delay>::numer_denom_ms","value":"pub fn numer_denom_ms(Self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The numerator and denominator of the delay in milliseconds.","sig":null,"attributes":[{"value":"/ The numerator and denominator of the delay in milliseconds.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":354352,"byte_end":354415,"line_start":154,"line_end":154,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":354420,"byte_end":354423,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ This is guaranteed to be an exact conversion if the `Delay` was previously created with the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":354428,"byte_end":354523,"line_start":156,"line_end":156,"column_start":5,"column_end":100}},{"value":"/ `from_numer_denom_ms` constructor.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":354528,"byte_end":354566,"line_start":157,"line_end":157,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1407},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":361872,"byte_end":361878,"line_start":19,"line_end":19,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::buffer_::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":1410}],"decl_id":null,"docs":" Iterate over pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over pixel refs.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":361832,"byte_end":361860,"line_start":18,"line_end":18,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":1432},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":363039,"byte_end":363048,"line_start":76,"line_end":76,"column_start":12,"column_end":21},"name":"PixelsMut","qualname":"::buffer_::PixelsMut","value":"PixelsMut {  }","parent":null,"children":[{"krate":0,"index":1435}],"decl_id":null,"docs":" Iterate over mutable pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over mutable pixel refs.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":362991,"byte_end":363027,"line_start":75,"line_end":75,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1454},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":364304,"byte_end":364308,"line_start":133,"line_end":133,"column_start":12,"column_end":16},"name":"Rows","qualname":"::buffer_::Rows","value":"Rows {  }","parent":null,"children":[{"krate":0,"index":1457}],"decl_id":null,"docs":" Iterate over rows of an image","sig":null,"attributes":[{"value":"/ Iterate over rows of an image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":364098,"byte_end":364131,"line_start":128,"line_end":128,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":364132,"byte_end":364135,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ This iterator is created with [`ImageBuffer::rows`]. See its document for details.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":364136,"byte_end":364222,"line_start":130,"line_end":130,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":364223,"byte_end":364226,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ [`ImageBuffer::rows`]: ../struct.ImageBuffer.html#method.rows","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":364227,"byte_end":364292,"line_start":132,"line_end":132,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1481},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":366858,"byte_end":366865,"line_start":223,"line_end":223,"column_start":12,"column_end":19},"name":"RowsMut","qualname":"::buffer_::RowsMut","value":"RowsMut {  }","parent":null,"children":[{"krate":0,"index":1484}],"decl_id":null,"docs":" Iterate over mutable rows of an image","sig":null,"attributes":[{"value":"/ Iterate over mutable rows of an image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":366632,"byte_end":366673,"line_start":218,"line_end":218,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":366674,"byte_end":366677,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ This iterator is created with [`ImageBuffer::rows_mut`]. See its document for details.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":366678,"byte_end":366768,"line_start":220,"line_end":220,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":366769,"byte_end":366772,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ [`ImageBuffer::rows_mut`]: ../struct.ImageBuffer.html#method.rows_mut","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":366773,"byte_end":366846,"line_start":222,"line_end":222,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1505},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":369181,"byte_end":369196,"line_start":303,"line_end":303,"column_start":12,"column_end":27},"name":"EnumeratePixels","qualname":"::buffer_::EnumeratePixels","value":"EnumeratePixels {  }","parent":null,"children":[{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1510},{"krate":0,"index":1511}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":369132,"byte_end":369169,"line_start":302,"line_end":302,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1528},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":370503,"byte_end":370516,"line_start":365,"line_end":365,"column_start":12,"column_end":25},"name":"EnumerateRows","qualname":"::buffer_::EnumerateRows","value":"EnumerateRows {  }","parent":null,"children":[{"krate":0,"index":1531},{"krate":0,"index":1532},{"krate":0,"index":1533}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":370456,"byte_end":370491,"line_start":364,"line_end":364,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1550},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":371891,"byte_end":371909,"line_start":431,"line_end":431,"column_start":12,"column_end":30},"name":"EnumeratePixelsMut","qualname":"::buffer_::EnumeratePixelsMut","value":"EnumeratePixelsMut {  }","parent":null,"children":[{"krate":0,"index":1553},{"krate":0,"index":1554},{"krate":0,"index":1555},{"krate":0,"index":1556}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":371842,"byte_end":371879,"line_start":430,"line_end":430,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1570},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":373053,"byte_end":373069,"line_start":484,"line_end":484,"column_start":12,"column_end":28},"name":"EnumerateRowsMut","qualname":"::buffer_::EnumerateRowsMut","value":"EnumerateRowsMut {  }","parent":null,"children":[{"krate":0,"index":1573},{"krate":0,"index":1574},{"krate":0,"index":1575}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":373006,"byte_end":373041,"line_start":483,"line_end":483,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":2964},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376619,"byte_end":376630,"line_start":609,"line_end":609,"column_start":12,"column_end":23},"name":"ImageBuffer","qualname":"::buffer_::ImageBuffer","value":"ImageBuffer {  }","parent":null,"children":[{"krate":0,"index":2967},{"krate":0,"index":2968},{"krate":0,"index":2969},{"krate":0,"index":2970}],"decl_id":null,"docs":" Generic image buffer","sig":null,"attributes":[{"value":"/ Generic image buffer","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":374241,"byte_end":374265,"line_start":540,"line_end":540,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":374266,"byte_end":374269,"line_start":541,"line_end":541,"column_start":1,"column_end":4}},{"value":"/ This is an image parameterised by its Pixel types, represented by a width and height and a","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":374270,"byte_end":374364,"line_start":542,"line_end":542,"column_start":1,"column_end":95}},{"value":"/ container of channel data. It provides direct access to its pixels and implements the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":374365,"byte_end":374454,"line_start":543,"line_end":543,"column_start":1,"column_end":90}},{"value":"/ [`GenericImageView`] and [`GenericImage`] traits. In many ways, this is the standard buffer","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":374455,"byte_end":374550,"line_start":544,"line_end":544,"column_start":1,"column_end":96}},{"value":"/ implementing those traits. Using this concrete type instead of a generic type parameter has","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":374551,"byte_end":374646,"line_start":545,"line_end":545,"column_start":1,"column_end":96}},{"value":"/ been shown to improve performance.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":374647,"byte_end":374685,"line_start":546,"line_end":546,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":374686,"byte_end":374689,"line_start":547,"line_end":547,"column_start":1,"column_end":4}},{"value":"/ The crate defines a few type aliases with regularly used pixel types for your convenience, such","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":374690,"byte_end":374789,"line_start":548,"line_end":548,"column_start":1,"column_end":100}},{"value":"/ as `RgbImage`, `GrayImage` etc.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":374790,"byte_end":374825,"line_start":549,"line_end":549,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":374826,"byte_end":374829,"line_start":550,"line_end":550,"column_start":1,"column_end":4}},{"value":"/ [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":374830,"byte_end":374875,"line_start":551,"line_end":551,"column_start":1,"column_end":46}},{"value":"/ [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":374876,"byte_end":374929,"line_start":552,"line_end":552,"column_start":1,"column_end":54}},{"value":"/ [`RgbImage`]: type.RgbImage.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":374930,"byte_end":374966,"line_start":553,"line_end":553,"column_start":1,"column_end":37}},{"value":"/ [`GrayImage`]: type.GrayImage.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":374967,"byte_end":375005,"line_start":554,"line_end":554,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375006,"byte_end":375009,"line_start":555,"line_end":555,"column_start":1,"column_end":4}},{"value":"/ To convert between images of different Pixel types use [`DynamicImage`].","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375010,"byte_end":375086,"line_start":556,"line_end":556,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375087,"byte_end":375090,"line_start":557,"line_end":557,"column_start":1,"column_end":4}},{"value":"/ You can retrieve a complete description of the buffer's layout and contents through","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375091,"byte_end":375178,"line_start":558,"line_end":558,"column_start":1,"column_end":88}},{"value":"/ [`as_flat_samples`] and [`as_flat_samples_mut`]. This can be handy to also use the contents in","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375179,"byte_end":375277,"line_start":559,"line_end":559,"column_start":1,"column_end":99}},{"value":"/ a foreign language, map it as a GPU host buffer or other similar tasks.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375278,"byte_end":375353,"line_start":560,"line_end":560,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375354,"byte_end":375357,"line_start":561,"line_end":561,"column_start":1,"column_end":4}},{"value":"/ [`DynamicImage`]: enum.DynamicImage.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375358,"byte_end":375402,"line_start":562,"line_end":562,"column_start":1,"column_end":45}},{"value":"/ [`as_flat_samples`]: #method.as_flat_samples","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375403,"byte_end":375451,"line_start":563,"line_end":563,"column_start":1,"column_end":49}},{"value":"/ [`as_flat_samples_mut`]: #method.as_flat_samples_mut","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375452,"byte_end":375508,"line_start":564,"line_end":564,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375509,"byte_end":375512,"line_start":565,"line_end":565,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375513,"byte_end":375528,"line_start":566,"line_end":566,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375529,"byte_end":375532,"line_start":567,"line_end":567,"column_start":1,"column_end":4}},{"value":"/ Create a simple canvas and paint a small cross.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375533,"byte_end":375584,"line_start":568,"line_end":568,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375585,"byte_end":375588,"line_start":569,"line_end":569,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375589,"byte_end":375596,"line_start":570,"line_end":570,"column_start":1,"column_end":8}},{"value":"/ use image::{RgbImage, Rgb};","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375597,"byte_end":375628,"line_start":571,"line_end":571,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375629,"byte_end":375632,"line_start":572,"line_end":572,"column_start":1,"column_end":4}},{"value":"/ let mut img = RgbImage::new(32, 32);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375633,"byte_end":375673,"line_start":573,"line_end":573,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375674,"byte_end":375677,"line_start":574,"line_end":574,"column_start":1,"column_end":4}},{"value":"/ for x in 15..=17 {","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375678,"byte_end":375700,"line_start":575,"line_end":575,"column_start":1,"column_end":23}},{"value":"/     for y in 8..24 {","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375701,"byte_end":375725,"line_start":576,"line_end":576,"column_start":1,"column_end":25}},{"value":"/         img.put_pixel(x, y, Rgb([255, 0, 0]));","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375726,"byte_end":375776,"line_start":577,"line_end":577,"column_start":1,"column_end":51}},{"value":"/         img.put_pixel(y, x, Rgb([255, 0, 0]));","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375777,"byte_end":375827,"line_start":578,"line_end":578,"column_start":1,"column_end":51}},{"value":"/     }","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375828,"byte_end":375837,"line_start":579,"line_end":579,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375838,"byte_end":375843,"line_start":580,"line_end":580,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375844,"byte_end":375851,"line_start":581,"line_end":581,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375852,"byte_end":375855,"line_start":582,"line_end":582,"column_start":1,"column_end":4}},{"value":"/ Overlays an image on top of a larger background raster.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375856,"byte_end":375915,"line_start":583,"line_end":583,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375916,"byte_end":375919,"line_start":584,"line_end":584,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375920,"byte_end":375933,"line_start":585,"line_end":585,"column_start":1,"column_end":14}},{"value":"/ use image::{GenericImage, GenericImageView, ImageBuffer, open};","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":375934,"byte_end":376001,"line_start":586,"line_end":586,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376002,"byte_end":376005,"line_start":587,"line_end":587,"column_start":1,"column_end":4}},{"value":"/ let on_top = open(\"path/to/some.png\").unwrap().into_rgb();","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376006,"byte_end":376068,"line_start":588,"line_end":588,"column_start":1,"column_end":63}},{"value":"/ let mut img = ImageBuffer::from_fn(512, 512, |x, y| {","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376069,"byte_end":376126,"line_start":589,"line_end":589,"column_start":1,"column_end":58}},{"value":"/     if (x + y) % 2 == 0 {","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376127,"byte_end":376156,"line_start":590,"line_end":590,"column_start":1,"column_end":30}},{"value":"/         image::Rgb([0, 0, 0])","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376157,"byte_end":376190,"line_start":591,"line_end":591,"column_start":1,"column_end":34}},{"value":"/     } else {","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376191,"byte_end":376207,"line_start":592,"line_end":592,"column_start":1,"column_end":17}},{"value":"/         image::Rgb([255, 255, 255])","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376208,"byte_end":376247,"line_start":593,"line_end":593,"column_start":1,"column_end":40}},{"value":"/     }","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376248,"byte_end":376257,"line_start":594,"line_end":594,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376258,"byte_end":376265,"line_start":595,"line_end":595,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376266,"byte_end":376269,"line_start":596,"line_end":596,"column_start":1,"column_end":4}},{"value":"/ image::imageops::overlay(&mut img, &on_top, 128, 128);","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376270,"byte_end":376328,"line_start":597,"line_end":597,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376329,"byte_end":376336,"line_start":598,"line_end":598,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376337,"byte_end":376340,"line_start":599,"line_end":599,"column_start":1,"column_end":4}},{"value":"/ Convert an RgbaImage to a GrayImage.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376341,"byte_end":376381,"line_start":600,"line_end":600,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376382,"byte_end":376385,"line_start":601,"line_end":601,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376386,"byte_end":376399,"line_start":602,"line_end":602,"column_start":1,"column_end":14}},{"value":"/ use image::{open, DynamicImage};","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376400,"byte_end":376436,"line_start":603,"line_end":603,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376437,"byte_end":376440,"line_start":604,"line_end":604,"column_start":1,"column_end":4}},{"value":"/ let rgba = open(\"path/to/some.png\").unwrap().into_rgba();","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376441,"byte_end":376502,"line_start":605,"line_end":605,"column_start":1,"column_end":62}},{"value":"/ let gray = DynamicImage::ImageRgba8(rgba).into_luma();","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376503,"byte_end":376561,"line_start":606,"line_end":606,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376562,"byte_end":376569,"line_start":607,"line_end":607,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1592},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":377388,"byte_end":377396,"line_start":631,"line_end":631,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<ImageBuffer<P, Container>>::from_raw","value":"pub fn from_raw(u32, u32, Container) -> Option<ImageBuffer<P, Container>>","parent":null,"children":[],"decl_id":null,"docs":" Contructs a buffer from a generic container\n (for example a `Vec` or a slice)","sig":null,"attributes":[{"value":"/ Contructs a buffer from a generic container","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":377103,"byte_end":377150,"line_start":626,"line_end":626,"column_start":5,"column_end":52}},{"value":"/ (for example a `Vec` or a slice)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":377155,"byte_end":377191,"line_start":627,"line_end":627,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":377196,"byte_end":377199,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the container is not big enough (including when the image dimensions","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":377204,"byte_end":377294,"line_start":629,"line_end":629,"column_start":5,"column_end":95}},{"value":"/ necessitate an allocation of more bytes than supported by the container).","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":377299,"byte_end":377376,"line_start":630,"line_end":630,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1593},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":377802,"byte_end":377810,"line_start":645,"line_end":645,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<ImageBuffer<P, Container>>::into_raw","value":"pub fn into_raw(Self) -> Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[{"value":"/ Returns the underlying raw buffer","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":377753,"byte_end":377790,"line_start":644,"line_end":644,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1594},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":377912,"byte_end":377922,"line_start":650,"line_end":650,"column_start":12,"column_end":22},"name":"dimensions","qualname":"<ImageBuffer<P, Container>>::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":377861,"byte_end":377900,"line_start":649,"line_end":649,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1595},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":378031,"byte_end":378036,"line_start":655,"line_end":655,"column_start":12,"column_end":17},"name":"width","qualname":"<ImageBuffer<P, Container>>::width","value":"pub fn width(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":377991,"byte_end":378019,"line_start":654,"line_end":654,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1596},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":378124,"byte_end":378130,"line_start":660,"line_end":660,"column_start":12,"column_end":18},"name":"height","qualname":"<ImageBuffer<P, Container>>::height","value":"pub fn height(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":378083,"byte_end":378112,"line_start":659,"line_end":659,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1598},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":378515,"byte_end":378521,"line_start":672,"line_end":672,"column_start":12,"column_end":18},"name":"pixels","qualname":"<ImageBuffer<P, Container>>::pixels","value":"pub fn pixels(&Self) -> Pixels<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the pixels of this image.\n The iteration order is x = 0 to width then y = 0 to height\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the pixels of this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":378382,"byte_end":378436,"line_start":670,"line_end":670,"column_start":5,"column_end":59}},{"value":"/ The iteration order is x = 0 to width then y = 0 to height","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":378441,"byte_end":378503,"line_start":671,"line_end":671,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1599},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":379021,"byte_end":379025,"line_start":683,"line_end":683,"column_start":12,"column_end":16},"name":"rows","qualname":"<ImageBuffer<P, Container>>::rows","value":"pub fn rows(&Self) -> Rows<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the rows of this image.","sig":null,"attributes":[{"value":"/ Returns an iterator over the rows of this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":378674,"byte_end":378726,"line_start":678,"line_end":678,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":378731,"byte_end":378734,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ Only non-empty rows can be iterated in this manner. In particular the iterator will not","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":378739,"byte_end":378830,"line_start":680,"line_end":680,"column_start":5,"column_end":96}},{"value":"/ yield any item when the width of the image is `0` or a pixel type without any channels is","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":378835,"byte_end":378928,"line_start":681,"line_end":681,"column_start":5,"column_end":98}},{"value":"/ used. This ensures that its length can always be represented by `usize`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":378933,"byte_end":379009,"line_start":682,"line_end":682,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1600},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":379340,"byte_end":379356,"line_start":691,"line_end":691,"column_start":12,"column_end":28},"name":"enumerate_pixels","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels","value":"pub fn enumerate_pixels(&Self) -> EnumeratePixels<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a reference to them.\n The iteration order is x = 0 to width then y = 0 to height\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":379119,"byte_end":379163,"line_start":687,"line_end":687,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":379168,"byte_end":379221,"line_start":688,"line_end":688,"column_start":5,"column_end":58}},{"value":"/ along with a reference to them.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":379226,"byte_end":379261,"line_start":689,"line_end":689,"column_start":5,"column_end":40}},{"value":"/ The iteration order is x = 0 to width then y = 0 to height","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":379266,"byte_end":379328,"line_start":690,"line_end":690,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1601},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":379688,"byte_end":379702,"line_start":703,"line_end":703,"column_start":12,"column_end":26},"name":"enumerate_rows","qualname":"<ImageBuffer<P, Container>>::enumerate_rows","value":"pub fn enumerate_rows(&Self) -> EnumerateRows<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":379537,"byte_end":379579,"line_start":700,"line_end":700,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":379584,"byte_end":379636,"line_start":701,"line_end":701,"column_start":5,"column_end":57}},{"value":"/ along with a reference to them.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":379641,"byte_end":379676,"line_start":702,"line_end":702,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1602},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":380023,"byte_end":380032,"line_start":716,"line_end":716,"column_start":12,"column_end":21},"name":"get_pixel","qualname":"<ImageBuffer<P, Container>>::get_pixel","value":"pub fn get_pixel(&Self, u32, u32) -> &P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the pixel at location `(x, y)`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":379857,"byte_end":379911,"line_start":711,"line_end":711,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":379916,"byte_end":379919,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":379924,"byte_end":379936,"line_start":713,"line_end":713,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":379941,"byte_end":379944,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":379949,"byte_end":380011,"line_start":715,"line_end":715,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1610},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":381758,"byte_end":381771,"line_start":757,"line_end":757,"column_start":12,"column_end":25},"name":"sample_layout","qualname":"<ImageBuffer<P, Container>>::sample_layout","value":"pub fn sample_layout(&Self) -> SampleLayout","parent":null,"children":[],"decl_id":null,"docs":" Get the format of the buffer when viewed as a matrix of samples.\n","sig":null,"attributes":[{"value":"/ Get the format of the buffer when viewed as a matrix of samples.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":381678,"byte_end":381746,"line_start":756,"line_end":756,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1611},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":382385,"byte_end":382402,"line_start":768,"line_end":768,"column_start":12,"column_end":29},"name":"into_flat_samples","qualname":"<ImageBuffer<P, Container>>::into_flat_samples","value":"pub fn into_flat_samples(Self) -> FlatSamples<Container> where\nContainer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the raw sample buffer with its stride an dimension information.","sig":null,"attributes":[{"value":"/ Return the raw sample buffer with its stride an dimension information.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":381974,"byte_end":382048,"line_start":762,"line_end":762,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":382053,"byte_end":382056,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ The returned buffer is guaranteed to be well formed in all cases. It is layed out by","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":382061,"byte_end":382149,"line_start":764,"line_end":764,"column_start":5,"column_end":93}},{"value":"/ colors, width then height, meaning `channel_stride <= width_stride <= height_stride`. All","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":382154,"byte_end":382247,"line_start":765,"line_end":765,"column_start":5,"column_end":98}},{"value":"/ strides are in numbers of elements but those are mostly `u8` in which case the strides are","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":382252,"byte_end":382346,"line_start":766,"line_end":766,"column_start":5,"column_end":99}},{"value":"/ also byte strides.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":382351,"byte_end":382373,"line_start":767,"line_end":767,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1612},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":382885,"byte_end":382900,"line_start":783,"line_end":783,"column_start":12,"column_end":27},"name":"as_flat_samples","qualname":"<ImageBuffer<P, Container>>::as_flat_samples","value":"pub fn as_flat_samples(&Self) -> FlatSamples<&[P::Subpixel]> where\nContainer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":382743,"byte_end":382786,"line_start":780,"line_end":780,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":382791,"byte_end":382794,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ See [`into_flat_samples`](#method.into_flat_samples) for more details.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":382799,"byte_end":382873,"line_start":782,"line_end":782,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1613},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":383333,"byte_end":383352,"line_start":797,"line_end":797,"column_start":12,"column_end":31},"name":"as_flat_samples_mut","qualname":"<ImageBuffer<P, Container>>::as_flat_samples_mut","value":"pub fn as_flat_samples_mut(&mut Self) -> FlatSamples<&mut [P::Subpixel]> where\nContainer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a mutable view on the raw sample buffer.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":383183,"byte_end":383234,"line_start":794,"line_end":794,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":383239,"byte_end":383242,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ See [`into_flat_samples`](#method.into_flat_samples) for more details.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":383247,"byte_end":383321,"line_start":796,"line_end":796,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1618},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":384099,"byte_end":384109,"line_start":822,"line_end":822,"column_start":12,"column_end":22},"name":"pixels_mut","qualname":"<ImageBuffer<P, Container>>::pixels_mut","value":"pub fn pixels_mut(&mut Self) -> PixelsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable pixels of this image.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable pixels of this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":384025,"byte_end":384087,"line_start":821,"line_end":821,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1619},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":384635,"byte_end":384643,"line_start":833,"line_end":833,"column_start":12,"column_end":20},"name":"rows_mut","qualname":"<ImageBuffer<P, Container>>::rows_mut","value":"pub fn rows_mut(&mut Self) -> RowsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable rows of this image.","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable rows of this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":384280,"byte_end":384340,"line_start":828,"line_end":828,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":384345,"byte_end":384348,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ Only non-empty rows can be iterated in this manner. In particular the iterator will not","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":384353,"byte_end":384444,"line_start":830,"line_end":830,"column_start":5,"column_end":96}},{"value":"/ yield any item when the width of the image is `0` or a pixel type without any channels is","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":384449,"byte_end":384542,"line_start":831,"line_end":831,"column_start":5,"column_end":98}},{"value":"/ used. This ensures that its length can always be represented by `usize`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":384547,"byte_end":384623,"line_start":832,"line_end":832,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1620},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":384913,"byte_end":384933,"line_start":840,"line_end":840,"column_start":12,"column_end":32},"name":"enumerate_pixels_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels_mut","value":"pub fn enumerate_pixels_mut(&mut Self) -> EnumeratePixelsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":384751,"byte_end":384795,"line_start":837,"line_end":837,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":384800,"byte_end":384853,"line_start":838,"line_end":838,"column_start":5,"column_end":58}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":384858,"byte_end":384901,"line_start":839,"line_end":839,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1621},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":385307,"byte_end":385325,"line_start":853,"line_end":853,"column_start":12,"column_end":30},"name":"enumerate_rows_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_rows_mut","value":"pub fn enumerate_rows_mut(&mut Self) -> EnumerateRowsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":385148,"byte_end":385190,"line_start":850,"line_end":850,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":385195,"byte_end":385247,"line_start":851,"line_end":851,"column_start":5,"column_end":57}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":385252,"byte_end":385295,"line_start":852,"line_end":852,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1622},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":385688,"byte_end":385701,"line_start":867,"line_end":867,"column_start":12,"column_end":25},"name":"get_pixel_mut","qualname":"<ImageBuffer<P, Container>>::get_pixel_mut","value":"pub fn get_pixel_mut(&mut Self, u32, u32) -> &mut P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":385514,"byte_end":385576,"line_start":862,"line_end":862,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":385581,"byte_end":385584,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":385589,"byte_end":385601,"line_start":864,"line_end":864,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":385606,"byte_end":385609,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":385614,"byte_end":385676,"line_start":866,"line_end":866,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1623},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":386150,"byte_end":386159,"line_start":879,"line_end":879,"column_start":12,"column_end":21},"name":"put_pixel","qualname":"<ImageBuffer<P, Container>>::put_pixel","value":"pub fn put_pixel(&mut Self, u32, u32, P)","parent":null,"children":[],"decl_id":null,"docs":" Puts a pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Puts a pixel at location `(x, y)`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":386001,"byte_end":386038,"line_start":874,"line_end":874,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":386043,"byte_end":386046,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":386051,"byte_end":386063,"line_start":876,"line_end":876,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":386068,"byte_end":386071,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":386076,"byte_end":386138,"line_start":878,"line_end":878,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1627},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":386604,"byte_end":386608,"line_start":894,"line_end":894,"column_start":12,"column_end":16},"name":"save","qualname":"<ImageBuffer<P, Container>>::save","value":"pub fn save<Q>(&Self, Q) -> ImageResult<()> where Q: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":386413,"byte_end":386466,"line_start":890,"line_end":890,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":386471,"byte_end":386474,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":386479,"byte_end":386535,"line_start":892,"line_end":892,"column_start":5,"column_end":61}},{"value":"/ Currently only jpeg and png files are supported.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":386540,"byte_end":386592,"line_start":893,"line_end":893,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1632},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":387283,"byte_end":387299,"line_start":920,"line_end":920,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<ImageBuffer<P, Container>>::save_with_format","value":"pub fn save_with_format<Q>(&Self, Q, ImageFormat) -> ImageResult<()> where\nQ: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":387076,"byte_end":387131,"line_start":915,"line_end":915,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":387136,"byte_end":387161,"line_start":916,"line_end":916,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":387166,"byte_end":387169,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":387174,"byte_end":387246,"line_start":918,"line_end":918,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":387251,"byte_end":387271,"line_start":919,"line_end":919,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1680},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":393854,"byte_end":393857,"line_start":1133,"line_end":1133,"column_start":12,"column_end":15},"name":"new","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::new","value":"pub fn new(u32, u32) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new image buffer based on a `Vec<P::Subpixel>`.","sig":null,"attributes":[{"value":"/ Creates a new image buffer based on a `Vec<P::Subpixel>`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":393664,"byte_end":393725,"line_start":1128,"line_end":1128,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":393730,"byte_end":393733,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":393738,"byte_end":393750,"line_start":1130,"line_end":1130,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":393755,"byte_end":393758,"line_start":1131,"line_end":1131,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":393763,"byte_end":393842,"line_start":1132,"line_end":1132,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1681},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":394395,"byte_end":394405,"line_start":1149,"line_end":1149,"column_start":12,"column_end":22},"name":"from_pixel","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_pixel","value":"pub fn from_pixel(u32, u32, P) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by copying a pixel","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by copying a pixel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":394215,"byte_end":394266,"line_start":1144,"line_end":1144,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":394271,"byte_end":394274,"line_start":1145,"line_end":1145,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":394279,"byte_end":394291,"line_start":1146,"line_end":1146,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":394296,"byte_end":394299,"line_start":1147,"line_end":1147,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":394304,"byte_end":394383,"line_start":1148,"line_end":1148,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1682},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":394920,"byte_end":394927,"line_start":1164,"line_end":1164,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_fn","value":"pub fn from_fn<F>(u32, u32, F) -> ImageBuffer<P, Vec<P::Subpixel>> where\nF: FnMut(u32, u32) -> P","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by repeated application of the supplied function.","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by repeated application of the supplied function.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":394626,"byte_end":394708,"line_start":1157,"line_end":1157,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":394713,"byte_end":394716,"line_start":1158,"line_end":1158,"column_start":5,"column_end":8}},{"value":"/ The arguments to the function are the pixel's x and y coordinates.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":394721,"byte_end":394791,"line_start":1159,"line_end":1159,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":394796,"byte_end":394799,"line_start":1160,"line_end":1160,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":394804,"byte_end":394816,"line_start":1161,"line_end":1161,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":394821,"byte_end":394824,"line_start":1162,"line_end":1162,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":394829,"byte_end":394908,"line_start":1163,"line_end":1163,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1684},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":395338,"byte_end":395346,"line_start":1177,"line_end":1177,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_vec","value":"pub fn from_vec(u32, u32, Vec<P::Subpixel>)\n-> Option<ImageBuffer<P, Vec<P::Subpixel>>>","parent":null,"children":[],"decl_id":null,"docs":" Creates an image buffer out of an existing buffer.\n Returns None if the buffer is not big enough.\n","sig":null,"attributes":[{"value":"/ Creates an image buffer out of an existing buffer.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":395218,"byte_end":395272,"line_start":1175,"line_end":1175,"column_start":5,"column_end":59}},{"value":"/ Returns None if the buffer is not big enough.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":395277,"byte_end":395326,"line_start":1176,"line_end":1176,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1685},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":395633,"byte_end":395641,"line_start":1187,"line_end":1187,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::into_vec","value":"pub fn into_vec(Self) -> Vec<P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the image buffer and returns the underlying data\n as an owned buffer\n","sig":null,"attributes":[{"value":"/ Consumes the image buffer and returns the underlying data","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":395533,"byte_end":395594,"line_start":1185,"line_end":1185,"column_start":5,"column_end":66}},{"value":"/ as an owned buffer","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":395599,"byte_end":395621,"line_start":1186,"line_end":1186,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":1686},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":395769,"byte_end":395782,"line_start":1193,"line_end":1193,"column_start":11,"column_end":24},"name":"ConvertBuffer","qualname":"::buffer_::ConvertBuffer","value":"ConvertBuffer<T>","parent":null,"children":[{"krate":0,"index":1688}],"decl_id":null,"docs":" Provides color conversions for whole image buffers.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for whole image buffers.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":395703,"byte_end":395758,"line_start":1192,"line_end":1192,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1688},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":395969,"byte_end":395976,"line_start":1198,"line_end":1198,"column_start":8,"column_end":15},"name":"convert","qualname":"::buffer_::ConvertBuffer::convert","value":"pub fn convert(&Self) -> T","parent":{"krate":0,"index":1686},"children":[],"decl_id":null,"docs":" Converts `self` to a buffer of type T","sig":null,"attributes":[{"value":"/ Converts `self` to a buffer of type T","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":395792,"byte_end":395833,"line_start":1194,"line_end":1194,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":395838,"byte_end":395841,"line_start":1195,"line_end":1195,"column_start":5,"column_end":8}},{"value":"/ A generic implementation is provided to convert any image buffer to a image buffer","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":395846,"byte_end":395932,"line_start":1196,"line_end":1196,"column_start":5,"column_end":91}},{"value":"/ based on a `Vec<T>`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":395937,"byte_end":395961,"line_start":1197,"line_end":1197,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1690},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":396244,"byte_end":396258,"line_start":1206,"line_end":1206,"column_start":12,"column_end":26},"name":"expand_palette","qualname":"<GrayImage>::expand_palette","value":"pub fn expand_palette(Self, &[(u8, u8, u8)], Option<u8>) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Expands a color palette by re-using the existing buffer.\n Assumes 8 bit per pixel. Uses an optionally transparent index to\n adjust it's alpha value accordingly.\n","sig":null,"attributes":[{"value":"/ Expands a color palette by re-using the existing buffer.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":396054,"byte_end":396114,"line_start":1203,"line_end":1203,"column_start":5,"column_end":65}},{"value":"/ Assumes 8 bit per pixel. Uses an optionally transparent index to","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":396119,"byte_end":396187,"line_start":1204,"line_end":1204,"column_start":5,"column_end":73}},{"value":"/ adjust it's alpha value accordingly.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":396192,"byte_end":396232,"line_start":1205,"line_end":1205,"column_start":5,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":1699},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":398002,"byte_end":398010,"line_start":1258,"line_end":1258,"column_start":10,"column_end":18},"name":"RgbImage","qualname":"::buffer_::RgbImage","value":"ImageBuffer<Rgb<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb image buffer","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":397963,"byte_end":397992,"line_start":1257,"line_end":1257,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":1700},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":398099,"byte_end":398108,"line_start":1260,"line_end":1260,"column_start":10,"column_end":19},"name":"RgbaImage","qualname":"::buffer_::RgbaImage","value":"ImageBuffer<Rgba<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb + alpha channel image buffer","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":398044,"byte_end":398089,"line_start":1259,"line_end":1259,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1701},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":398188,"byte_end":398197,"line_start":1262,"line_end":1262,"column_start":10,"column_end":19},"name":"GrayImage","qualname":"::buffer_::GrayImage","value":"ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale image buffer","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":398143,"byte_end":398178,"line_start":1261,"line_end":1261,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":1702},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":398293,"byte_end":398307,"line_start":1264,"line_end":1264,"column_start":10,"column_end":24},"name":"GrayAlphaImage","qualname":"::buffer_::GrayAlphaImage","value":"ImageBuffer<LumaA<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale + alpha channel image buffer","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":398232,"byte_end":398283,"line_start":1263,"line_end":1263,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2996},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":406920,"byte_end":406922,"line_start":11,"line_end":11,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ColorType::L8","value":"ColorType::L8","parent":{"krate":0,"index":2995},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":406887,"byte_end":406915,"line_start":10,"line_end":10,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2998},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":406983,"byte_end":406986,"line_start":13,"line_end":13,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ColorType::La8","value":"ColorType::La8","parent":{"krate":0,"index":2995},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":406928,"byte_end":406978,"line_start":12,"line_end":12,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3000},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":407041,"byte_end":407045,"line_start":15,"line_end":15,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ColorType::Rgb8","value":"ColorType::Rgb8","parent":{"krate":0,"index":2995},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit R, G and B channels","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":406992,"byte_end":407036,"line_start":14,"line_end":14,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3002},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":407100,"byte_end":407105,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ColorType::Rgba8","value":"ColorType::Rgba8","parent":{"krate":0,"index":2995},"children":[],"decl_id":null,"docs":" Pixel is 8-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit RGB with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":407051,"byte_end":407095,"line_start":16,"line_end":16,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3004},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":407146,"byte_end":407149,"line_start":20,"line_end":20,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ColorType::L16","value":"ColorType::L16","parent":{"krate":0,"index":2995},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":407112,"byte_end":407141,"line_start":19,"line_end":19,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3006},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":407211,"byte_end":407215,"line_start":22,"line_end":22,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ColorType::La16","value":"ColorType::La16","parent":{"krate":0,"index":2995},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":407155,"byte_end":407206,"line_start":21,"line_end":21,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3008},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":407249,"byte_end":407254,"line_start":24,"line_end":24,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ColorType::Rgb16","value":"ColorType::Rgb16","parent":{"krate":0,"index":2995},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGB\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGB","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":407221,"byte_end":407244,"line_start":23,"line_end":23,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3010},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":407289,"byte_end":407295,"line_start":26,"line_end":26,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ColorType::Rgba16","value":"ColorType::Rgba16","parent":{"krate":0,"index":2995},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGBA\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGBA","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":407260,"byte_end":407284,"line_start":25,"line_end":25,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3012},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":407351,"byte_end":407355,"line_start":29,"line_end":29,"column_start":5,"column_end":9},"name":"Bgr8","qualname":"::color::ColorType::Bgr8","value":"ColorType::Bgr8","parent":{"krate":0,"index":2995},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit B, G and R channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit B, G and R channels","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":407302,"byte_end":407346,"line_start":28,"line_end":28,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3014},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":407410,"byte_end":407415,"line_start":31,"line_end":31,"column_start":5,"column_end":10},"name":"Bgra8","qualname":"::color::ColorType::Bgra8","value":"ColorType::Bgra8","parent":{"krate":0,"index":2995},"children":[],"decl_id":null,"docs":" Pixel is 8-bit BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit BGR with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":407361,"byte_end":407405,"line_start":30,"line_end":30,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3016},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":407441,"byte_end":407456,"line_start":34,"line_end":34,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::color::ColorType::__NonExhaustive","value":"ColorType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":2995},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2995},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":406871,"byte_end":406880,"line_start":9,"line_end":9,"column_start":10,"column_end":19},"name":"ColorType","qualname":"::color::ColorType","value":"pub enum ColorType {\n\n    /// Pixel is 8-bit luminance\n    L8,\n\n    /// Pixel is 8-bit luminance with an alpha channel\n    La8,\n\n    /// Pixel contains 8-bit R, G and B channels\n    Rgb8,\n\n    /// Pixel is 8-bit RGB with an alpha channel\n    Rgba8,\n\n    /// Pixel is 16-bit luminance\n    L16,\n\n    /// Pixel is 16-bit luminance with an alpha channel\n    La16,\n\n    /// Pixel is 16-bit RGB\n    Rgb16,\n\n    /// Pixel is 16-bit RGBA\n    Rgba16,\n\n    /// Pixel contains 8-bit B, G and R channels\n    Bgr8,\n\n    /// Pixel is 8-bit BGR with an alpha channel\n    Bgra8,\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2996},{"krate":0,"index":2998},{"krate":0,"index":3000},{"krate":0,"index":3002},{"krate":0,"index":3004},{"krate":0,"index":3006},{"krate":0,"index":3008},{"krate":0,"index":3010},{"krate":0,"index":3012},{"krate":0,"index":3014},{"krate":0,"index":3016}],"decl_id":null,"docs":" An enumeration over supported color types and bit depths\n","sig":null,"attributes":[{"value":"/ An enumeration over supported color types and bit depths","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":406750,"byte_end":406810,"line_start":7,"line_end":7,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1721},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":407604,"byte_end":407619,"line_start":39,"line_end":39,"column_start":12,"column_end":27},"name":"bytes_per_pixel","qualname":"<ColorType>::bytes_per_pixel","value":"pub fn bytes_per_pixel(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes contained in a pixel of `ColorType` ```c```\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes contained in a pixel of `ColorType` ```c```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":407517,"byte_end":407592,"line_start":38,"line_end":38,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1722},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":408082,"byte_end":408091,"line_start":52,"line_end":52,"column_start":12,"column_end":21},"name":"has_alpha","qualname":"<ColorType>::has_alpha","value":"pub fn has_alpha(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if there is an alpha channel.\n","sig":null,"attributes":[{"value":"/ Returns if there is an alpha channel.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":408029,"byte_end":408070,"line_start":51,"line_end":51,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1724},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":408430,"byte_end":408439,"line_start":62,"line_end":62,"column_start":12,"column_end":21},"name":"has_color","qualname":"<ColorType>::has_color","value":"pub fn has_color(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns false if the color scheme is grayscale, true otherwise.\n","sig":null,"attributes":[{"value":"/ Returns false if the color scheme is grayscale, true otherwise.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":408351,"byte_end":408418,"line_start":61,"line_end":61,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1726},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":408833,"byte_end":408847,"line_start":73,"line_end":73,"column_start":12,"column_end":26},"name":"bits_per_pixel","qualname":"<ColorType>::bits_per_pixel","value":"pub fn bits_per_pixel(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be\n a multiple of 8).\n","sig":null,"attributes":[{"value":"/ Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":408699,"byte_end":408795,"line_start":71,"line_end":71,"column_start":5,"column_end":101}},{"value":"/ a multiple of 8).","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":408800,"byte_end":408821,"line_start":72,"line_end":72,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1727},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409010,"byte_end":409023,"line_start":78,"line_end":78,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ColorType>::channel_count","value":"pub fn channel_count(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of color channels that make up this pixel\n","sig":null,"attributes":[{"value":"/ Returns the number of color channels that make up this pixel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":408934,"byte_end":408998,"line_start":77,"line_end":77,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3035},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409685,"byte_end":409687,"line_start":95,"line_end":95,"column_start":5,"column_end":7},"name":"L1","qualname":"::color::ExtendedColorType::L1","value":"ExtendedColorType::L1","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel is 1-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit luminance","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409652,"byte_end":409680,"line_start":94,"line_end":94,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3037},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409748,"byte_end":409751,"line_start":97,"line_end":97,"column_start":5,"column_end":8},"name":"La1","qualname":"::color::ExtendedColorType::La1","value":"ExtendedColorType::La1","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel is 1-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit luminance with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409693,"byte_end":409743,"line_start":96,"line_end":96,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3039},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409806,"byte_end":409810,"line_start":99,"line_end":99,"column_start":5,"column_end":9},"name":"Rgb1","qualname":"::color::ExtendedColorType::Rgb1","value":"ExtendedColorType::Rgb1","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel contains 1-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 1-bit R, G and B channels","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409757,"byte_end":409801,"line_start":98,"line_end":98,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3041},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409865,"byte_end":409870,"line_start":101,"line_end":101,"column_start":5,"column_end":10},"name":"Rgba1","qualname":"::color::ExtendedColorType::Rgba1","value":"ExtendedColorType::Rgba1","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel is 1-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit RGB with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409816,"byte_end":409860,"line_start":100,"line_end":100,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3043},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409909,"byte_end":409911,"line_start":103,"line_end":103,"column_start":5,"column_end":7},"name":"L2","qualname":"::color::ExtendedColorType::L2","value":"ExtendedColorType::L2","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel is 2-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit luminance","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409876,"byte_end":409904,"line_start":102,"line_end":102,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3045},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409972,"byte_end":409975,"line_start":105,"line_end":105,"column_start":5,"column_end":8},"name":"La2","qualname":"::color::ExtendedColorType::La2","value":"ExtendedColorType::La2","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel is 2-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit luminance with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409917,"byte_end":409967,"line_start":104,"line_end":104,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3047},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410030,"byte_end":410034,"line_start":107,"line_end":107,"column_start":5,"column_end":9},"name":"Rgb2","qualname":"::color::ExtendedColorType::Rgb2","value":"ExtendedColorType::Rgb2","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel contains 2-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 2-bit R, G and B channels","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409981,"byte_end":410025,"line_start":106,"line_end":106,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3049},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410089,"byte_end":410094,"line_start":109,"line_end":109,"column_start":5,"column_end":10},"name":"Rgba2","qualname":"::color::ExtendedColorType::Rgba2","value":"ExtendedColorType::Rgba2","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel is 2-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit RGB with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410040,"byte_end":410084,"line_start":108,"line_end":108,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3051},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410133,"byte_end":410135,"line_start":111,"line_end":111,"column_start":5,"column_end":7},"name":"L4","qualname":"::color::ExtendedColorType::L4","value":"ExtendedColorType::L4","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel is 4-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit luminance","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410100,"byte_end":410128,"line_start":110,"line_end":110,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3053},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410196,"byte_end":410199,"line_start":113,"line_end":113,"column_start":5,"column_end":8},"name":"La4","qualname":"::color::ExtendedColorType::La4","value":"ExtendedColorType::La4","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel is 4-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit luminance with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410141,"byte_end":410191,"line_start":112,"line_end":112,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3055},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410254,"byte_end":410258,"line_start":115,"line_end":115,"column_start":5,"column_end":9},"name":"Rgb4","qualname":"::color::ExtendedColorType::Rgb4","value":"ExtendedColorType::Rgb4","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel contains 4-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 4-bit R, G and B channels","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410205,"byte_end":410249,"line_start":114,"line_end":114,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3057},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410313,"byte_end":410318,"line_start":117,"line_end":117,"column_start":5,"column_end":10},"name":"Rgba4","qualname":"::color::ExtendedColorType::Rgba4","value":"ExtendedColorType::Rgba4","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel is 4-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit RGB with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410264,"byte_end":410308,"line_start":116,"line_end":116,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3059},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410357,"byte_end":410359,"line_start":119,"line_end":119,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ExtendedColorType::L8","value":"ExtendedColorType::L8","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410324,"byte_end":410352,"line_start":118,"line_end":118,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3061},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410420,"byte_end":410423,"line_start":121,"line_end":121,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ExtendedColorType::La8","value":"ExtendedColorType::La8","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410365,"byte_end":410415,"line_start":120,"line_end":120,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3063},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410478,"byte_end":410482,"line_start":123,"line_end":123,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ExtendedColorType::Rgb8","value":"ExtendedColorType::Rgb8","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit R, G and B channels","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410429,"byte_end":410473,"line_start":122,"line_end":122,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3065},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410537,"byte_end":410542,"line_start":125,"line_end":125,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ExtendedColorType::Rgba8","value":"ExtendedColorType::Rgba8","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel is 8-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit RGB with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410488,"byte_end":410532,"line_start":124,"line_end":124,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3067},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410582,"byte_end":410585,"line_start":127,"line_end":127,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ExtendedColorType::L16","value":"ExtendedColorType::L16","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410548,"byte_end":410577,"line_start":126,"line_end":126,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3069},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410647,"byte_end":410651,"line_start":129,"line_end":129,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ExtendedColorType::La16","value":"ExtendedColorType::La16","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410591,"byte_end":410642,"line_start":128,"line_end":128,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3071},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410707,"byte_end":410712,"line_start":131,"line_end":131,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ExtendedColorType::Rgb16","value":"ExtendedColorType::Rgb16","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel contains 16-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 16-bit R, G and B channels","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410657,"byte_end":410702,"line_start":130,"line_end":130,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3073},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410768,"byte_end":410774,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ExtendedColorType::Rgba16","value":"ExtendedColorType::Rgba16","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGB with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410718,"byte_end":410763,"line_start":132,"line_end":132,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3075},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410829,"byte_end":410833,"line_start":135,"line_end":135,"column_start":5,"column_end":9},"name":"Bgr8","qualname":"::color::ExtendedColorType::Bgr8","value":"ExtendedColorType::Bgr8","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit B, G and R channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit B, G and R channels","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410780,"byte_end":410824,"line_start":134,"line_end":134,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3077},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410888,"byte_end":410893,"line_start":137,"line_end":137,"column_start":5,"column_end":10},"name":"Bgra8","qualname":"::color::ExtendedColorType::Bgra8","value":"ExtendedColorType::Bgra8","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel is 8-bit BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit BGR with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410839,"byte_end":410883,"line_start":136,"line_end":136,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3079},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":411122,"byte_end":411129,"line_start":142,"line_end":142,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::color::ExtendedColorType::Unknown","value":"ExtendedColorType::Unknown(u8)","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":" Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels\n which are associated with an external palette. In that case, the pixel value is an index\n into the palette.\n","sig":null,"attributes":[{"value":"/ Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410900,"byte_end":410994,"line_start":139,"line_end":139,"column_start":5,"column_end":99}},{"value":"/ which are associated with an external palette. In that case, the pixel value is an index","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":410999,"byte_end":411091,"line_start":140,"line_end":140,"column_start":5,"column_end":97}},{"value":"/ into the palette.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":411096,"byte_end":411117,"line_start":141,"line_end":141,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3082},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":411159,"byte_end":411174,"line_start":145,"line_end":145,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::color::ExtendedColorType::__NonExhaustive","value":"ExtendedColorType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":3034},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3034},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409628,"byte_end":409645,"line_start":93,"line_end":93,"column_start":10,"column_end":27},"name":"ExtendedColorType","qualname":"::color::ExtendedColorType","value":"pub enum ExtendedColorType {\n\n    /// Pixel is 1-bit luminance\n    L1,\n\n    /// Pixel is 1-bit luminance with an alpha channel\n    La1,\n\n    /// Pixel contains 1-bit R, G and B channels\n    Rgb1,\n\n    /// Pixel is 1-bit RGB with an alpha channel\n    Rgba1,\n\n    /// Pixel is 2-bit luminance\n    L2,\n\n    /// Pixel is 2-bit luminance with an alpha channel\n    La2,\n\n    /// Pixel contains 2-bit R, G and B channels\n    Rgb2,\n\n    /// Pixel is 2-bit RGB with an alpha channel\n    Rgba2,\n\n    /// Pixel is 4-bit luminance\n    L4,\n\n    /// Pixel is 4-bit luminance with an alpha channel\n    La4,\n\n    /// Pixel contains 4-bit R, G and B channels\n    Rgb4,\n\n    /// Pixel is 4-bit RGB with an alpha channel\n    Rgba4,\n\n    /// Pixel is 8-bit luminance\n    L8,\n\n    /// Pixel is 8-bit luminance with an alpha channel\n    La8,\n\n    /// Pixel contains 8-bit R, G and B channels\n    Rgb8,\n\n    /// Pixel is 8-bit RGB with an alpha channel\n    Rgba8,\n\n    /// Pixel is 16-bit luminance\n    L16,\n\n    /// Pixel is 16-bit luminance with an alpha channel\n    La16,\n\n    /// Pixel contains 16-bit R, G and B channels\n    Rgb16,\n\n    /// Pixel is 16-bit RGB with an alpha channel\n    Rgba16,\n\n    /// Pixel contains 8-bit B, G and R channels\n    Bgr8,\n\n    /// Pixel is 8-bit BGR with an alpha channel\n    Bgra8,\n\n    /// Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels\n    /// which are associated with an external palette. In that case, the pixel value is an index\n    /// into the palette.\n    Unknown(u8),\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":3035},{"krate":0,"index":3037},{"krate":0,"index":3039},{"krate":0,"index":3041},{"krate":0,"index":3043},{"krate":0,"index":3045},{"krate":0,"index":3047},{"krate":0,"index":3049},{"krate":0,"index":3051},{"krate":0,"index":3053},{"krate":0,"index":3055},{"krate":0,"index":3057},{"krate":0,"index":3059},{"krate":0,"index":3061},{"krate":0,"index":3063},{"krate":0,"index":3065},{"krate":0,"index":3067},{"krate":0,"index":3069},{"krate":0,"index":3071},{"krate":0,"index":3073},{"krate":0,"index":3075},{"krate":0,"index":3077},{"krate":0,"index":3079},{"krate":0,"index":3082}],"decl_id":null,"docs":" An enumeration of color types encountered in image formats.","sig":null,"attributes":[{"value":"/ An enumeration of color types encountered in image formats.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409121,"byte_end":409184,"line_start":84,"line_end":84,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409185,"byte_end":409188,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ This is not exhaustive over all existing image formats but should be granular enough to allow","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409189,"byte_end":409286,"line_start":86,"line_end":86,"column_start":1,"column_end":98}},{"value":"/ round tripping of decoding and encoding as much as possible. The variants will be extended as","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409287,"byte_end":409384,"line_start":87,"line_end":87,"column_start":1,"column_end":98}},{"value":"/ necessary to enable this.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409385,"byte_end":409414,"line_start":88,"line_end":88,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409415,"byte_end":409418,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ Another purpose is to advise users of a rough estimate of the accuracy and effort of the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409419,"byte_end":409511,"line_start":90,"line_end":90,"column_start":1,"column_end":93}},{"value":"/ decoding from and encoding to such an image format.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":409512,"byte_end":409567,"line_start":91,"line_end":91,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1729},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":411457,"byte_end":411470,"line_start":153,"line_end":153,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ExtendedColorType>::channel_count","value":"pub fn channel_count(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the number of channels for colors of this type.","sig":null,"attributes":[{"value":"/ Get the number of channels for colors of this type.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":411243,"byte_end":411298,"line_start":149,"line_end":149,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":411303,"byte_end":411306,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Note that the `Unknown` variant returns a value of `1` since pixels can only be treated as","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":411311,"byte_end":411405,"line_start":151,"line_end":151,"column_start":5,"column_end":99}},{"value":"/ an opaque datum by the library.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":411410,"byte_end":411445,"line_start":152,"line_end":152,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":3400},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":417834,"byte_end":417837,"line_start":373,"line_end":373,"column_start":5,"column_end":8},"name":"Rgb","qualname":"::color::Rgb","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":413584,"byte_end":413594,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":413595,"byte_end":413617,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3429},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":417914,"byte_end":417917,"line_start":374,"line_end":374,"column_start":5,"column_end":8},"name":"Bgr","qualname":"::color::Bgr","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":413584,"byte_end":413594,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":413595,"byte_end":413617,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3458},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":417993,"byte_end":417997,"line_start":375,"line_end":375,"column_start":5,"column_end":9},"name":"Luma","qualname":"::color::Luma","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":413584,"byte_end":413594,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":413595,"byte_end":413617,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3487},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":418074,"byte_end":418078,"line_start":376,"line_end":376,"column_start":5,"column_end":9},"name":"Rgba","qualname":"::color::Rgba","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":413584,"byte_end":413594,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":413595,"byte_end":413617,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3516},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":418174,"byte_end":418178,"line_start":377,"line_end":377,"column_start":5,"column_end":9},"name":"Bgra","qualname":"::color::Bgra","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":413584,"byte_end":413594,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":413595,"byte_end":413617,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3545},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":418273,"byte_end":418278,"line_start":378,"line_end":378,"column_start":5,"column_end":10},"name":"LumaA","qualname":"::color::LumaA","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":413584,"byte_end":413594,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":413595,"byte_end":413617,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":1733},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":418445,"byte_end":418454,"line_start":382,"line_end":382,"column_start":11,"column_end":20},"name":"FromColor","qualname":"::color::FromColor","value":"FromColor<Other>","parent":null,"children":[{"krate":0,"index":1735}],"decl_id":null,"docs":" Provides color conversions for the different pixel types.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for the different pixel types.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":418373,"byte_end":418434,"line_start":381,"line_end":381,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1735},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":418544,"byte_end":418554,"line_start":384,"line_end":384,"column_start":8,"column_end":18},"name":"from_color","qualname":"::color::FromColor::from_color","value":"pub fn from_color(&mut Self, &Other)","parent":{"krate":0,"index":1733},"children":[],"decl_id":null,"docs":" Changes `self` to represent `Other` in the color space of `Self`\n","sig":null,"attributes":[{"value":"/ Changes `self` to represent `Other` in the color space of `Self`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":418468,"byte_end":418536,"line_start":383,"line_end":383,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3626},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":446473,"byte_end":446483,"line_start":42,"line_end":42,"column_start":5,"column_end":15},"name":"ImageLuma8","qualname":"::dynimage::DynamicImage::ImageLuma8","value":"DynamicImage::ImageLuma8(GrayImage)","parent":{"krate":0,"index":3625},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":446426,"byte_end":446468,"line_start":41,"line_end":41,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3629},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":446559,"byte_end":446570,"line_start":45,"line_end":45,"column_start":5,"column_end":16},"name":"ImageLumaA8","qualname":"::dynimage::DynamicImage::ImageLumaA8","value":"DynamicImage::ImageLumaA8(GrayAlphaImage)","parent":{"krate":0,"index":3625},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma with alpha","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":446501,"byte_end":446554,"line_start":44,"line_end":44,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3632},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":446639,"byte_end":446648,"line_start":48,"line_end":48,"column_start":5,"column_end":14},"name":"ImageRgb8","qualname":"::dynimage::DynamicImage::ImageRgb8","value":"DynamicImage::ImageRgb8(RgbImage)","parent":{"krate":0,"index":3625},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":446593,"byte_end":446634,"line_start":47,"line_end":47,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3635},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":446722,"byte_end":446732,"line_start":51,"line_end":51,"column_start":5,"column_end":15},"name":"ImageRgba8","qualname":"::dynimage::DynamicImage::ImageRgba8","value":"DynamicImage::ImageRgba8(RgbaImage)","parent":{"krate":0,"index":3625},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb with alpha","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":446665,"byte_end":446717,"line_start":50,"line_end":50,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3638},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":446796,"byte_end":446805,"line_start":54,"line_end":54,"column_start":5,"column_end":14},"name":"ImageBgr8","qualname":"::dynimage::DynamicImage::ImageBgr8","value":"DynamicImage::ImageBgr8(BgrImage)","parent":{"krate":0,"index":3625},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Bgr","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":446750,"byte_end":446791,"line_start":53,"line_end":53,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3641},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":446879,"byte_end":446889,"line_start":57,"line_end":57,"column_start":5,"column_end":15},"name":"ImageBgra8","qualname":"::dynimage::DynamicImage::ImageBgra8","value":"DynamicImage::ImageBgra8(BgraImage)","parent":{"krate":0,"index":3625},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Bgr with alpha","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":446822,"byte_end":446874,"line_start":56,"line_end":56,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3644},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":446955,"byte_end":446966,"line_start":60,"line_end":60,"column_start":5,"column_end":16},"name":"ImageLuma16","qualname":"::dynimage::DynamicImage::ImageLuma16","value":"DynamicImage::ImageLuma16(Gray16Image)","parent":{"krate":0,"index":3625},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":446907,"byte_end":446950,"line_start":59,"line_end":59,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3647},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":447045,"byte_end":447057,"line_start":63,"line_end":63,"column_start":5,"column_end":17},"name":"ImageLumaA16","qualname":"::dynimage::DynamicImage::ImageLumaA16","value":"DynamicImage::ImageLumaA16(GrayAlpha16Image)","parent":{"krate":0,"index":3625},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma with alpha","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":446986,"byte_end":447040,"line_start":62,"line_end":62,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3650},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":447129,"byte_end":447139,"line_start":66,"line_end":66,"column_start":5,"column_end":15},"name":"ImageRgb16","qualname":"::dynimage::DynamicImage::ImageRgb16","value":"DynamicImage::ImageRgb16(Rgb16Image)","parent":{"krate":0,"index":3625},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":447082,"byte_end":447124,"line_start":65,"line_end":65,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3653},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":447216,"byte_end":447227,"line_start":69,"line_end":69,"column_start":5,"column_end":16},"name":"ImageRgba16","qualname":"::dynimage::DynamicImage::ImageRgba16","value":"DynamicImage::ImageRgba16(Rgba16Image)","parent":{"krate":0,"index":3625},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb with alpha","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":447158,"byte_end":447211,"line_start":68,"line_end":68,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":3625},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":446407,"byte_end":446419,"line_start":40,"line_end":40,"column_start":10,"column_end":22},"name":"DynamicImage","qualname":"::dynimage::DynamicImage","value":"pub enum DynamicImage {\n\n    /// Each pixel in this image is 8-bit Luma\n    ImageLuma8(GrayImage),\n\n    /// Each pixel in this image is 8-bit Luma with alpha\n    ImageLumaA8(GrayAlphaImage),\n\n    /// Each pixel in this image is 8-bit Rgb\n    ImageRgb8(RgbImage),\n\n    /// Each pixel in this image is 8-bit Rgb with alpha\n    ImageRgba8(RgbaImage),\n\n    /// Each pixel in this image is 8-bit Bgr\n    ImageBgr8(BgrImage),\n\n    /// Each pixel in this image is 8-bit Bgr with alpha\n    ImageBgra8(BgraImage),\n\n    /// Each pixel in this image is 16-bit Luma\n    ImageLuma16(Gray16Image),\n\n    /// Each pixel in this image is 16-bit Luma with alpha\n    ImageLumaA16(GrayAlpha16Image),\n\n    /// Each pixel in this image is 16-bit Rgb\n    ImageRgb16(Rgb16Image),\n\n    /// Each pixel in this image is 16-bit Rgb with alpha\n    ImageRgba16(Rgba16Image),\n}","parent":null,"children":[{"krate":0,"index":3626},{"krate":0,"index":3629},{"krate":0,"index":3632},{"krate":0,"index":3635},{"krate":0,"index":3638},{"krate":0,"index":3641},{"krate":0,"index":3644},{"krate":0,"index":3647},{"krate":0,"index":3650},{"krate":0,"index":3653}],"decl_id":null,"docs":" A Dynamic Image\n","sig":null,"attributes":[{"value":"/ A Dynamic Image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":446361,"byte_end":446380,"line_start":38,"line_end":38,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1953},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":451442,"byte_end":451451,"line_start":136,"line_end":136,"column_start":12,"column_end":21},"name":"new_luma8","qualname":"<DynamicImage>::new_luma8","value":"pub fn new_luma8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey pixels.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":451368,"byte_end":451430,"line_start":135,"line_end":135,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1954},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":451654,"byte_end":451665,"line_start":142,"line_end":142,"column_start":12,"column_end":23},"name":"new_luma_a8","qualname":"<DynamicImage>::new_luma_a8","value":"pub fn new_luma_a8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":451554,"byte_end":451608,"line_start":140,"line_end":140,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":451613,"byte_end":451642,"line_start":141,"line_end":141,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1955},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":451842,"byte_end":451850,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"name":"new_rgb8","qualname":"<DynamicImage>::new_rgb8","value":"pub fn new_rgb8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":451769,"byte_end":451830,"line_start":146,"line_end":146,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1956},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":452026,"byte_end":452035,"line_start":152,"line_end":152,"column_start":12,"column_end":21},"name":"new_rgba8","qualname":"<DynamicImage>::new_rgba8","value":"pub fn new_rgba8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":451952,"byte_end":452014,"line_start":151,"line_end":151,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1957},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":452212,"byte_end":452221,"line_start":157,"line_end":157,"column_start":12,"column_end":21},"name":"new_bgra8","qualname":"<DynamicImage>::new_bgra8","value":"pub fn new_bgra8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGRA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of BGRA pixels.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":452138,"byte_end":452200,"line_start":156,"line_end":156,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1958},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":452397,"byte_end":452405,"line_start":162,"line_end":162,"column_start":12,"column_end":20},"name":"new_bgr8","qualname":"<DynamicImage>::new_bgr8","value":"pub fn new_bgr8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGR pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of BGR pixels.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":452324,"byte_end":452385,"line_start":161,"line_end":161,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1959},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":452581,"byte_end":452591,"line_start":167,"line_end":167,"column_start":12,"column_end":22},"name":"new_luma16","qualname":"<DynamicImage>::new_luma16","value":"pub fn new_luma16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey pixels.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":452507,"byte_end":452569,"line_start":166,"line_end":166,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1960},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":452795,"byte_end":452807,"line_start":173,"line_end":173,"column_start":12,"column_end":24},"name":"new_luma_a16","qualname":"<DynamicImage>::new_luma_a16","value":"pub fn new_luma_a16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":452695,"byte_end":452749,"line_start":171,"line_end":171,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":452754,"byte_end":452783,"line_start":172,"line_end":172,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1961},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":452985,"byte_end":452994,"line_start":178,"line_end":178,"column_start":12,"column_end":21},"name":"new_rgb16","qualname":"<DynamicImage>::new_rgb16","value":"pub fn new_rgb16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":452912,"byte_end":452973,"line_start":177,"line_end":177,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1962},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":453171,"byte_end":453181,"line_start":183,"line_end":183,"column_start":12,"column_end":22},"name":"new_rgba16","qualname":"<DynamicImage>::new_rgba16","value":"pub fn new_rgba16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":453097,"byte_end":453159,"line_start":182,"line_end":182,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1963},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":453347,"byte_end":453359,"line_start":188,"line_end":188,"column_start":12,"column_end":24},"name":"from_decoder","qualname":"<DynamicImage>::from_decoder","value":"pub fn from_decoder<'a,\n                    impl ImageDecoder<'a>: ImageDecoder>(impl ImageDecoder<'a>)\n-> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decodes an encoded image into a dynamic image.\n","sig":null,"attributes":[{"value":"/ Decodes an encoded image into a dynamic image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":453285,"byte_end":453335,"line_start":187,"line_end":187,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1966},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":453537,"byte_end":453543,"line_start":195,"line_end":195,"column_start":12,"column_end":18},"name":"to_rgb","qualname":"<DynamicImage>::to_rgb","value":"pub fn to_rgb(&Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":453476,"byte_end":453525,"line_start":194,"line_end":194,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1967},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":453712,"byte_end":453719,"line_start":202,"line_end":202,"column_start":12,"column_end":19},"name":"to_rgba","qualname":"<DynamicImage>::to_rgba","value":"pub fn to_rgba(&Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":453650,"byte_end":453700,"line_start":201,"line_end":201,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1968},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":453888,"byte_end":453894,"line_start":209,"line_end":209,"column_start":12,"column_end":18},"name":"to_bgr","qualname":"<DynamicImage>::to_bgr","value":"pub fn to_bgr(&Self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGR image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGR image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":453827,"byte_end":453876,"line_start":208,"line_end":208,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1969},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":454063,"byte_end":454070,"line_start":216,"line_end":216,"column_start":12,"column_end":19},"name":"to_bgra","qualname":"<DynamicImage>::to_bgra","value":"pub fn to_bgra(&Self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGRA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGRA image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":454001,"byte_end":454051,"line_start":215,"line_end":215,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1970},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":454239,"byte_end":454246,"line_start":223,"line_end":223,"column_start":12,"column_end":19},"name":"to_luma","qualname":"<DynamicImage>::to_luma","value":"pub fn to_luma(&Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":454178,"byte_end":454227,"line_start":222,"line_end":222,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1971},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":454416,"byte_end":454429,"line_start":230,"line_end":230,"column_start":12,"column_end":25},"name":"to_luma_alpha","qualname":"<DynamicImage>::to_luma_alpha","value":"pub fn to_luma_alpha(&Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":454354,"byte_end":454404,"line_start":229,"line_end":229,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1972},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":454721,"byte_end":454729,"line_start":240,"line_end":240,"column_start":12,"column_end":20},"name":"into_rgb","qualname":"<DynamicImage>::into_rgb","value":"pub fn into_rgb(Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGB image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":454542,"byte_end":454588,"line_start":236,"line_end":236,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":454593,"byte_end":454596,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":454601,"byte_end":454671,"line_start":238,"line_end":238,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":454676,"byte_end":454709,"line_start":239,"line_end":239,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1973},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":455046,"byte_end":455055,"line_start":251,"line_end":251,"column_start":12,"column_end":21},"name":"into_rgba","qualname":"<DynamicImage>::into_rgba","value":"pub fn into_rgba(Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGBA image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":454866,"byte_end":454913,"line_start":247,"line_end":247,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":454918,"byte_end":454921,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":454926,"byte_end":454996,"line_start":249,"line_end":249,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":455001,"byte_end":455034,"line_start":250,"line_end":250,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1974},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":455374,"byte_end":455382,"line_start":262,"line_end":262,"column_start":12,"column_end":20},"name":"into_bgr","qualname":"<DynamicImage>::into_bgr","value":"pub fn into_bgr(Self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGR image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGR image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":455195,"byte_end":455241,"line_start":258,"line_end":258,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":455246,"byte_end":455249,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":455254,"byte_end":455324,"line_start":260,"line_end":260,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":455329,"byte_end":455362,"line_start":261,"line_end":261,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1975},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":455699,"byte_end":455708,"line_start":273,"line_end":273,"column_start":12,"column_end":21},"name":"into_bgra","qualname":"<DynamicImage>::into_bgra","value":"pub fn into_bgra(Self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGRA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGRA image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":455519,"byte_end":455566,"line_start":269,"line_end":269,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":455571,"byte_end":455574,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":455579,"byte_end":455649,"line_start":271,"line_end":271,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":455654,"byte_end":455687,"line_start":272,"line_end":272,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1976},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":456028,"byte_end":456037,"line_start":284,"line_end":284,"column_start":12,"column_end":21},"name":"into_luma","qualname":"<DynamicImage>::into_luma","value":"pub fn into_luma(Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a Luma image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a Luma image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":455848,"byte_end":455895,"line_start":280,"line_end":280,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":455900,"byte_end":455903,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":455908,"byte_end":455978,"line_start":282,"line_end":282,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":455983,"byte_end":456016,"line_start":283,"line_end":283,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1977},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":456358,"byte_end":456373,"line_start":295,"line_end":295,"column_start":12,"column_end":27},"name":"into_luma_alpha","qualname":"<DynamicImage>::into_luma_alpha","value":"pub fn into_luma_alpha(Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a LumaA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a LumaA image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":456177,"byte_end":456225,"line_start":291,"line_end":291,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":456230,"byte_end":456233,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":456238,"byte_end":456308,"line_start":293,"line_end":293,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":456313,"byte_end":456346,"line_start":294,"line_end":294,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1978},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":456755,"byte_end":456759,"line_start":306,"line_end":306,"column_start":12,"column_end":16},"name":"crop","qualname":"<DynamicImage>::crop","value":"pub fn crop(&mut Self, u32, u32, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":456525,"byte_end":456596,"line_start":302,"line_end":302,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":456601,"byte_end":456604,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ Note: this method does *not* modify the object,","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":456609,"byte_end":456660,"line_start":304,"line_end":304,"column_start":5,"column_end":56}},{"value":"/ and its signature will be replaced with `crop_imm()`'s in the 0.24 release","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":456665,"byte_end":456743,"line_start":305,"line_end":305,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1979},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":457016,"byte_end":457024,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"crop_imm","qualname":"<DynamicImage>::crop_imm","value":"pub fn crop_imm(&Self, u32, u32, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.\n","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":456933,"byte_end":457004,"line_start":310,"line_end":310,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1980},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":457249,"byte_end":457256,"line_start":316,"line_end":316,"column_start":12,"column_end":19},"name":"as_rgb8","qualname":"<DynamicImage>::as_rgb8","value":"pub fn as_rgb8(&Self) -> Option<&RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGB image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":457194,"byte_end":457237,"line_start":315,"line_end":315,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1981},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":457471,"byte_end":457482,"line_start":324,"line_end":324,"column_start":12,"column_end":23},"name":"as_mut_rgb8","qualname":"<DynamicImage>::as_mut_rgb8","value":"pub fn as_mut_rgb8(&mut Self) -> Option<&mut RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGB image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":457408,"byte_end":457459,"line_start":323,"line_end":323,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1982},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":457701,"byte_end":457708,"line_start":332,"line_end":332,"column_start":12,"column_end":19},"name":"as_bgr8","qualname":"<DynamicImage>::as_bgr8","value":"pub fn as_bgr8(&Self) -> Option<&BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGR image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit BGR image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":457646,"byte_end":457689,"line_start":331,"line_end":331,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1983},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":457923,"byte_end":457934,"line_start":340,"line_end":340,"column_start":12,"column_end":23},"name":"as_mut_bgr8","qualname":"<DynamicImage>::as_mut_bgr8","value":"pub fn as_mut_bgr8(&mut Self) -> Option<&mut BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit BGR image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit BGR image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":457860,"byte_end":457911,"line_start":339,"line_end":339,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1984},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":458154,"byte_end":458162,"line_start":348,"line_end":348,"column_start":12,"column_end":20},"name":"as_rgba8","qualname":"<DynamicImage>::as_rgba8","value":"pub fn as_rgba8(&Self) -> Option<&RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGBA image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":458098,"byte_end":458142,"line_start":347,"line_end":347,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1985},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":458380,"byte_end":458392,"line_start":356,"line_end":356,"column_start":12,"column_end":24},"name":"as_mut_rgba8","qualname":"<DynamicImage>::as_mut_rgba8","value":"pub fn as_mut_rgba8(&mut Self) -> Option<&mut RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":458316,"byte_end":458368,"line_start":355,"line_end":355,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1986},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":458614,"byte_end":458622,"line_start":364,"line_end":364,"column_start":12,"column_end":20},"name":"as_bgra8","qualname":"<DynamicImage>::as_bgra8","value":"pub fn as_bgra8(&Self) -> Option<&BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGRA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit BGRA image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":458558,"byte_end":458602,"line_start":363,"line_end":363,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1987},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":458840,"byte_end":458852,"line_start":372,"line_end":372,"column_start":12,"column_end":24},"name":"as_mut_bgra8","qualname":"<DynamicImage>::as_mut_bgra8","value":"pub fn as_mut_bgra8(&mut Self) -> Option<&mut BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":458776,"byte_end":458828,"line_start":371,"line_end":371,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1988},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":459079,"byte_end":459087,"line_start":380,"line_end":380,"column_start":12,"column_end":20},"name":"as_luma8","qualname":"<DynamicImage>::as_luma8","value":"pub fn as_luma8(&Self) -> Option<&GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":459018,"byte_end":459067,"line_start":379,"line_end":379,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1989},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":459310,"byte_end":459322,"line_start":388,"line_end":388,"column_start":12,"column_end":24},"name":"as_mut_luma8","qualname":"<DynamicImage>::as_mut_luma8","value":"pub fn as_mut_luma8(&mut Self) -> Option<&mut GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":459241,"byte_end":459298,"line_start":387,"line_end":387,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1990},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":459571,"byte_end":459585,"line_start":396,"line_end":396,"column_start":12,"column_end":26},"name":"as_luma_alpha8","qualname":"<DynamicImage>::as_luma_alpha8","value":"pub fn as_luma_alpha8(&Self) -> Option<&GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":459488,"byte_end":459559,"line_start":395,"line_end":395,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1991},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":459836,"byte_end":459854,"line_start":404,"line_end":404,"column_start":12,"column_end":30},"name":"as_mut_luma_alpha8","qualname":"<DynamicImage>::as_mut_luma_alpha8","value":"pub fn as_mut_luma_alpha8(&mut Self) -> Option<&mut GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":459745,"byte_end":459824,"line_start":403,"line_end":403,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1992},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":460082,"byte_end":460090,"line_start":412,"line_end":412,"column_start":12,"column_end":20},"name":"as_rgb16","qualname":"<DynamicImage>::as_rgb16","value":"pub fn as_rgb16(&Self) -> Option<&Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGB image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":460026,"byte_end":460070,"line_start":411,"line_end":411,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1993},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":460309,"byte_end":460321,"line_start":420,"line_end":420,"column_start":12,"column_end":24},"name":"as_mut_rgb16","qualname":"<DynamicImage>::as_mut_rgb16","value":"pub fn as_mut_rgb16(&mut Self) -> Option<&mut Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGB image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":460245,"byte_end":460297,"line_start":419,"line_end":419,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1994},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":460545,"byte_end":460554,"line_start":428,"line_end":428,"column_start":12,"column_end":21},"name":"as_rgba16","qualname":"<DynamicImage>::as_rgba16","value":"pub fn as_rgba16(&Self) -> Option<&Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGBA image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":460488,"byte_end":460533,"line_start":427,"line_end":427,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1995},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":460776,"byte_end":460789,"line_start":436,"line_end":436,"column_start":12,"column_end":25},"name":"as_mut_rgba16","qualname":"<DynamicImage>::as_mut_rgba16","value":"pub fn as_mut_rgba16(&mut Self) -> Option<&mut Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGBA image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":460711,"byte_end":460764,"line_start":435,"line_end":435,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1996},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":461020,"byte_end":461029,"line_start":444,"line_end":444,"column_start":12,"column_end":21},"name":"as_luma16","qualname":"<DynamicImage>::as_luma16","value":"pub fn as_luma16(&Self) -> Option<&Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":460958,"byte_end":461008,"line_start":443,"line_end":443,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1997},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":461256,"byte_end":461269,"line_start":452,"line_end":452,"column_start":12,"column_end":25},"name":"as_mut_luma16","qualname":"<DynamicImage>::as_mut_luma16","value":"pub fn as_mut_luma16(&mut Self) -> Option<&mut Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":461186,"byte_end":461244,"line_start":451,"line_end":451,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1998},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":461522,"byte_end":461537,"line_start":460,"line_end":460,"column_start":12,"column_end":27},"name":"as_luma_alpha16","qualname":"<DynamicImage>::as_luma_alpha16","value":"pub fn as_luma_alpha16(&Self) -> Option<&GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":461438,"byte_end":461510,"line_start":459,"line_end":459,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1999},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":461792,"byte_end":461811,"line_start":468,"line_end":468,"column_start":12,"column_end":31},"name":"as_mut_luma_alpha16","qualname":"<DynamicImage>::as_mut_luma_alpha16","value":"pub fn as_mut_luma_alpha16(&mut Self) -> Option<&mut GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":461700,"byte_end":461780,"line_start":467,"line_end":467,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2000},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":462070,"byte_end":462088,"line_start":476,"line_end":476,"column_start":12,"column_end":30},"name":"as_flat_samples_u8","qualname":"<DynamicImage>::as_flat_samples_u8","value":"pub fn as_flat_samples_u8(&Self) -> Option<FlatSamples<&[u8]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 8 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 8 bit per channel images.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":461986,"byte_end":462058,"line_start":475,"line_end":475,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2001},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":462722,"byte_end":462741,"line_start":489,"line_end":489,"column_start":12,"column_end":31},"name":"as_flat_samples_u16","qualname":"<DynamicImage>::as_flat_samples_u16","value":"pub fn as_flat_samples_u16(&Self) -> Option<FlatSamples<&[u16]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 16 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 16 bit per channel images.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":462637,"byte_end":462710,"line_start":488,"line_end":488,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2002},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":463208,"byte_end":463216,"line_start":500,"line_end":500,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<DynamicImage>::to_bytes","value":"pub fn to_bytes(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return this image's pixels as a byte vector.\n","sig":null,"attributes":[{"value":"/ Return this image's pixels as a byte vector.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":463148,"byte_end":463196,"line_start":499,"line_end":499,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2003},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":463324,"byte_end":463329,"line_start":505,"line_end":505,"column_start":12,"column_end":17},"name":"color","qualname":"<DynamicImage>::color","value":"pub fn color(&Self) -> color::ColorType","parent":null,"children":[],"decl_id":null,"docs":" Return this image's color type.\n","sig":null,"attributes":[{"value":"/ Return this image's color type.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":463277,"byte_end":463312,"line_start":504,"line_end":504,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2004},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":464133,"byte_end":464142,"line_start":521,"line_end":521,"column_start":12,"column_end":21},"name":"grayscale","qualname":"<DynamicImage>::grayscale","value":"pub fn grayscale(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a grayscale version of this image.\n","sig":null,"attributes":[{"value":"/ Return a grayscale version of this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":464076,"byte_end":464121,"line_start":520,"line_end":520,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2005},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":465248,"byte_end":465254,"line_start":538,"line_end":538,"column_start":12,"column_end":18},"name":"invert","qualname":"<DynamicImage>::invert","value":"pub fn invert(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Invert the colors of this image.\n This method operates inplace.\n","sig":null,"attributes":[{"value":"/ Invert the colors of this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":465162,"byte_end":465198,"line_start":536,"line_end":536,"column_start":5,"column_end":41}},{"value":"/ This method operates inplace.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":465203,"byte_end":465236,"line_start":537,"line_end":537,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2006},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":465618,"byte_end":465624,"line_start":546,"line_end":546,"column_start":12,"column_end":18},"name":"resize","qualname":"<DynamicImage>::resize","value":"pub fn resize(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":465341,"byte_end":465400,"line_start":542,"line_end":542,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":465405,"byte_end":465468,"line_start":543,"line_end":543,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":465473,"byte_end":465535,"line_start":544,"line_end":544,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by ```nwidth``` and ```nheight```.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":465540,"byte_end":465606,"line_start":545,"line_end":545,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2007},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":466088,"byte_end":466100,"line_start":556,"line_end":556,"column_start":12,"column_end":24},"name":"resize_exact","qualname":"<DynamicImage>::resize_exact","value":"pub fn resize_exact(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":465886,"byte_end":465945,"line_start":553,"line_end":553,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":465950,"byte_end":466006,"line_start":554,"line_end":554,"column_start":5,"column_end":61}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":466011,"byte_end":466076,"line_start":555,"line_end":555,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2008},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":466791,"byte_end":466800,"line_start":573,"line_end":573,"column_start":12,"column_end":21},"name":"thumbnail","qualname":"<DynamicImage>::thumbnail","value":"pub fn thumbnail(&Self, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to fit within a specific size.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.","sig":null,"attributes":[{"value":"/ Scale this image down to fit within a specific size.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":466316,"byte_end":466372,"line_start":565,"line_end":565,"column_start":5,"column_end":61}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":466377,"byte_end":466440,"line_start":566,"line_end":566,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":466445,"byte_end":466507,"line_start":567,"line_end":567,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by ```nwidth``` and ```nheight```.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":466512,"byte_end":466578,"line_start":568,"line_end":568,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":466583,"byte_end":466586,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":466591,"byte_end":466654,"line_start":570,"line_end":570,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":466659,"byte_end":466709,"line_start":571,"line_end":571,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":466714,"byte_end":466779,"line_start":572,"line_end":572,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2009},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":467408,"byte_end":467423,"line_start":585,"line_end":585,"column_start":12,"column_end":27},"name":"thumbnail_exact","qualname":"<DynamicImage>::thumbnail_exact","value":"pub fn thumbnail_exact(&Self, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to a specific size.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions.\n This method uses a fast integer algorithm where each source\n pixel contributes to exactly one target pixel.\n May give aliasing artifacts if new size is close to old size.\n","sig":null,"attributes":[{"value":"/ Scale this image down to a specific size.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":467026,"byte_end":467071,"line_start":579,"line_end":579,"column_start":5,"column_end":50}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":467076,"byte_end":467132,"line_start":580,"line_end":580,"column_start":5,"column_end":61}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":467137,"byte_end":467203,"line_start":581,"line_end":581,"column_start":5,"column_end":71}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":467208,"byte_end":467271,"line_start":582,"line_end":582,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":467276,"byte_end":467326,"line_start":583,"line_end":583,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":467331,"byte_end":467396,"line_start":584,"line_end":584,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2010},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":467943,"byte_end":467957,"line_start":595,"line_end":595,"column_start":12,"column_end":26},"name":"resize_to_fill","qualname":"<DynamicImage>::resize_to_fill","value":"pub fn resize_to_fill(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the larger (relative to aspect ratio) of the bounds\n specified by ```nwidth``` and ```nheight```, then cropped to\n fit within the other bound.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":467565,"byte_end":467624,"line_start":589,"line_end":589,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":467629,"byte_end":467692,"line_start":590,"line_end":590,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":467697,"byte_end":467759,"line_start":591,"line_end":591,"column_start":5,"column_end":67}},{"value":"/ within the larger (relative to aspect ratio) of the bounds","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":467764,"byte_end":467826,"line_start":592,"line_end":592,"column_start":5,"column_end":67}},{"value":"/ specified by ```nwidth``` and ```nheight```, then cropped to","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":467831,"byte_end":467895,"line_start":593,"line_end":593,"column_start":5,"column_end":69}},{"value":"/ fit within the other bound.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":467900,"byte_end":467931,"line_start":594,"line_end":594,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2011},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":468777,"byte_end":468781,"line_start":618,"line_end":618,"column_start":12,"column_end":16},"name":"blur","qualname":"<DynamicImage>::blur","value":"pub fn blur(&Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on this image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":468665,"byte_end":468708,"line_start":616,"line_end":616,"column_start":5,"column_end":48}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":468713,"byte_end":468765,"line_start":617,"line_end":617,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2012},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":469159,"byte_end":469168,"line_start":627,"line_end":627,"column_start":12,"column_end":21},"name":"unsharpen","qualname":"<DynamicImage>::unsharpen","value":"pub fn unsharpen(&Self, f32, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on this image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is a control of how much to sharpen.","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":468893,"byte_end":468938,"line_start":622,"line_end":622,"column_start":5,"column_end":50}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":468943,"byte_end":468994,"line_start":623,"line_end":623,"column_start":5,"column_end":56}},{"value":"/ ```threshold``` is a control of how much to sharpen.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":468999,"byte_end":469055,"line_start":624,"line_end":624,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":469060,"byte_end":469063,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":469068,"byte_end":469147,"line_start":626,"line_end":626,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2013},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":469377,"byte_end":469386,"line_start":632,"line_end":632,"column_start":12,"column_end":21},"name":"filter3x3","qualname":"<DynamicImage>::filter3x3","value":"pub fn filter3x3(&Self, &[f32]) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Filters this image with the specified 3x3 kernel.\n","sig":null,"attributes":[{"value":"/ Filters this image with the specified 3x3 kernel.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":469312,"byte_end":469365,"line_start":631,"line_end":631,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2014},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":469796,"byte_end":469811,"line_start":643,"line_end":643,"column_start":12,"column_end":27},"name":"adjust_contrast","qualname":"<DynamicImage>::adjust_contrast","value":"pub fn adjust_contrast(&Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of this image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":469593,"byte_end":469631,"line_start":640,"line_end":640,"column_start":5,"column_end":43}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":469636,"byte_end":469695,"line_start":641,"line_end":641,"column_start":5,"column_end":64}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":469700,"byte_end":469784,"line_start":642,"line_end":642,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2015},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":470111,"byte_end":470119,"line_start":650,"line_end":650,"column_start":12,"column_end":20},"name":"brighten","qualname":"<DynamicImage>::brighten","value":"pub fn brighten(&Self, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Brighten the pixels of this image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the pixels of this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":469919,"byte_end":469957,"line_start":647,"line_end":647,"column_start":5,"column_end":43}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":469962,"byte_end":470018,"line_start":648,"line_end":648,"column_start":5,"column_end":61}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":470023,"byte_end":470099,"line_start":649,"line_end":649,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2016},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":470467,"byte_end":470476,"line_start":658,"line_end":658,"column_start":12,"column_end":21},"name":"huerotate","qualname":"<DynamicImage>::huerotate","value":"pub fn huerotate(&Self, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":470235,"byte_end":470269,"line_start":654,"line_end":654,"column_start":5,"column_end":39}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":470274,"byte_end":470325,"line_start":655,"line_end":655,"column_start":5,"column_end":56}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":470330,"byte_end":470399,"line_start":656,"line_end":656,"column_start":5,"column_end":74}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":470404,"byte_end":470455,"line_start":657,"line_end":657,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2017},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":470635,"byte_end":470640,"line_start":663,"line_end":663,"column_start":12,"column_end":17},"name":"flipv","qualname":"<DynamicImage>::flipv","value":"pub fn flipv(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image vertically\n","sig":null,"attributes":[{"value":"/ Flip this image vertically","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":470593,"byte_end":470623,"line_start":662,"line_end":662,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2018},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":470786,"byte_end":470791,"line_start":668,"line_end":668,"column_start":12,"column_end":17},"name":"fliph","qualname":"<DynamicImage>::fliph","value":"pub fn fliph(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image horizontally\n","sig":null,"attributes":[{"value":"/ Flip this image horizontally","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":470742,"byte_end":470774,"line_start":667,"line_end":667,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":2019},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":470950,"byte_end":470958,"line_start":673,"line_end":673,"column_start":12,"column_end":20},"name":"rotate90","qualname":"<DynamicImage>::rotate90","value":"pub fn rotate90(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 90 degrees clockwise.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":470895,"byte_end":470938,"line_start":672,"line_end":672,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2020},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":471111,"byte_end":471120,"line_start":678,"line_end":678,"column_start":12,"column_end":21},"name":"rotate180","qualname":"<DynamicImage>::rotate180","value":"pub fn rotate180(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 180 degrees clockwise.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":471055,"byte_end":471099,"line_start":677,"line_end":677,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2021},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":471274,"byte_end":471283,"line_start":683,"line_end":683,"column_start":12,"column_end":21},"name":"rotate270","qualname":"<DynamicImage>::rotate270","value":"pub fn rotate270(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 270 degrees clockwise.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":471218,"byte_end":471262,"line_start":682,"line_end":682,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2022},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":471438,"byte_end":471446,"line_start":688,"line_end":688,"column_start":12,"column_end":20},"name":"write_to","qualname":"<DynamicImage>::write_to","value":"pub fn write_to<W: Write, F: Into<ImageOutputFormat>>(&Self, &mut W, F)\n-> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode this image and write it to ```w```\n","sig":null,"attributes":[{"value":"/ Encode this image and write it to ```w```","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":471381,"byte_end":471426,"line_start":687,"line_end":687,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2025},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":475358,"byte_end":475362,"line_start":792,"line_end":792,"column_start":12,"column_end":16},"name":"save","qualname":"<DynamicImage>::save","value":"pub fn save<Q>(&Self, Q) -> ImageResult<()> where Q: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":475224,"byte_end":475277,"line_start":789,"line_end":789,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":475282,"byte_end":475285,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":475290,"byte_end":475346,"line_start":791,"line_end":791,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2027},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":475734,"byte_end":475750,"line_start":806,"line_end":806,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<DynamicImage>::save_with_format","value":"pub fn save_with_format<Q>(&Self, Q, ImageFormat) -> ImageResult<()> where\nQ: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":475527,"byte_end":475582,"line_start":801,"line_end":801,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":475587,"byte_end":475612,"line_start":802,"line_end":802,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":475617,"byte_end":475620,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":475625,"byte_end":475697,"line_start":804,"line_end":804,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":475702,"byte_end":475722,"line_start":805,"line_end":805,"column_start":5,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":2047},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":482612,"byte_end":482616,"line_start":984,"line_end":984,"column_start":8,"column_end":12},"name":"open","qualname":"::dynimage::open","value":"pub fn open<P>(P) -> ImageResult<DynamicImage> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Open the image located at the path specified.\n The image's format is determined from the path's file extension.","sig":null,"attributes":[{"value":"/ Open the image located at the path specified.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":482310,"byte_end":482359,"line_start":977,"line_end":977,"column_start":1,"column_end":50}},{"value":"/ The image's format is determined from the path's file extension.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":482360,"byte_end":482428,"line_start":978,"line_end":978,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":482429,"byte_end":482432,"line_start":979,"line_end":979,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":482433,"byte_end":482529,"line_start":980,"line_end":980,"column_start":1,"column_end":97}},{"value":"/ content before its path.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":482530,"byte_end":482558,"line_start":981,"line_end":981,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":482559,"byte_end":482562,"line_start":982,"line_end":982,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":482563,"byte_end":482604,"line_start":983,"line_end":983,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":2049},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":483171,"byte_end":483187,"line_start":999,"line_end":999,"column_start":8,"column_end":24},"name":"image_dimensions","qualname":"::dynimage::image_dimensions","value":"pub fn image_dimensions<P>(P) -> ImageResult<(u32, u32)> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Read the dimensions of the image located at the specified path.\n This is faster than fully loading the image and then getting its dimensions.","sig":null,"attributes":[{"value":"/ Read the dimensions of the image located at the specified path.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":482806,"byte_end":482873,"line_start":992,"line_end":992,"column_start":1,"column_end":68}},{"value":"/ This is faster than fully loading the image and then getting its dimensions.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":482874,"byte_end":482954,"line_start":993,"line_end":993,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":482955,"byte_end":482958,"line_start":994,"line_end":994,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":482959,"byte_end":483055,"line_start":995,"line_end":995,"column_start":1,"column_end":97}},{"value":"/ content before its path or manually supplying the format.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":483056,"byte_end":483117,"line_start":996,"line_end":996,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":483118,"byte_end":483121,"line_start":997,"line_end":997,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":483122,"byte_end":483163,"line_start":998,"line_end":998,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":2051},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":483762,"byte_end":483773,"line_start":1014,"line_end":1014,"column_start":8,"column_end":19},"name":"save_buffer","qualname":"::dynimage::save_buffer","value":"pub fn save_buffer<P>(P, &[u8], u32, u32, color::ColorType) -> ImageResult<()>\nwhere P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":483387,"byte_end":483449,"line_start":1007,"line_end":1007,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":483450,"byte_end":483453,"line_start":1008,"line_end":1008,"column_start":1,"column_end":4}},{"value":"/ The image format is derived from the file extension. The buffer is assumed to have","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":483454,"byte_end":483540,"line_start":1009,"line_end":1009,"column_start":1,"column_end":87}},{"value":"/ the correct format according to the specified color type.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":483541,"byte_end":483602,"line_start":1010,"line_end":1010,"column_start":1,"column_end":62}},{"value":"/ This will lead to corrupted files if the buffer contains malformed data. Currently only","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":483604,"byte_end":483695,"line_start":1012,"line_end":1012,"column_start":1,"column_end":92}},{"value":"/ jpeg, png, ico, pnm, bmp and tiff files are supported.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":483696,"byte_end":483754,"line_start":1013,"line_end":1013,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":2053},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":484427,"byte_end":484450,"line_start":1036,"line_end":1036,"column_start":8,"column_end":31},"name":"save_buffer_with_format","qualname":"::dynimage::save_buffer_with_format","value":"pub fn save_buffer_with_format<P>(P, &[u8], u32, u32, color::ColorType,\n                                  ImageFormat) -> ImageResult<()> where\nP: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified\n in the specified format.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":484079,"byte_end":484140,"line_start":1028,"line_end":1028,"column_start":1,"column_end":62}},{"value":"/ in the specified format.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":484141,"byte_end":484169,"line_start":1029,"line_end":1029,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":484170,"byte_end":484173,"line_start":1030,"line_end":1030,"column_start":1,"column_end":4}},{"value":"/ The buffer is assumed to have the correct format according","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":484174,"byte_end":484236,"line_start":1031,"line_end":1031,"column_start":1,"column_end":63}},{"value":"/ to the specified color type.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":484237,"byte_end":484269,"line_start":1032,"line_end":1032,"column_start":1,"column_end":33}},{"value":"/ This will lead to corrupted files if the buffer contains","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":484270,"byte_end":484330,"line_start":1033,"line_end":1033,"column_start":1,"column_end":61}},{"value":"/ malformed data. Currently only jpeg, png, ico, bmp and","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":484331,"byte_end":484389,"line_start":1034,"line_end":1034,"column_start":1,"column_end":59}},{"value":"/ tiff files are supported.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":484390,"byte_end":484419,"line_start":1035,"line_end":1035,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":2055},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":485013,"byte_end":485029,"line_start":1059,"line_end":1059,"column_start":8,"column_end":24},"name":"load_from_memory","qualname":"::dynimage::load_from_memory","value":"pub fn load_from_memory(&[u8]) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":484769,"byte_end":484809,"line_start":1051,"line_end":1051,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":484810,"byte_end":484813,"line_start":1052,"line_end":1052,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":484814,"byte_end":484865,"line_start":1053,"line_end":1053,"column_start":1,"column_end":52}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":484866,"byte_end":484908,"line_start":1054,"line_end":1054,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":484909,"byte_end":484912,"line_start":1055,"line_end":1055,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":484913,"byte_end":484959,"line_start":1056,"line_end":1056,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":484960,"byte_end":484963,"line_start":1057,"line_end":1057,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":484964,"byte_end":485005,"line_start":1058,"line_end":1058,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":2056},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":485511,"byte_end":485539,"line_start":1074,"line_end":1074,"column_start":8,"column_end":36},"name":"load_from_memory_with_format","qualname":"::dynimage::load_from_memory_with_format","value":"pub fn load_from_memory_with_format(&[u8], ImageFormat)\n-> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":485184,"byte_end":485224,"line_start":1064,"line_end":1064,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":485225,"byte_end":485228,"line_start":1065,"line_end":1065,"column_start":1,"column_end":4}},{"value":"/ This is just a simple wrapper that constructs an `std::io::Cursor` around the buffer and then","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":485229,"byte_end":485326,"line_start":1066,"line_end":1066,"column_start":1,"column_end":98}},{"value":"/ calls `load` with that reader.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":485327,"byte_end":485361,"line_start":1067,"line_end":1067,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":485362,"byte_end":485365,"line_start":1068,"line_end":1068,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":485366,"byte_end":485412,"line_start":1069,"line_end":1069,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":485413,"byte_end":485416,"line_start":1070,"line_end":1070,"column_start":1,"column_end":4}},{"value":"/ [`load`]: fn.load.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":485417,"byte_end":485443,"line_start":1071,"line_end":1071,"column_start":1,"column_end":27}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":485444,"byte_end":485485,"line_start":1072,"line_end":1072,"column_start":1,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":485486,"byte_end":485503,"line_start":1073,"line_end":1073,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3659},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490262,"byte_end":490265,"line_start":25,"line_end":25,"column_start":5,"column_end":8},"name":"Png","qualname":"::image::ImageFormat::Png","value":"ImageFormat::Png","parent":{"krate":0,"index":3658},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"/ An Image in PNG Format","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490231,"byte_end":490257,"line_start":24,"line_end":24,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3661},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490304,"byte_end":490308,"line_start":28,"line_end":28,"column_start":5,"column_end":9},"name":"Jpeg","qualname":"::image::ImageFormat::Jpeg","value":"ImageFormat::Jpeg","parent":{"krate":0,"index":3658},"children":[],"decl_id":null,"docs":" An Image in JPEG Format\n","sig":null,"attributes":[{"value":"/ An Image in JPEG Format","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490272,"byte_end":490299,"line_start":27,"line_end":27,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3663},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490346,"byte_end":490349,"line_start":31,"line_end":31,"column_start":5,"column_end":8},"name":"Gif","qualname":"::image::ImageFormat::Gif","value":"ImageFormat::Gif","parent":{"krate":0,"index":3658},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"/ An Image in GIF Format","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490315,"byte_end":490341,"line_start":30,"line_end":30,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3665},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490388,"byte_end":490392,"line_start":34,"line_end":34,"column_start":5,"column_end":9},"name":"WebP","qualname":"::image::ImageFormat::WebP","value":"ImageFormat::WebP","parent":{"krate":0,"index":3658},"children":[],"decl_id":null,"docs":" An Image in WEBP Format\n","sig":null,"attributes":[{"value":"/ An Image in WEBP Format","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490356,"byte_end":490383,"line_start":33,"line_end":33,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3667},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490438,"byte_end":490441,"line_start":37,"line_end":37,"column_start":5,"column_end":8},"name":"Pnm","qualname":"::image::ImageFormat::Pnm","value":"ImageFormat::Pnm","parent":{"krate":0,"index":3658},"children":[],"decl_id":null,"docs":" An Image in general PNM Format\n","sig":null,"attributes":[{"value":"/ An Image in general PNM Format","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490399,"byte_end":490433,"line_start":36,"line_end":36,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3669},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490480,"byte_end":490484,"line_start":40,"line_end":40,"column_start":5,"column_end":9},"name":"Tiff","qualname":"::image::ImageFormat::Tiff","value":"ImageFormat::Tiff","parent":{"krate":0,"index":3658},"children":[],"decl_id":null,"docs":" An Image in TIFF Format\n","sig":null,"attributes":[{"value":"/ An Image in TIFF Format","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490448,"byte_end":490475,"line_start":39,"line_end":39,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3671},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490522,"byte_end":490525,"line_start":43,"line_end":43,"column_start":5,"column_end":8},"name":"Tga","qualname":"::image::ImageFormat::Tga","value":"ImageFormat::Tga","parent":{"krate":0,"index":3658},"children":[],"decl_id":null,"docs":" An Image in TGA Format\n","sig":null,"attributes":[{"value":"/ An Image in TGA Format","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490491,"byte_end":490517,"line_start":42,"line_end":42,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3673},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490563,"byte_end":490566,"line_start":46,"line_end":46,"column_start":5,"column_end":8},"name":"Dds","qualname":"::image::ImageFormat::Dds","value":"ImageFormat::Dds","parent":{"krate":0,"index":3658},"children":[],"decl_id":null,"docs":" An Image in DDS Format\n","sig":null,"attributes":[{"value":"/ An Image in DDS Format","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490532,"byte_end":490558,"line_start":45,"line_end":45,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3675},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490604,"byte_end":490607,"line_start":49,"line_end":49,"column_start":5,"column_end":8},"name":"Bmp","qualname":"::image::ImageFormat::Bmp","value":"ImageFormat::Bmp","parent":{"krate":0,"index":3658},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"/ An Image in BMP Format","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490573,"byte_end":490599,"line_start":48,"line_end":48,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3677},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490645,"byte_end":490648,"line_start":52,"line_end":52,"column_start":5,"column_end":8},"name":"Ico","qualname":"::image::ImageFormat::Ico","value":"ImageFormat::Ico","parent":{"krate":0,"index":3658},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"/ An Image in ICO Format","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490614,"byte_end":490640,"line_start":51,"line_end":51,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3679},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490695,"byte_end":490698,"line_start":55,"line_end":55,"column_start":5,"column_end":8},"name":"Hdr","qualname":"::image::ImageFormat::Hdr","value":"ImageFormat::Hdr","parent":{"krate":0,"index":3658},"children":[],"decl_id":null,"docs":" An Image in Radiance HDR Format\n","sig":null,"attributes":[{"value":"/ An Image in Radiance HDR Format","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490655,"byte_end":490690,"line_start":54,"line_end":54,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3681},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490741,"byte_end":490749,"line_start":58,"line_end":58,"column_start":5,"column_end":13},"name":"Farbfeld","qualname":"::image::ImageFormat::Farbfeld","value":"ImageFormat::Farbfeld","parent":{"krate":0,"index":3658},"children":[],"decl_id":null,"docs":" An Image in farbfeld Format\n","sig":null,"attributes":[{"value":"/ An Image in farbfeld Format","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490705,"byte_end":490736,"line_start":57,"line_end":57,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3683},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490775,"byte_end":490790,"line_start":61,"line_end":61,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::image::ImageFormat::__NonExhaustive","value":"ImageFormat::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":3658},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3658},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490213,"byte_end":490224,"line_start":23,"line_end":23,"column_start":10,"column_end":21},"name":"ImageFormat","qualname":"::image::ImageFormat","value":"pub enum ImageFormat {\n\n    /// An Image in PNG Format\n    Png,\n\n    /// An Image in JPEG Format\n    Jpeg,\n\n    /// An Image in GIF Format\n    Gif,\n\n    /// An Image in WEBP Format\n    WebP,\n\n    /// An Image in general PNM Format\n    Pnm,\n\n    /// An Image in TIFF Format\n    Tiff,\n\n    /// An Image in TGA Format\n    Tga,\n\n    /// An Image in DDS Format\n    Dds,\n\n    /// An Image in BMP Format\n    Bmp,\n\n    /// An Image in ICO Format\n    Ico,\n\n    /// An Image in Radiance HDR Format\n    Hdr,\n\n    /// An Image in farbfeld Format\n    Farbfeld,\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":3659},{"krate":0,"index":3661},{"krate":0,"index":3663},{"krate":0,"index":3665},{"krate":0,"index":3667},{"krate":0,"index":3669},{"krate":0,"index":3671},{"krate":0,"index":3673},{"krate":0,"index":3675},{"krate":0,"index":3677},{"krate":0,"index":3679},{"krate":0,"index":3681},{"krate":0,"index":3683}],"decl_id":null,"docs":" An enumeration of supported image formats.\n Not all formats support both encoding and decoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490050,"byte_end":490096,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"/ Not all formats support both encoding and decoding.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490097,"byte_end":490152,"line_start":21,"line_end":21,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2082},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490932,"byte_end":490941,"line_start":66,"line_end":66,"column_start":12,"column_end":21},"name":"from_path","qualname":"<ImageFormat>::from_path","value":"pub fn from_path<P>(P) -> ImageResult<Self> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Return the image format specified by the path's file extension.\n","sig":null,"attributes":[{"value":"/ Return the image format specified by the path's file extension.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490853,"byte_end":490920,"line_start":65,"line_end":65,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2084},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":491792,"byte_end":491806,"line_start":81,"line_end":81,"column_start":12,"column_end":26},"name":"extensions_str","qualname":"<ImageFormat>::extensions_str","value":"pub fn extensions_str(Self) -> &'static [&'static str]","parent":null,"children":[],"decl_id":null,"docs":" Return a list of applicable extensions for this format.","sig":null,"attributes":[{"value":"/ Return a list of applicable extensions for this format.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":491202,"byte_end":491261,"line_start":72,"line_end":72,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":491266,"byte_end":491269,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ All currently recognized image formats specify at least on extension but for future","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":491274,"byte_end":491361,"line_start":74,"line_end":74,"column_start":5,"column_end":92}},{"value":"/ compatibility you should not rely on this fact. The list may be empty if the format has no","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":491366,"byte_end":491460,"line_start":75,"line_end":75,"column_start":5,"column_end":99}},{"value":"/ recognized file representation, for example in case it is used as a purely transient memory","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":491465,"byte_end":491560,"line_start":76,"line_end":76,"column_start":5,"column_end":100}},{"value":"/ format.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":491565,"byte_end":491576,"line_start":77,"line_end":77,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":491581,"byte_end":491584,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ The method name `extensions` remains reserved for introducing another method in the future","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":491589,"byte_end":491683,"line_start":79,"line_end":79,"column_start":5,"column_end":99}},{"value":"/ that yields a slice of `OsStr` which is blocked by several features of const evaluation.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":491688,"byte_end":491780,"line_start":80,"line_end":80,"column_start":5,"column_end":97}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3702},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":492700,"byte_end":492703,"line_start":105,"line_end":105,"column_start":5,"column_end":8},"name":"Png","qualname":"::image::ImageOutputFormat::Png","value":"ImageOutputFormat::Png","parent":{"krate":0,"index":3701},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":492641,"byte_end":492664,"line_start":103,"line_end":103,"column_start":5,"column_end":28}},{"value":"/ An Image in PNG Format","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":492669,"byte_end":492695,"line_start":104,"line_end":104,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3704},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":492794,"byte_end":492798,"line_start":109,"line_end":109,"column_start":5,"column_end":9},"name":"Jpeg","qualname":"::image::ImageOutputFormat::Jpeg","value":"ImageOutputFormat::Jpeg(u8)","parent":{"krate":0,"index":3701},"children":[],"decl_id":null,"docs":" An Image in JPEG Format with specified quality\n","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":492710,"byte_end":492734,"line_start":107,"line_end":107,"column_start":5,"column_end":29}},{"value":"/ An Image in JPEG Format with specified quality","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":492739,"byte_end":492789,"line_start":108,"line_end":108,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3707},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":493099,"byte_end":493102,"line_start":125,"line_end":125,"column_start":5,"column_end":8},"name":"Bmp","qualname":"::image::ImageOutputFormat::Bmp","value":"ImageOutputFormat::Bmp","parent":{"krate":0,"index":3701},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":493040,"byte_end":493063,"line_start":123,"line_end":123,"column_start":5,"column_end":28}},{"value":"/ An Image in BMP Format","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":493068,"byte_end":493094,"line_start":124,"line_end":124,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3709},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":493507,"byte_end":493518,"line_start":138,"line_end":138,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::image::ImageOutputFormat::Unsupported","value":"ImageOutputFormat::Unsupported(String)","parent":{"krate":0,"index":3701},"children":[],"decl_id":null,"docs":" A value for signalling an error: An unsupported format was requested\n","sig":null,"attributes":[{"value":"/ A value for signalling an error: An unsupported format was requested","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":493262,"byte_end":493334,"line_start":135,"line_end":135,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3712},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":493552,"byte_end":493567,"line_start":141,"line_end":141,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::image::ImageOutputFormat::__NonExhaustive","value":"ImageOutputFormat::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":3701},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3701},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":492617,"byte_end":492634,"line_start":102,"line_end":102,"column_start":10,"column_end":27},"name":"ImageOutputFormat","qualname":"::image::ImageOutputFormat","value":"pub enum ImageOutputFormat {\n\n    #[cfg(feature = \"png\")]\n    /// An Image in PNG Format\n    Png,\n\n    #[cfg(feature = \"jpeg\")]\n    /// An Image in JPEG Format with specified quality\n    Jpeg(u8),\n\n    #[cfg(feature = \"bmp\")]\n    /// An Image in BMP Format\n    Bmp,\n\n    /// A value for signalling an error: An unsupported format was requested\n    Unsupported(String),\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":3702},{"krate":0,"index":3704},{"krate":0,"index":3707},{"krate":0,"index":3709},{"krate":0,"index":3712}],"decl_id":null,"docs":" An enumeration of supported image formats for encoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats for encoding.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":492509,"byte_end":492568,"line_start":100,"line_end":100,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":3726},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":502783,"byte_end":502791,"line_start":360,"line_end":360,"column_start":12,"column_end":20},"name":"Progress","qualname":"::image::Progress","value":"Progress {  }","parent":null,"children":[{"krate":0,"index":3727},{"krate":0,"index":3728}],"decl_id":null,"docs":" Represents the progress of an image operation.","sig":null,"attributes":[{"value":"/ Represents the progress of an image operation.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":502379,"byte_end":502429,"line_start":354,"line_end":354,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":502430,"byte_end":502433,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ Note that this is not necessarily accurate and no change to the values passed to the progress","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":502434,"byte_end":502531,"line_start":356,"line_end":356,"column_start":1,"column_end":98}},{"value":"/ function during decoding will be considered breaking. A decoder could in theory report the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":502532,"byte_end":502626,"line_start":357,"line_end":357,"column_start":1,"column_end":95}},{"value":"/ progress `(0, 0)` if progress is unknown, without violating the interface contract of the type.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":502627,"byte_end":502726,"line_start":358,"line_end":358,"column_start":1,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":2110},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":502899,"byte_end":502906,"line_start":367,"line_end":367,"column_start":12,"column_end":19},"name":"current","qualname":"<Progress>::current","value":"pub fn current(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of completed decoding.\n","sig":null,"attributes":[{"value":"/ A measure of completed decoding.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":502851,"byte_end":502887,"line_start":366,"line_end":366,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2111},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":503079,"byte_end":503084,"line_start":374,"line_end":374,"column_start":12,"column_end":17},"name":"total","qualname":"<Progress>::total","value":"pub fn total(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of all necessary decoding work.","sig":null,"attributes":[{"value":"/ A measure of all necessary decoding work.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":502954,"byte_end":502999,"line_start":371,"line_end":371,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":503004,"byte_end":503007,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ This is in general greater or equal than `current`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":503012,"byte_end":503067,"line_start":373,"line_end":373,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2112},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":503194,"byte_end":503203,"line_start":379,"line_end":379,"column_start":12,"column_end":21},"name":"remaining","qualname":"<Progress>::remaining","value":"pub fn remaining(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a measure for remaining decoding work.\n","sig":null,"attributes":[{"value":"/ Calculate a measure for remaining decoding work.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":503130,"byte_end":503182,"line_start":378,"line_end":378,"column_start":5,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":2113},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":503332,"byte_end":503344,"line_start":385,"line_end":385,"column_start":11,"column_end":23},"name":"ImageDecoder","qualname":"::image::ImageDecoder","value":"ImageDecoder<'a>: Sized","parent":null,"children":[{"krate":0,"index":2115},{"krate":0,"index":2116},{"krate":0,"index":2117},{"krate":0,"index":2118},{"krate":0,"index":2119},{"krate":0,"index":2120},{"krate":0,"index":2121},{"krate":0,"index":2122},{"krate":0,"index":2124}],"decl_id":null,"docs":" The trait that all decoders implement\n","sig":null,"attributes":[{"value":"/ The trait that all decoders implement","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":503280,"byte_end":503321,"line_start":384,"line_end":384,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":2115},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":503421,"byte_end":503427,"line_start":387,"line_end":387,"column_start":10,"column_end":16},"name":"Reader","qualname":"::image::ImageDecoder::Reader","value":"type Reader: Read + 'a;","parent":{"krate":0,"index":2113},"children":[],"decl_id":null,"docs":" The type of reader produced by `into_reader`.\n","sig":null,"attributes":[{"value":"/ The type of reader produced by `into_reader`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":503362,"byte_end":503411,"line_start":386,"line_end":386,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2116},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":503517,"byte_end":503527,"line_start":390,"line_end":390,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::ImageDecoder::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":{"krate":0,"index":2113},"children":[],"decl_id":null,"docs":" Returns a tuple containing the width and height of the image\n","sig":null,"attributes":[{"value":"/ Returns a tuple containing the width and height of the image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":503445,"byte_end":503509,"line_start":389,"line_end":389,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2117},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":503632,"byte_end":503642,"line_start":393,"line_end":393,"column_start":8,"column_end":18},"name":"color_type","qualname":"::image::ImageDecoder::color_type","value":"pub fn color_type(&Self) -> ColorType","parent":{"krate":0,"index":2113},"children":[],"decl_id":null,"docs":" Returns the color type of the image data produced by this decoder\n","sig":null,"attributes":[{"value":"/ Returns the color type of the image data produced by this decoder","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":503555,"byte_end":503624,"line_start":392,"line_end":392,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2118},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":503736,"byte_end":503755,"line_start":396,"line_end":396,"column_start":8,"column_end":27},"name":"original_color_type","qualname":"::image::ImageDecoder::original_color_type","value":"pub fn original_color_type(&Self) -> ExtendedColorType","parent":{"krate":0,"index":2113},"children":[],"decl_id":null,"docs":" Retuns the color type of the image file before decoding\n","sig":null,"attributes":[{"value":"/ Retuns the color type of the image file before decoding","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":503669,"byte_end":503728,"line_start":395,"line_end":395,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2119},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":504096,"byte_end":504107,"line_start":403,"line_end":403,"column_start":8,"column_end":19},"name":"into_reader","qualname":"::image::ImageDecoder::into_reader","value":"pub fn into_reader(Self) -> ImageResult<Self::Reader>","parent":{"krate":0,"index":2113},"children":[],"decl_id":null,"docs":" Returns a reader that can be used to obtain the bytes of the image. For the best\n performance, always try to read at least `scanline_bytes` from the reader at a time. Reading\n fewer bytes will cause the reader to perform internal buffering.\n","sig":null,"attributes":[{"value":"/ Returns a reader that can be used to obtain the bytes of the image. For the best","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":503830,"byte_end":503914,"line_start":400,"line_end":400,"column_start":5,"column_end":89}},{"value":"/ performance, always try to read at least `scanline_bytes` from the reader at a time. Reading","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":503919,"byte_end":504015,"line_start":401,"line_end":401,"column_start":5,"column_end":101}},{"value":"/ fewer bytes will cause the reader to perform internal buffering.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":504020,"byte_end":504088,"line_start":402,"line_end":402,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2120},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":504494,"byte_end":504505,"line_start":411,"line_end":411,"column_start":8,"column_end":19},"name":"total_bytes","qualname":"::image::ImageDecoder::total_bytes","value":"pub fn total_bytes(&Self) -> u64","parent":{"krate":0,"index":2113},"children":[],"decl_id":null,"docs":" Returns the total number of bytes in the decoded image.","sig":null,"attributes":[{"value":"/ Returns the total number of bytes in the decoded image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":504149,"byte_end":504208,"line_start":405,"line_end":405,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":504213,"byte_end":504216,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ This is the size of the buffer that must be passed to `read_image` or","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":504221,"byte_end":504294,"line_start":407,"line_end":407,"column_start":5,"column_end":78}},{"value":"/ `read_image_with_progress`. The returned value may exceed usize::MAX, in","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":504299,"byte_end":504375,"line_start":408,"line_end":408,"column_start":5,"column_end":81}},{"value":"/ which case it isn't actually possible to construct a buffer to decode all the image data","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":504380,"byte_end":504472,"line_start":409,"line_end":409,"column_start":5,"column_end":97}},{"value":"/ into.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":504477,"byte_end":504486,"line_start":410,"line_end":410,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2121},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":504842,"byte_end":504856,"line_start":418,"line_end":418,"column_start":8,"column_end":22},"name":"scanline_bytes","qualname":"::image::ImageDecoder::scanline_bytes","value":"pub fn scanline_bytes(&Self) -> u64","parent":{"krate":0,"index":2113},"children":[],"decl_id":null,"docs":" Returns the minimum number of bytes that can be efficiently read from this decoder. This may\n be as few as 1 or as many as `total_bytes()`.\n","sig":null,"attributes":[{"value":"/ Returns the minimum number of bytes that can be efficiently read from this decoder. This may","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":504684,"byte_end":504780,"line_start":416,"line_end":416,"column_start":5,"column_end":101}},{"value":"/ be as few as 1 or as many as `total_bytes()`.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":504785,"byte_end":504834,"line_start":417,"line_end":417,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2122},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":505745,"byte_end":505755,"line_start":442,"line_end":442,"column_start":8,"column_end":18},"name":"read_image","qualname":"::image::ImageDecoder::read_image","value":"pub fn read_image(Self, &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":2113},"children":[],"decl_id":null,"docs":" Returns all the bytes in the image.","sig":null,"attributes":[{"value":"/ Returns all the bytes in the image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":504911,"byte_end":504950,"line_start":422,"line_end":422,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":504955,"byte_end":504958,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes and writes the pixel data of the image into it.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":504963,"byte_end":505051,"line_start":424,"line_end":424,"column_start":5,"column_end":93}},{"value":"/ Although not required, for certain color types callers may want to pass buffers which are","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":505056,"byte_end":505149,"line_start":425,"line_end":425,"column_start":5,"column_end":98}},{"value":"/ aligned to 2 or 4 byte boundaries to the slice can be cast to a [u16] or [u32]. To accommodate","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":505154,"byte_end":505252,"line_start":426,"line_end":426,"column_start":5,"column_end":103}},{"value":"/ such casts, the returned contents will always be in native endian.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":505257,"byte_end":505327,"line_start":427,"line_end":427,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":505332,"byte_end":505335,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":505340,"byte_end":505352,"line_start":429,"line_end":429,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":505357,"byte_end":505360,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ This function panics if buf.len() != self.total_bytes().","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":505365,"byte_end":505425,"line_start":431,"line_end":431,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":505430,"byte_end":505433,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":505438,"byte_end":505452,"line_start":433,"line_end":433,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":505457,"byte_end":505460,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ ```no_build","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":505465,"byte_end":505480,"line_start":435,"line_end":435,"column_start":5,"column_end":20}},{"value":"/ use zerocopy::{AsBytes, FromBytes};","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":505485,"byte_end":505524,"line_start":436,"line_end":436,"column_start":5,"column_end":44}},{"value":"/ fn read_16bit_image(decoder: impl ImageDecoder) -> Vec<16> {","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":505529,"byte_end":505593,"line_start":437,"line_end":437,"column_start":5,"column_end":69}},{"value":"/     let mut buf: Vec<u16> = vec![0; decoder.total_bytes()/2];","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":505598,"byte_end":505663,"line_start":438,"line_end":438,"column_start":5,"column_end":70}},{"value":"/     decoder.read_image(buf.as_bytes());","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":505668,"byte_end":505711,"line_start":439,"line_end":439,"column_start":5,"column_end":48}},{"value":"/     buf","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":505716,"byte_end":505727,"line_start":440,"line_end":440,"column_start":5,"column_end":16}},{"value":"/ }","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":505732,"byte_end":505737,"line_start":441,"line_end":441,"column_start":5,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":2124},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":505983,"byte_end":506007,"line_start":448,"line_end":448,"column_start":8,"column_end":32},"name":"read_image_with_progress","qualname":"::image::ImageDecoder::read_image_with_progress","value":"pub fn read_image_with_progress<F: Fn(Progress) -> ()>(Self, &mut [u8], F)\n-> ImageResult<()>","parent":{"krate":0,"index":2113},"children":[],"decl_id":null,"docs":" Same as `read_image` but periodically calls the provided callback to give updates on loading\n progress.\n","sig":null,"attributes":[{"value":"/ Same as `read_image` but periodically calls the provided callback to give updates on loading","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":505861,"byte_end":505957,"line_start":446,"line_end":446,"column_start":5,"column_end":101}},{"value":"/ progress.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":505962,"byte_end":505975,"line_start":447,"line_end":447,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":2126},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":507030,"byte_end":507045,"line_start":482,"line_end":482,"column_start":11,"column_end":26},"name":"ImageDecoderExt","qualname":"::image::ImageDecoderExt","value":"ImageDecoderExt<'a>: ImageDecoder + Sized","parent":null,"children":[{"krate":0,"index":2128},{"krate":0,"index":2130}],"decl_id":null,"docs":" Specialized image decoding not be supported by all formats\n","sig":null,"attributes":[{"value":"/ Specialized image decoding not be supported by all formats","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":506957,"byte_end":507019,"line_start":481,"line_end":481,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2128},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":507200,"byte_end":507209,"line_start":484,"line_end":484,"column_start":8,"column_end":17},"name":"read_rect","qualname":"::image::ImageDecoderExt::read_rect","value":"pub fn read_rect(&mut Self, u32, u32, u32, u32, &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":2126},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).\n","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":507082,"byte_end":507192,"line_start":483,"line_end":483,"column_start":5,"column_end":115}}]},{"kind":"Method","id":{"krate":0,"index":2130},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":508151,"byte_end":508174,"line_start":507,"line_end":507,"column_start":8,"column_end":31},"name":"read_rect_with_progress","qualname":"::image::ImageDecoderExt::read_rect_with_progress","value":"pub fn read_rect_with_progress<F: Fn(Progress) ->\n                               ()>(&mut Self, u32, u32, u32, u32, &mut [u8],\n                                   F) -> ImageResult<()>","parent":{"krate":0,"index":2126},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image, periodically reporting progress.","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image, periodically reporting progress.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":507435,"byte_end":507514,"line_start":495,"line_end":495,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":507519,"byte_end":507522,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ The output buffer will be filled with fields specified by","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":507527,"byte_end":507588,"line_start":497,"line_end":497,"column_start":5,"column_end":66}},{"value":"/ [`ImageDecoder::color_type()`](trait.ImageDecoder.html#fn.color_type),","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":507593,"byte_end":507667,"line_start":498,"line_end":498,"column_start":5,"column_end":79}},{"value":"/ in that order, each field represented in native-endian.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":507672,"byte_end":507731,"line_start":499,"line_end":499,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":507736,"byte_end":507739,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ The progress callback will be called at least once at the start and the end of decoding,","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":507744,"byte_end":507836,"line_start":501,"line_end":501,"column_start":5,"column_end":97}},{"value":"/ implementations are encouraged to call this more often,","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":507841,"byte_end":507900,"line_start":502,"line_end":502,"column_start":5,"column_end":64}},{"value":"/ with a frequency meaningful for display to the end-user.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":507905,"byte_end":507965,"line_start":503,"line_end":503,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":507970,"byte_end":507973,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the output buffer isn't at least","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":507978,"byte_end":508042,"line_start":505,"line_end":505,"column_start":5,"column_end":69}},{"value":"/ `color_type().bytes_per_pixel() * color_type().channel_count() * width * height` bytes long.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":508047,"byte_end":508143,"line_start":506,"line_end":506,"column_start":5,"column_end":101}}]},{"kind":"Trait","id":{"krate":0,"index":2132},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":508405,"byte_end":508421,"line_start":519,"line_end":519,"column_start":11,"column_end":27},"name":"AnimationDecoder","qualname":"::image::AnimationDecoder","value":"AnimationDecoder<'a>","parent":null,"children":[{"krate":0,"index":2134}],"decl_id":null,"docs":" AnimationDecoder trait\n","sig":null,"attributes":[{"value":"/ AnimationDecoder trait","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":508368,"byte_end":508394,"line_start":518,"line_end":518,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":2134},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":508493,"byte_end":508504,"line_start":521,"line_end":521,"column_start":8,"column_end":19},"name":"into_frames","qualname":"::image::AnimationDecoder::into_frames","value":"pub fn into_frames(Self) -> Frames","parent":{"krate":0,"index":2132},"children":[],"decl_id":null,"docs":" Consume the decoder producing a series of frames.\n","sig":null,"attributes":[{"value":"/ Consume the decoder producing a series of frames.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":508432,"byte_end":508485,"line_start":520,"line_end":520,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":2135},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":508576,"byte_end":508588,"line_start":525,"line_end":525,"column_start":11,"column_end":23},"name":"ImageEncoder","qualname":"::image::ImageEncoder","value":"ImageEncoder","parent":null,"children":[{"krate":0,"index":2136}],"decl_id":null,"docs":" The trait all encoders implement\n","sig":null,"attributes":[{"value":"/ The trait all encoders implement","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":508529,"byte_end":508565,"line_start":524,"line_end":524,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":2136},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":509137,"byte_end":509148,"line_start":536,"line_end":536,"column_start":8,"column_end":19},"name":"write_image","qualname":"::image::ImageEncoder::write_image","value":"pub fn write_image(Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":{"krate":0,"index":2135},"children":[],"decl_id":null,"docs":" Writes all the bytes in an image to the encoder.","sig":null,"attributes":[{"value":"/ Writes all the bytes in an image to the encoder.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":508595,"byte_end":508647,"line_start":526,"line_end":526,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":508652,"byte_end":508655,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes of the pixel data of the image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":508660,"byte_end":508731,"line_start":528,"line_end":528,"column_start":5,"column_end":76}},{"value":"/ and encodes them. Unlike particular format encoders inherent impl encode","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":508736,"byte_end":508812,"line_start":529,"line_end":529,"column_start":5,"column_end":81}},{"value":"/ methods where endianness is not specified, here image data bytes should","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":508817,"byte_end":508892,"line_start":530,"line_end":530,"column_start":5,"column_end":80}},{"value":"/ always be in native endian. The implementor will reorder the endianess","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":508897,"byte_end":508971,"line_start":531,"line_end":531,"column_start":5,"column_end":79}},{"value":"/ as necessary for the target encoding format.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":508976,"byte_end":509024,"line_start":532,"line_end":532,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":509029,"byte_end":509032,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ See also `ImageDecoder::read_image` which reads byte buffers into","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":509037,"byte_end":509106,"line_start":534,"line_end":534,"column_start":5,"column_end":74}},{"value":"/ native endian.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":509111,"byte_end":509129,"line_start":535,"line_end":535,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3741},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":509342,"byte_end":509348,"line_start":547,"line_end":547,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::image::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":3744},{"krate":0,"index":3745},{"krate":0,"index":3746},{"krate":0,"index":3747},{"krate":0,"index":3748}],"decl_id":null,"docs":" Immutable pixel iterator\n","sig":null,"attributes":[{"value":"/ Immutable pixel iterator","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":509285,"byte_end":509313,"line_start":545,"line_end":545,"column_start":1,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":2145},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":510089,"byte_end":510105,"line_start":584,"line_end":584,"column_start":11,"column_end":27},"name":"GenericImageView","qualname":"::image::GenericImageView","value":"GenericImageView","parent":null,"children":[{"krate":0,"index":2146},{"krate":0,"index":2147},{"krate":0,"index":2148},{"krate":0,"index":2149},{"krate":0,"index":2150},{"krate":0,"index":2151},{"krate":0,"index":2152},{"krate":0,"index":2153},{"krate":0,"index":2154},{"krate":0,"index":2155},{"krate":0,"index":2156},{"krate":0,"index":2157}],"decl_id":null,"docs":" Trait to inspect an image.\n","sig":null,"attributes":[{"value":"/ Trait to inspect an image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":510048,"byte_end":510078,"line_start":583,"line_end":583,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":2146},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":510144,"byte_end":510149,"line_start":586,"line_end":586,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::image::GenericImageView::Pixel","value":"type Pixel: Pixel;","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" The type of pixel.\n","sig":null,"attributes":[{"value":"/ The type of pixel.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":510112,"byte_end":510134,"line_start":585,"line_end":585,"column_start":5,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":2147},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":510383,"byte_end":510397,"line_start":591,"line_end":591,"column_start":10,"column_end":24},"name":"InnerImageView","qualname":"::image::GenericImageView::InnerImageView","value":"type InnerImageView: GenericImageView<Pixel = Self::Pixel>;","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[{"value":"/ Underlying image type. This is mainly used by SubImages in order to","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":510163,"byte_end":510234,"line_start":588,"line_end":588,"column_start":5,"column_end":76}},{"value":"/ always have a reference to the original image. This allows for less","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":510239,"byte_end":510310,"line_start":589,"line_end":589,"column_start":5,"column_end":76}},{"value":"/ indirections and it eases the use of nested SubImages.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":510315,"byte_end":510373,"line_start":590,"line_end":590,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2148},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":510490,"byte_end":510500,"line_start":594,"line_end":594,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::GenericImageView::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":510443,"byte_end":510482,"line_start":593,"line_end":593,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2149},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":510564,"byte_end":510569,"line_start":597,"line_end":597,"column_start":8,"column_end":13},"name":"width","qualname":"::image::GenericImageView::width","value":"pub fn width(&Self) -> u32","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":510528,"byte_end":510556,"line_start":596,"line_end":596,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2150},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":510684,"byte_end":510690,"line_start":603,"line_end":603,"column_start":8,"column_end":14},"name":"height","qualname":"::image::GenericImageView::height","value":"pub fn height(&Self) -> u32","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":510647,"byte_end":510676,"line_start":602,"line_end":602,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2151},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":510817,"byte_end":510823,"line_start":609,"line_end":609,"column_start":8,"column_end":14},"name":"bounds","qualname":"::image::GenericImageView::bounds","value":"pub fn bounds(&Self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" The bounding rectangle of this image.\n","sig":null,"attributes":[{"value":"/ The bounding rectangle of this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":510768,"byte_end":510809,"line_start":608,"line_end":608,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2152},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":510940,"byte_end":510949,"line_start":612,"line_end":612,"column_start":8,"column_end":17},"name":"in_bounds","qualname":"::image::GenericImageView::in_bounds","value":"pub fn in_bounds(&Self, u32, u32) -> bool","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" Returns true if this x, y coordinate is contained inside the image.\n","sig":null,"attributes":[{"value":"/ Returns true if this x, y coordinate is contained inside the image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":510861,"byte_end":510932,"line_start":611,"line_end":611,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2153},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":511272,"byte_end":511281,"line_start":624,"line_end":624,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"::image::GenericImageView::get_pixel","value":"pub fn get_pixel(&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":511097,"byte_end":511136,"line_start":617,"line_end":617,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":511141,"byte_end":511144,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":511149,"byte_end":511161,"line_start":619,"line_end":619,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":511166,"byte_end":511169,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":511174,"byte_end":511214,"line_start":621,"line_end":621,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":511219,"byte_end":511222,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ TODO: change this signature to &P","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":511227,"byte_end":511264,"line_start":623,"line_end":623,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2154},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":511602,"byte_end":511618,"line_start":634,"line_end":634,"column_start":15,"column_end":31},"name":"unsafe_get_pixel","qualname":"::image::GenericImageView::unsafe_get_pixel","value":"pub unsafe fn unsafe_get_pixel(&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":511326,"byte_end":511365,"line_start":626,"line_end":626,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":511370,"byte_end":511373,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":511378,"byte_end":511453,"line_start":628,"line_end":628,"column_start":5,"column_end":80}},{"value":"/ # Safety","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":511458,"byte_end":511470,"line_start":629,"line_end":629,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":511475,"byte_end":511478,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ The coordinates must be [`in_bounds`] of the image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":511483,"byte_end":511538,"line_start":631,"line_end":631,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":511543,"byte_end":511546,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ [`in_bounds`]: #method.in_bounds","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":511551,"byte_end":511587,"line_start":633,"line_end":633,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2155},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":511850,"byte_end":511856,"line_start":641,"line_end":641,"column_start":8,"column_end":14},"name":"pixels","qualname":"::image::GenericImageView::pixels","value":"pub fn pixels(&Self) -> Pixels<, Self>","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" Returns an Iterator over the pixels of this image.\n The iterator yields the coordinates of each pixel\n along with their value\n","sig":null,"attributes":[{"value":"/ Returns an Iterator over the pixels of this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":511699,"byte_end":511753,"line_start":638,"line_end":638,"column_start":5,"column_end":59}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":511758,"byte_end":511811,"line_start":639,"line_end":639,"column_start":5,"column_end":58}},{"value":"/ along with their value","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":511816,"byte_end":511842,"line_start":640,"line_end":640,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2156},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":512126,"byte_end":512131,"line_start":654,"line_end":654,"column_start":8,"column_end":13},"name":"inner","qualname":"::image::GenericImageView::inner","value":"pub fn inner(&Self) -> &Self::InnerImageView","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" Returns a reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":512070,"byte_end":512118,"line_start":653,"line_end":653,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2157},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":512328,"byte_end":512332,"line_start":658,"line_end":658,"column_start":8,"column_end":12},"name":"view","qualname":"::image::GenericImageView::view","value":"pub fn view(&Self, u32, u32, u32, u32) -> SubImage<&Self::InnerImageView>","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" Returns an subimage that is an immutable view into this image.\n You can use [`GenericImage::sub_image`] if you need a mutable view instead.\n","sig":null,"attributes":[{"value":"/ Returns an subimage that is an immutable view into this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":512170,"byte_end":512236,"line_start":656,"line_end":656,"column_start":5,"column_end":71}},{"value":"/ You can use [`GenericImage::sub_image`] if you need a mutable view instead.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":512241,"byte_end":512320,"line_start":657,"line_end":657,"column_start":5,"column_end":84}}]},{"kind":"Trait","id":{"krate":0,"index":2158},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":512531,"byte_end":512543,"line_start":664,"line_end":664,"column_start":11,"column_end":23},"name":"GenericImage","qualname":"::image::GenericImage","value":"GenericImage: GenericImageView","parent":null,"children":[{"krate":0,"index":2159},{"krate":0,"index":2160},{"krate":0,"index":2161},{"krate":0,"index":2162},{"krate":0,"index":2163},{"krate":0,"index":2164},{"krate":0,"index":2166},{"krate":0,"index":2168},{"krate":0,"index":2169}],"decl_id":null,"docs":" A trait for manipulating images.\n","sig":null,"attributes":[{"value":"/ A trait for manipulating images.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":512484,"byte_end":512520,"line_start":663,"line_end":663,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":2159},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":512788,"byte_end":512798,"line_start":668,"line_end":668,"column_start":10,"column_end":20},"name":"InnerImage","qualname":"::image::GenericImage::InnerImage","value":"type InnerImage: GenericImage<Pixel = Self::Pixel>;","parent":{"krate":0,"index":2158},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[{"value":"/ Underlying image type. This is mainly used by SubImages in order to","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":512568,"byte_end":512639,"line_start":665,"line_end":665,"column_start":5,"column_end":76}},{"value":"/ always have a reference to the original image. This allows for less","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":512644,"byte_end":512715,"line_start":666,"line_end":666,"column_start":5,"column_end":76}},{"value":"/ indirections and it eases the use of nested SubImages.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":512720,"byte_end":512778,"line_start":667,"line_end":667,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2160},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":512988,"byte_end":513001,"line_start":675,"line_end":675,"column_start":8,"column_end":21},"name":"get_pixel_mut","qualname":"::image::GenericImage::get_pixel_mut","value":"pub fn get_pixel_mut(&mut Self, u32, u32) -> &mut Self::Pixel","parent":{"krate":0,"index":2158},"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":512840,"byte_end":512902,"line_start":670,"line_end":670,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":512907,"byte_end":512910,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":512915,"byte_end":512927,"line_start":672,"line_end":672,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":512932,"byte_end":512935,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":512940,"byte_end":512980,"line_start":674,"line_end":674,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2161},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513175,"byte_end":513184,"line_start":682,"line_end":682,"column_start":8,"column_end":17},"name":"put_pixel","qualname":"::image::GenericImage::put_pixel","value":"pub fn put_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":2158},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y)","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513055,"byte_end":513089,"line_start":677,"line_end":677,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513094,"byte_end":513097,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513102,"byte_end":513114,"line_start":679,"line_end":679,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513119,"byte_end":513122,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513127,"byte_end":513167,"line_start":681,"line_end":681,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2162},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513538,"byte_end":513554,"line_start":692,"line_end":692,"column_start":15,"column_end":31},"name":"unsafe_put_pixel","qualname":"::image::GenericImage::unsafe_put_pixel","value":"pub unsafe fn unsafe_put_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":2158},"children":[],"decl_id":null,"docs":" Puts a pixel at location (x, y)","sig":null,"attributes":[{"value":"/ Puts a pixel at location (x, y)","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513238,"byte_end":513273,"line_start":684,"line_end":684,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513278,"byte_end":513281,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513286,"byte_end":513361,"line_start":686,"line_end":686,"column_start":5,"column_end":80}},{"value":"/ # Safety","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513366,"byte_end":513378,"line_start":687,"line_end":687,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513383,"byte_end":513386,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ The coordinates must be [`in_bounds`] of the image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513391,"byte_end":513446,"line_start":689,"line_end":689,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513451,"byte_end":513454,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ [`in_bounds`]: traits.GenericImageView.html#method.in_bounds","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513459,"byte_end":513523,"line_start":691,"line_end":691,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2163},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513821,"byte_end":513832,"line_start":699,"line_end":699,"column_start":8,"column_end":19},"name":"blend_pixel","qualname":"::image::GenericImage::blend_pixel","value":"pub fn blend_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":2158},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y), taking into account alpha channels","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y), taking into account alpha channels","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513652,"byte_end":513722,"line_start":696,"line_end":696,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513727,"byte_end":513730,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ DEPRECATED: This method will be removed. Blend the pixel directly instead.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513735,"byte_end":513813,"line_start":698,"line_end":698,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":2164},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":514594,"byte_end":514603,"line_start":716,"line_end":716,"column_start":8,"column_end":17},"name":"copy_from","qualname":"::image::GenericImage::copy_from","value":"pub fn copy_from<O>(&mut Self, &O, u32, u32) -> ImageResult<()> where\nO: GenericImageView<Pixel = Self::Pixel>","parent":{"krate":0,"index":2158},"children":[],"decl_id":null,"docs":" Copies all of the pixels from another image into this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from another image into this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513886,"byte_end":513950,"line_start":701,"line_end":701,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513955,"byte_end":513958,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ The other image is copied with the top-left corner of the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":513963,"byte_end":514024,"line_start":703,"line_end":703,"column_start":5,"column_end":66}},{"value":"/ other image placed at (x, y).","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":514029,"byte_end":514062,"line_start":704,"line_end":704,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":514067,"byte_end":514070,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ In order to copy only a piece of the other image, use [`GenericImageView::view`].","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":514075,"byte_end":514160,"line_start":706,"line_end":706,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":514165,"byte_end":514168,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ You can use [`FlatSamples`] to source pixels from an arbitrary regular raster of channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":514173,"byte_end":514265,"line_start":708,"line_end":708,"column_start":5,"column_end":97}},{"value":"/ values, for example from a foreign interface or a fixed image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":514270,"byte_end":514336,"line_start":709,"line_end":709,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":514341,"byte_end":514344,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":514349,"byte_end":514362,"line_start":711,"line_end":711,"column_start":5,"column_end":18}},{"value":"/ Returns an error if the image is too large to be copied at the given position","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":514367,"byte_end":514448,"line_start":712,"line_end":712,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":514453,"byte_end":514456,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ [`GenericImageView::view`]: trait.GenericImageView.html#method.view","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":514461,"byte_end":514532,"line_start":714,"line_end":714,"column_start":5,"column_end":76}},{"value":"/ [`FlatSamples`]: flat/struct.FlatSamples.html","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":514537,"byte_end":514586,"line_start":715,"line_end":715,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2166},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":515650,"byte_end":515661,"line_start":744,"line_end":744,"column_start":8,"column_end":19},"name":"copy_within","qualname":"::image::GenericImage::copy_within","value":"pub fn copy_within(&mut Self, Rect, u32, u32) -> bool","parent":{"krate":0,"index":2158},"children":[],"decl_id":null,"docs":" Copies all of the pixels from one part of this image to another part of this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from one part of this image to another part of this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":515302,"byte_end":515389,"line_start":737,"line_end":737,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":515394,"byte_end":515397,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ The destination rectangle of the copy is specified with the top-left corner placed at (x, y).","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":515402,"byte_end":515499,"line_start":739,"line_end":739,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":515504,"byte_end":515507,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":515512,"byte_end":515525,"line_start":741,"line_end":741,"column_start":5,"column_end":18}},{"value":"/ `true` if the copy was successful, `false` if the image could not","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":515530,"byte_end":515599,"line_start":742,"line_end":742,"column_start":5,"column_end":74}},{"value":"/ be copied due to size constraints.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":515604,"byte_end":515642,"line_start":743,"line_end":743,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2168},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":517319,"byte_end":517328,"line_start":780,"line_end":780,"column_start":8,"column_end":17},"name":"inner_mut","qualname":"::image::GenericImage::inner_mut","value":"pub fn inner_mut(&mut Self) -> &mut Self::InnerImage","parent":{"krate":0,"index":2158},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":517255,"byte_end":517311,"line_start":779,"line_end":779,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2169},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":517523,"byte_end":517532,"line_start":784,"line_end":784,"column_start":8,"column_end":17},"name":"sub_image","qualname":"::image::GenericImage::sub_image","value":"pub fn sub_image(&mut Self, u32, u32, u32, u32)\n-> SubImage<&mut Self::InnerImage>","parent":{"krate":0,"index":2158},"children":[],"decl_id":null,"docs":" Returns a mutable subimage that is a view into this image.\n If you want an immutable subimage instead, use [`GenericImageView::view`]\n","sig":null,"attributes":[{"value":"/ Returns a mutable subimage that is a view into this image.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":517371,"byte_end":517433,"line_start":782,"line_end":782,"column_start":5,"column_end":67}},{"value":"/ If you want an immutable subimage instead, use [`GenericImageView::view`]","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":517438,"byte_end":517515,"line_start":783,"line_end":783,"column_start":5,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":2170},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":518023,"byte_end":518031,"line_start":801,"line_end":801,"column_start":12,"column_end":20},"name":"SubImage","qualname":"::image::SubImage","value":"SubImage {  }","parent":null,"children":[{"krate":0,"index":2172},{"krate":0,"index":2173},{"krate":0,"index":2174},{"krate":0,"index":2175},{"krate":0,"index":2176}],"decl_id":null,"docs":" A View into another image","sig":null,"attributes":[{"value":"/ A View into another image","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":517739,"byte_end":517768,"line_start":795,"line_end":795,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":517769,"byte_end":517772,"line_start":796,"line_end":796,"column_start":1,"column_end":4}},{"value":"/ Instances of this struct can be created using:","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":517773,"byte_end":517823,"line_start":797,"line_end":797,"column_start":1,"column_end":51}},{"value":"/   - [`GenericImage::sub_image`] to create a mutable view,","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":517824,"byte_end":517885,"line_start":798,"line_end":798,"column_start":1,"column_end":62}},{"value":"/   - [`GenericImageView::view`] to create an immutable view,","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":517886,"byte_end":517949,"line_start":799,"line_end":799,"column_start":1,"column_end":64}},{"value":"/   - [`SubImage::new`] to instantiate the struct directly.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":517950,"byte_end":518011,"line_start":800,"line_end":800,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2183},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":518419,"byte_end":518422,"line_start":817,"line_end":817,"column_start":12,"column_end":15},"name":"new","qualname":"<SubImage<I>>::new","value":"pub fn new(I, u32, u32, u32, u32) -> SubImage<I>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new subimage\n","sig":null,"attributes":[{"value":"/ Construct a new subimage","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":518379,"byte_end":518407,"line_start":816,"line_end":816,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2184},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":518711,"byte_end":518724,"line_start":828,"line_end":828,"column_start":12,"column_end":25},"name":"change_bounds","qualname":"<SubImage<I>>::change_bounds","value":"pub fn change_bounds(&mut Self, u32, u32, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Change the coordinates of this subimage.\n","sig":null,"attributes":[{"value":"/ Change the coordinates of this subimage.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":518655,"byte_end":518699,"line_start":827,"line_end":827,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2185},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":518958,"byte_end":518966,"line_start":836,"line_end":836,"column_start":12,"column_end":20},"name":"to_image","qualname":"<SubImage<I>>::to_image","value":"pub fn to_image(&Self) -> ImageBuffer<DerefPixel<I>, Vec<DerefSubpixel<I>>>\nwhere I: Deref, I::Target: GenericImage + 'static","parent":null,"children":[],"decl_id":null,"docs":" Convert this subimage to an ImageBuffer\n","sig":null,"attributes":[{"value":"/ Convert this subimage to an ImageBuffer","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":518903,"byte_end":518946,"line_start":835,"line_end":835,"column_start":5,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":2218},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":532346,"byte_end":532361,"line_start":12,"line_end":12,"column_start":11,"column_end":26},"name":"EncodableLayout","qualname":"::traits::EncodableLayout","value":"EncodableLayout: seals::EncodableLayout","parent":null,"children":[{"krate":0,"index":2219}],"decl_id":null,"docs":" Types which are safe to treat as an immutable byte slice in a pixel layout\n for image encoding.\n","sig":null,"attributes":[{"value":"/ Types which are safe to treat as an immutable byte slice in a pixel layout","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":532233,"byte_end":532311,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ for image encoding.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":532312,"byte_end":532335,"line_start":11,"line_end":11,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2219},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":532432,"byte_end":532440,"line_start":14,"line_end":14,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::traits::EncodableLayout::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":{"krate":0,"index":2218},"children":[],"decl_id":null,"docs":" Get the bytes of this value.\n","sig":null,"attributes":[{"value":"/ Get the bytes of this value.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":532392,"byte_end":532424,"line_start":13,"line_end":13,"column_start":5,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":2224},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":532728,"byte_end":532737,"line_start":30,"line_end":30,"column_start":11,"column_end":20},"name":"Primitive","qualname":"::traits::Primitive","value":"Primitive: Copy + NumCast + Num + PartialOrd<Self> + Clone + Bounded","parent":null,"children":[],"decl_id":null,"docs":" Primitive trait from old stdlib\n","sig":null,"attributes":[{"value":"/ Primitive trait from old stdlib","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":532682,"byte_end":532717,"line_start":29,"line_end":29,"column_start":1,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":2237},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":533259,"byte_end":533270,"line_start":47,"line_end":47,"column_start":11,"column_end":22},"name":"Enlargeable","qualname":"::traits::Enlargeable","value":"Enlargeable: Sized + Bounded + NumCast","parent":null,"children":[{"krate":0,"index":2238},{"krate":0,"index":2239}],"decl_id":null,"docs":" An Enlargable::Larger value should be enough to calculate\n the sum (average) of a few hundred or thousand Enlargeable values.\n","sig":null,"attributes":[{"value":"/ An Enlargable::Larger value should be enough to calculate","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":533116,"byte_end":533177,"line_start":45,"line_end":45,"column_start":1,"column_end":62}},{"value":"/ the sum (average) of a few hundred or thousand Enlargeable values.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":533178,"byte_end":533248,"line_start":46,"line_end":46,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":2238},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":533309,"byte_end":533315,"line_start":48,"line_end":48,"column_start":10,"column_end":16},"name":"Larger","qualname":"::traits::Enlargeable::Larger","value":"type Larger: Primitive + AddAssign + 'static;","parent":{"krate":0,"index":2237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2239},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":533358,"byte_end":533368,"line_start":50,"line_end":50,"column_start":8,"column_end":18},"name":"clamp_from","qualname":"::traits::Enlargeable::clamp_from","value":"pub fn clamp_from(Self::Larger) -> Self","parent":{"krate":0,"index":2237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2246},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":533840,"byte_end":533844,"line_start":71,"line_end":71,"column_start":11,"column_end":15},"name":"Lerp","qualname":"::traits::Lerp","value":"Lerp: Bounded + NumCast","parent":null,"children":[{"krate":0,"index":2247},{"krate":0,"index":2248}],"decl_id":null,"docs":" Linear interpolation without involving floating numbers.\n","sig":null,"attributes":[{"value":"/ Linear interpolation without involving floating numbers.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":533769,"byte_end":533829,"line_start":70,"line_end":70,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":2247},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":533875,"byte_end":533880,"line_start":72,"line_end":72,"column_start":10,"column_end":15},"name":"Ratio","qualname":"::traits::Lerp::Ratio","value":"type Ratio: Primitive;","parent":{"krate":0,"index":2246},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2248},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":533901,"byte_end":533905,"line_start":74,"line_end":74,"column_start":8,"column_end":12},"name":"lerp","qualname":"::traits::Lerp::lerp","value":"pub fn lerp(Self, Self, Self::Ratio) -> Self","parent":{"krate":0,"index":2246},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2255},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":534631,"byte_end":534636,"line_start":105,"line_end":105,"column_start":11,"column_end":16},"name":"Pixel","qualname":"::traits::Pixel","value":"Pixel: Copy + Clone","parent":null,"children":[{"krate":0,"index":2256},{"krate":0,"index":2257},{"krate":0,"index":2258},{"krate":0,"index":2259},{"krate":0,"index":2260},{"krate":0,"index":2261},{"krate":0,"index":2262},{"krate":0,"index":2263},{"krate":0,"index":2264},{"krate":0,"index":2265},{"krate":0,"index":2266},{"krate":0,"index":2267},{"krate":0,"index":2268},{"krate":0,"index":2269},{"krate":0,"index":2270},{"krate":0,"index":2271},{"krate":0,"index":2272},{"krate":0,"index":2273},{"krate":0,"index":2274},{"krate":0,"index":2275},{"krate":0,"index":2277},{"krate":0,"index":2279},{"krate":0,"index":2282},{"krate":0,"index":2285},{"krate":0,"index":2288},{"krate":0,"index":2291},{"krate":0,"index":2293},{"krate":0,"index":2295},{"krate":0,"index":2296}],"decl_id":null,"docs":" A generalized pixel.","sig":null,"attributes":[{"value":"/ A generalized pixel.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":534506,"byte_end":534530,"line_start":102,"line_end":102,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":534531,"byte_end":534534,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ A pixel object is usually not used standalone but as a view into an image buffer.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":534535,"byte_end":534620,"line_start":104,"line_end":104,"column_start":1,"column_end":86}}]},{"kind":"Type","id":{"krate":0,"index":2256},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":534700,"byte_end":534708,"line_start":107,"line_end":107,"column_start":10,"column_end":18},"name":"Subpixel","qualname":"::traits::Pixel::Subpixel","value":"type Subpixel: Primitive;","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" The underlying subpixel type.\n","sig":null,"attributes":[{"value":"/ The underlying subpixel type.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":534657,"byte_end":534690,"line_start":106,"line_end":106,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":2257},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":534783,"byte_end":534796,"line_start":110,"line_end":110,"column_start":11,"column_end":24},"name":"CHANNEL_COUNT","qualname":"::traits::Pixel::CHANNEL_COUNT","value":"u8","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" The number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ The number of channels of this pixel type.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":534726,"byte_end":534772,"line_start":109,"line_end":109,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2258},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":534939,"byte_end":534952,"line_start":113,"line_end":113,"column_start":8,"column_end":21},"name":"channel_count","qualname":"::traits::Pixel::channel_count","value":"pub fn channel_count() -> u8","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Returns the number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ Returns the number of channels of this pixel type.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":534806,"byte_end":534860,"line_start":111,"line_end":111,"column_start":5,"column_end":59}},{"value":"deprecated(note = \"please use CHANNEL_COUNT associated constant\")","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":534865,"byte_end":534931,"line_start":112,"line_end":112,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2259},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":535048,"byte_end":535056,"line_start":118,"line_end":118,"column_start":8,"column_end":16},"name":"channels","qualname":"::traits::Pixel::channels","value":"pub fn channels(&Self) -> &[Self::Subpixel]","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Returns the components as a slice.\n","sig":null,"attributes":[{"value":"/ Returns the components as a slice.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":535002,"byte_end":535040,"line_start":117,"line_end":117,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2260},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":535144,"byte_end":535156,"line_start":121,"line_end":121,"column_start":8,"column_end":20},"name":"channels_mut","qualname":"::traits::Pixel::channels_mut","value":"pub fn channels_mut(&mut Self) -> &mut [Self::Subpixel]","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Returns the components as a mutable slice\n","sig":null,"attributes":[{"value":"/ Returns the components as a mutable slice","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":535091,"byte_end":535136,"line_start":120,"line_end":120,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":2261},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":535322,"byte_end":535333,"line_start":125,"line_end":125,"column_start":11,"column_end":22},"name":"COLOR_MODEL","qualname":"::traits::Pixel::COLOR_MODEL","value":"&'static str","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" A string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ A string that can help to interpret the meaning each channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":535199,"byte_end":535263,"line_start":123,"line_end":123,"column_start":5,"column_end":69}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":535268,"byte_end":535311,"line_start":124,"line_end":124,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2262},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":535550,"byte_end":535561,"line_start":129,"line_end":129,"column_start":8,"column_end":19},"name":"color_model","qualname":"::traits::Pixel::color_model","value":"pub fn color_model() -> &'static str","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Returns a string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ Returns a string that can help to interpret the meaning each channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":535353,"byte_end":535425,"line_start":126,"line_end":126,"column_start":5,"column_end":77}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":535430,"byte_end":535473,"line_start":127,"line_end":127,"column_start":5,"column_end":48}},{"value":"deprecated(note = \"please use COLOR_MODEL associated constant\")","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":535478,"byte_end":535542,"line_start":128,"line_end":128,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":2263},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":535665,"byte_end":535675,"line_start":134,"line_end":134,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::traits::Pixel::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" ColorType for this pixel format\n","sig":null,"attributes":[{"value":"/ ColorType for this pixel format","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":535619,"byte_end":535654,"line_start":133,"line_end":133,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2264},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":535815,"byte_end":535825,"line_start":137,"line_end":137,"column_start":8,"column_end":18},"name":"color_type","qualname":"::traits::Pixel::color_type","value":"pub fn color_type() -> ColorType","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Returns the ColorType for this pixel format\n","sig":null,"attributes":[{"value":"/ Returns the ColorType for this pixel format","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":535692,"byte_end":535739,"line_start":135,"line_end":135,"column_start":5,"column_end":52}},{"value":"deprecated(note = \"please use COLOR_TYPE associated constant\")","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":535744,"byte_end":535807,"line_start":136,"line_end":136,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2265},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":536063,"byte_end":536072,"line_start":145,"line_end":145,"column_start":8,"column_end":17},"name":"channels4","qualname":"::traits::Pixel::channels4","value":"pub fn channels4(&Self)\n-> (Self::Subpixel, Self::Subpixel, Self::Subpixel, Self::Subpixel)","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Returns the channels of this pixel as a 4 tuple. If the pixel\n has less than 4 channels the remainder is filled with the maximum value","sig":null,"attributes":[{"value":"/ Returns the channels of this pixel as a 4 tuple. If the pixel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":535879,"byte_end":535944,"line_start":141,"line_end":141,"column_start":5,"column_end":70}},{"value":"/ has less than 4 channels the remainder is filled with the maximum value","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":535949,"byte_end":536024,"line_start":142,"line_end":142,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":536029,"byte_end":536032,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":536037,"byte_end":536055,"line_start":144,"line_end":144,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2266},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":536375,"byte_end":536388,"line_start":158,"line_end":158,"column_start":8,"column_end":21},"name":"from_channels","qualname":"::traits::Pixel::from_channels","value":"pub fn from_channels(Self::Subpixel, Self::Subpixel, Self::Subpixel,\n                     Self::Subpixel) -> Self","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Construct a pixel from the 4 channels a, b, c and d.\n If the pixel does not contain 4 channels the extra are ignored.","sig":null,"attributes":[{"value":"/ Construct a pixel from the 4 channels a, b, c and d.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":536208,"byte_end":536264,"line_start":154,"line_end":154,"column_start":5,"column_end":61}},{"value":"/ If the pixel does not contain 4 channels the extra are ignored.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":536269,"byte_end":536336,"line_start":155,"line_end":155,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":536341,"byte_end":536344,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":536349,"byte_end":536367,"line_start":157,"line_end":157,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2267},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":536742,"byte_end":536752,"line_start":169,"line_end":169,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::traits::Pixel::from_slice","value":"pub fn from_slice(&[Self::Subpixel]) -> &Self","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Returns a view into a slice.","sig":null,"attributes":[{"value":"/ Returns a view into a slice.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":536518,"byte_end":536550,"line_start":165,"line_end":165,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":536555,"byte_end":536558,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":536563,"byte_end":536647,"line_start":167,"line_end":167,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to present panics if the pixel is used later on.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":536652,"byte_end":536734,"line_start":168,"line_end":168,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2268},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":537032,"byte_end":537046,"line_start":175,"line_end":175,"column_start":8,"column_end":22},"name":"from_slice_mut","qualname":"::traits::Pixel::from_slice_mut","value":"pub fn from_slice_mut(&mut [Self::Subpixel]) -> &mut Self","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Returns mutable view into a mutable slice.","sig":null,"attributes":[{"value":"/ Returns mutable view into a mutable slice.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":536794,"byte_end":536840,"line_start":171,"line_end":171,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":536845,"byte_end":536848,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":536853,"byte_end":536937,"line_start":173,"line_end":173,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to present panics if the pixel is used later on.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":536942,"byte_end":537024,"line_start":174,"line_end":174,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2269},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":537133,"byte_end":537139,"line_start":178,"line_end":178,"column_start":8,"column_end":14},"name":"to_rgb","qualname":"::traits::Pixel::to_rgb","value":"pub fn to_rgb(&Self) -> Rgb<Self::Subpixel>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":537096,"byte_end":537125,"line_start":177,"line_end":177,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2270},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":537235,"byte_end":537242,"line_start":181,"line_end":181,"column_start":8,"column_end":15},"name":"to_rgba","qualname":"::traits::Pixel::to_rgba","value":"pub fn to_rgba(&Self) -> Rgba<Self::Subpixel>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":537176,"byte_end":537227,"line_start":180,"line_end":180,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2271},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":537318,"byte_end":537325,"line_start":184,"line_end":184,"column_start":8,"column_end":15},"name":"to_luma","qualname":"::traits::Pixel::to_luma","value":"pub fn to_luma(&Self) -> Luma<Self::Subpixel>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Convert this pixel to luma\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":537280,"byte_end":537310,"line_start":183,"line_end":183,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2272},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":537423,"byte_end":537436,"line_start":187,"line_end":187,"column_start":8,"column_end":21},"name":"to_luma_alpha","qualname":"::traits::Pixel::to_luma_alpha","value":"pub fn to_luma_alpha(&Self) -> LumaA<Self::Subpixel>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Convert this pixel to luma with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":537363,"byte_end":537415,"line_start":186,"line_end":186,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2273},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":537512,"byte_end":537518,"line_start":190,"line_end":190,"column_start":8,"column_end":14},"name":"to_bgr","qualname":"::traits::Pixel::to_bgr","value":"pub fn to_bgr(&Self) -> Bgr<Self::Subpixel>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR\n","sig":null,"attributes":[{"value":"/ Convert this pixel to BGR","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":537475,"byte_end":537504,"line_start":189,"line_end":189,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2274},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":537614,"byte_end":537621,"line_start":193,"line_end":193,"column_start":8,"column_end":15},"name":"to_bgra","qualname":"::traits::Pixel::to_bgra","value":"pub fn to_bgra(&Self) -> Bgra<Self::Subpixel>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to BGR with an alpha channel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":537555,"byte_end":537606,"line_start":192,"line_end":192,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2275},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":537728,"byte_end":537731,"line_start":196,"line_end":196,"column_start":8,"column_end":11},"name":"map","qualname":"::traits::Pixel::map","value":"pub fn map<F>(&Self, F) -> Self where F: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":537659,"byte_end":537720,"line_start":195,"line_end":195,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2277},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":537892,"byte_end":537897,"line_start":201,"line_end":201,"column_start":8,"column_end":13},"name":"apply","qualname":"::traits::Pixel::apply","value":"pub fn apply<F>(&mut Self, F) where F: FnMut(Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":537823,"byte_end":537884,"line_start":200,"line_end":200,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2279},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":538122,"byte_end":538136,"line_start":207,"line_end":207,"column_start":8,"column_end":22},"name":"map_with_alpha","qualname":"::traits::Pixel::map_with_alpha","value":"pub fn map_with_alpha<F, G>(&Self, F, G) -> Self where\nF: FnMut(Self::Subpixel) -> Self::Subpixel, G: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":537985,"byte_end":538057,"line_start":205,"line_end":205,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":538062,"byte_end":538114,"line_start":206,"line_end":206,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2282},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":538442,"byte_end":538458,"line_start":214,"line_end":214,"column_start":8,"column_end":24},"name":"apply_with_alpha","qualname":"::traits::Pixel::apply_with_alpha","value":"pub fn apply_with_alpha<F, G>(&mut Self, F, G) where F: FnMut(Self::Subpixel)\n-> Self::Subpixel, G: FnMut(Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":538289,"byte_end":538361,"line_start":212,"line_end":212,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel. Works in-place.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":538366,"byte_end":538434,"line_start":213,"line_end":213,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2285},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":538687,"byte_end":538704,"line_start":220,"line_end":220,"column_start":8,"column_end":25},"name":"map_without_alpha","qualname":"::traits::Pixel::map_without_alpha","value":"pub fn map_without_alpha<F>(&Self, F) -> Self where F: FnMut(Self::Subpixel)\n-> Self::Subpixel","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":538607,"byte_end":538679,"line_start":219,"line_end":219,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2288},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":538996,"byte_end":539015,"line_start":231,"line_end":231,"column_start":8,"column_end":27},"name":"apply_without_alpha","qualname":"::traits::Pixel::apply_without_alpha","value":"pub fn apply_without_alpha<F>(&mut Self, F) where F: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Works in place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":538892,"byte_end":538964,"line_start":229,"line_end":229,"column_start":5,"column_end":77}},{"value":"/ Works in place.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":538969,"byte_end":538988,"line_start":230,"line_end":230,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2291},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":539258,"byte_end":539262,"line_start":240,"line_end":240,"column_start":8,"column_end":12},"name":"map2","qualname":"::traits::Pixel::map2","value":"pub fn map2<F>(&Self, &Self, F) -> Self where\nF: FnMut(Self::Subpixel, Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":539156,"byte_end":539220,"line_start":238,"line_end":238,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":539225,"byte_end":539250,"line_start":239,"line_end":239,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2293},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":539502,"byte_end":539508,"line_start":246,"line_end":246,"column_start":8,"column_end":14},"name":"apply2","qualname":"::traits::Pixel::apply2","value":"pub fn apply2<F>(&mut Self, &Self, F) where\nF: FnMut(Self::Subpixel, Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":539384,"byte_end":539448,"line_start":244,"line_end":244,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise. Works in-place.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":539453,"byte_end":539494,"line_start":245,"line_end":245,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2295},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":539655,"byte_end":539661,"line_start":251,"line_end":251,"column_start":8,"column_end":14},"name":"invert","qualname":"::traits::Pixel::invert","value":"pub fn invert(&mut Self)","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Invert this pixel\n","sig":null,"attributes":[{"value":"/ Invert this pixel","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":539626,"byte_end":539647,"line_start":250,"line_end":250,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2296},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":539772,"byte_end":539777,"line_start":254,"line_end":254,"column_start":8,"column_end":13},"name":"blend","qualname":"::traits::Pixel::blend","value":"pub fn blend(&mut Self, &Self)","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Blend the color of a given pixel into ourself, taking into account alpha channels\n","sig":null,"attributes":[{"value":"/ Blend the color of a given pixel into ourself, taking into account alpha channels","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":539679,"byte_end":539764,"line_start":253,"line_end":253,"column_start":5,"column_end":90}}]},{"kind":"Trait","id":{"krate":0,"index":2298},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":539886,"byte_end":539901,"line_start":259,"line_end":259,"column_start":15,"column_end":30},"name":"EncodableLayout","qualname":"::traits::seals::EncodableLayout","value":"EncodableLayout","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3753},"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":543911,"byte_end":543930,"line_start":108,"line_end":108,"column_start":12,"column_end":31},"name":"NonExhaustiveMarker","qualname":"::utils::NonExhaustiveMarker","value":"NonExhaustiveMarker {  }","parent":null,"children":[{"krate":0,"index":3754}],"decl_id":null,"docs":" A marker struct for __NonExhaustive enums.","sig":null,"attributes":[{"value":"/ A marker struct for __NonExhaustive enums.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":543188,"byte_end":543234,"line_start":97,"line_end":97,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":543235,"byte_end":543238,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ This is an empty type that can not be constructed. When an enum contains a tuple variant that","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":543239,"byte_end":543336,"line_start":99,"line_end":99,"column_start":1,"column_end":98}},{"value":"/ includes this type the optimizer can statically determined tha the branch is never taken while","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":543337,"byte_end":543435,"line_start":100,"line_end":100,"column_start":1,"column_end":99}},{"value":"/ at the same time the matching of the branch is required.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":543436,"byte_end":543496,"line_start":101,"line_end":101,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":543497,"byte_end":543500,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ The effect is thus very similar to the actual `#[non_exhaustive]` attribute with no runtime","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":543501,"byte_end":543596,"line_start":103,"line_end":103,"column_start":1,"column_end":96}},{"value":"/ costs. Also note that we use a dirty trick to not only hide this type from the doc but make it","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":543597,"byte_end":543695,"line_start":104,"line_end":104,"column_start":1,"column_end":99}},{"value":"/ inaccessible. The visibility in this module is pub but the module itself is not and the","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":543696,"byte_end":543787,"line_start":105,"line_end":105,"column_start":1,"column_end":92}},{"value":"/ top-level crate never exports the type.","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/utils/mod.rs","byte_start":543788,"byte_end":543831,"line_start":106,"line_end":106,"column_start":1,"column_end":44}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17347,"byte_end":17363,"line_start":194,"line_end":194,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18061,"byte_end":18074,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18850,"byte_end":18863,"line_start":245,"line_end":245,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19640,"byte_end":19654,"line_start":273,"line_end":273,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20033,"byte_end":20043,"line_start":288,"line_end":288,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20400,"byte_end":20410,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20526,"byte_end":20541,"line_start":308,"line_end":308,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20670,"byte_end":20685,"line_start":314,"line_end":314,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20935,"byte_end":20951,"line_start":323,"line_end":323,"column_start":32,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":21254,"byte_end":21264,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":21725,"byte_end":21735,"line_start":348,"line_end":348,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":22188,"byte_end":22204,"line_start":361,"line_end":361,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":23826,"byte_end":23842,"line_start":404,"line_end":404,"column_start":16,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":23870,"byte_end":23884,"line_start":406,"line_end":406,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":24919,"byte_end":24933,"line_start":438,"line_end":438,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":25138,"byte_end":25151,"line_start":447,"line_end":447,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":25612,"byte_end":25625,"line_start":465,"line_end":465,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":25830,"byte_end":25843,"line_start":474,"line_end":474,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":26290,"byte_end":26303,"line_start":486,"line_end":486,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":26508,"byte_end":26518,"line_start":495,"line_end":495,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":26901,"byte_end":26911,"line_start":505,"line_end":505,"column_start":16,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":26939,"byte_end":26954,"line_start":507,"line_end":507,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":32049,"byte_end":32057,"line_start":111,"line_end":111,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":165},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":76123,"byte_end":76130,"line_start":231,"line_end":231,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":76888,"byte_end":76896,"line_start":266,"line_end":266,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":321},{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":92116,"byte_end":92128,"line_start":363,"line_end":363,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111014,"byte_end":111020,"line_start":68,"line_end":68,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112402,"byte_end":112408,"line_start":115,"line_end":115,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":481},{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113194,"byte_end":113200,"line_start":137,"line_end":137,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":128199,"byte_end":128209,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133212,"byte_end":133224,"line_start":124,"line_end":124,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":577},{"krate":0,"index":579},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":590},{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":145819,"byte_end":145822,"line_start":437,"line_end":437,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146080,"byte_end":146091,"line_start":452,"line_end":452,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":603},{"krate":0,"index":605},{"krate":0,"index":607},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":618},{"krate":0,"index":620},{"krate":0,"index":622},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163246,"byte_end":163257,"line_start":873,"line_end":873,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169109,"byte_end":169113,"line_start":1028,"line_end":1028,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174698,"byte_end":174705,"line_start":1161,"line_end":1161,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":179081,"byte_end":179092,"line_start":1275,"line_end":1275,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":672},{"krate":0,"index":673}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":179701,"byte_end":179712,"line_start":1294,"line_end":1294,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":180316,"byte_end":180320,"line_start":1312,"line_end":1312,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":181567,"byte_end":181574,"line_start":1357,"line_end":1357,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":182841,"byte_end":182848,"line_start":1402,"line_end":1402,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":183743,"byte_end":183753,"line_start":1431,"line_end":1431,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":712}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":183905,"byte_end":183928,"line_start":1435,"line_end":1435,"column_start":31,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":184136,"byte_end":184159,"line_start":1440,"line_end":1440,"column_start":31,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":184733,"byte_end":184738,"line_start":1454,"line_end":1454,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":717}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":185673,"byte_end":185678,"line_start":1478,"line_end":1478,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":185703,"byte_end":185713,"line_start":1480,"line_end":1480,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":194607,"byte_end":194618,"line_start":100,"line_end":100,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":797},{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":196541,"byte_end":196553,"line_start":158,"line_end":158,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":800}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":198624,"byte_end":198634,"line_start":195,"line_end":195,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":198790,"byte_end":198802,"line_start":201,"line_end":201,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":199149,"byte_end":199166,"line_start":216,"line_end":216,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":805}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":207823,"byte_end":207831,"line_start":479,"line_end":479,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":828},{"krate":0,"index":829}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":209217,"byte_end":209226,"line_start":523,"line_end":523,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":210491,"byte_end":210506,"line_start":578,"line_end":578,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":212362,"byte_end":212372,"line_start":630,"line_end":630,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":889},{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":893},{"krate":0,"index":895},{"krate":0,"index":898},{"krate":0,"index":900},{"krate":0,"index":903},{"krate":0,"index":905},{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":244276,"byte_end":244285,"line_start":1420,"line_end":1420,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":914},{"krate":0,"index":915}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":244705,"byte_end":244715,"line_start":1434,"line_end":1434,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":923}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":245390,"byte_end":245400,"line_start":1459,"line_end":1459,"column_start":55,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":927}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247159,"byte_end":247169,"line_start":28,"line_end":28,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":254284,"byte_end":254294,"line_start":225,"line_end":225,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":970}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":259392,"byte_end":259403,"line_start":18,"line_end":18,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1004}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":260112,"byte_end":260122,"line_start":40,"line_end":40,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1012},{"krate":0,"index":1013}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":260535,"byte_end":260546,"line_start":54,"line_end":54,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1019},{"krate":0,"index":1020},{"krate":0,"index":1021}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":262292,"byte_end":262301,"line_start":114,"line_end":114,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1024}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":262559,"byte_end":262569,"line_start":125,"line_end":125,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1027}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":288841,"byte_end":288850,"line_start":170,"line_end":170,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1106}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":292359,"byte_end":292371,"line_start":306,"line_end":306,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1108}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":292709,"byte_end":292721,"line_start":318,"line_end":318,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":293542,"byte_end":293553,"line_start":354,"line_end":354,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1137},{"krate":0,"index":1141}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":304952,"byte_end":304963,"line_start":682,"line_end":682,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1152}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":325507,"byte_end":325516,"line_start":45,"line_end":45,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1245}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":326274,"byte_end":326283,"line_start":69,"line_end":69,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1248},{"krate":0,"index":1249}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":327538,"byte_end":327548,"line_start":115,"line_end":115,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1258}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":332162,"byte_end":332172,"line_start":204,"line_end":204,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":1273}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":334233,"byte_end":334244,"line_start":267,"line_end":267,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1284},{"krate":0,"index":1285},{"krate":0,"index":1287}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":339792,"byte_end":339803,"line_start":407,"line_end":407,"column_start":49,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1291}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":339941,"byte_end":339954,"line_start":411,"line_end":411,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1298},{"krate":0,"index":1299}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":342563,"byte_end":342573,"line_start":497,"line_end":497,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":346408,"byte_end":346418,"line_start":572,"line_end":572,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1316}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":347653,"byte_end":347663,"line_start":604,"line_end":604,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1323}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":348680,"byte_end":348695,"line_start":632,"line_end":632,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1326}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":348781,"byte_end":348791,"line_start":638,"line_end":638,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1328}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":350424,"byte_end":350430,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1340},{"krate":0,"index":1341}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":351020,"byte_end":351026,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1344},{"krate":0,"index":1345}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":351545,"byte_end":351550,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1353}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352499,"byte_end":352504,"line_start":102,"line_end":102,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1358},{"krate":0,"index":1359},{"krate":0,"index":1360},{"krate":0,"index":1361}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":358540,"byte_end":358548,"line_start":258,"line_end":258,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1368}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":362009,"byte_end":362015,"line_start":26,"line_end":26,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1414},{"krate":0,"index":1415}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":362259,"byte_end":362265,"line_start":38,"line_end":38,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1420}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":362414,"byte_end":362420,"line_start":47,"line_end":47,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1424}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":362629,"byte_end":362635,"line_start":57,"line_end":57,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1428}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":362761,"byte_end":362767,"line_start":63,"line_end":63,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1431}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":363182,"byte_end":363191,"line_start":83,"line_end":83,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1439},{"krate":0,"index":1440}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":363447,"byte_end":363456,"line_start":95,"line_end":95,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1445}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":363605,"byte_end":363614,"line_start":104,"line_end":104,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1449}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":363862,"byte_end":363871,"line_start":116,"line_end":116,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1453}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":364437,"byte_end":364441,"line_start":140,"line_end":140,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1461}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":365340,"byte_end":365344,"line_start":161,"line_end":161,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1465},{"krate":0,"index":1466}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":365754,"byte_end":365758,"line_start":177,"line_end":177,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1470}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":365907,"byte_end":365911,"line_start":186,"line_end":186,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1474}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":366278,"byte_end":366282,"line_start":200,"line_end":200,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1477}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":366406,"byte_end":366410,"line_start":206,"line_end":206,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1480}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":366997,"byte_end":367004,"line_start":230,"line_end":230,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1488}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":367925,"byte_end":367932,"line_start":251,"line_end":251,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1492},{"krate":0,"index":1493}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":368355,"byte_end":368362,"line_start":267,"line_end":267,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1497}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":368511,"byte_end":368518,"line_start":276,"line_end":276,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1501}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":368900,"byte_end":368907,"line_start":290,"line_end":290,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1504}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":369363,"byte_end":369378,"line_start":313,"line_end":313,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1515},{"krate":0,"index":1516}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":369781,"byte_end":369796,"line_start":331,"line_end":331,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1521}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":369922,"byte_end":369937,"line_start":340,"line_end":340,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1524}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":370113,"byte_end":370128,"line_start":349,"line_end":349,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1527}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":370667,"byte_end":370680,"line_start":374,"line_end":374,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1537},{"krate":0,"index":1538}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":371218,"byte_end":371231,"line_start":398,"line_end":398,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1543}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":371355,"byte_end":371368,"line_start":407,"line_end":407,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1546}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":371538,"byte_end":371551,"line_start":416,"line_end":416,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1549}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":372079,"byte_end":372097,"line_start":441,"line_end":441,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1560},{"krate":0,"index":1561}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":372508,"byte_end":372526,"line_start":459,"line_end":459,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1566}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":372657,"byte_end":372675,"line_start":468,"line_end":468,"column_start":31,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1569}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":373223,"byte_end":373239,"line_start":493,"line_end":493,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1579},{"krate":0,"index":1580}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":373786,"byte_end":373802,"line_start":517,"line_end":517,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1585}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":373931,"byte_end":373947,"line_start":526,"line_end":526,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1588}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376969,"byte_end":376980,"line_start":620,"line_end":620,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1592},{"krate":0,"index":1593},{"krate":0,"index":1594},{"krate":0,"index":1595},{"krate":0,"index":1596},{"krate":0,"index":1597},{"krate":0,"index":1598},{"krate":0,"index":1599},{"krate":0,"index":1600},{"krate":0,"index":1601},{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":1605},{"krate":0,"index":1608},{"krate":0,"index":1609},{"krate":0,"index":1610},{"krate":0,"index":1611},{"krate":0,"index":1612},{"krate":0,"index":1613}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":383660,"byte_end":383671,"line_start":809,"line_end":809,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1617},{"krate":0,"index":1618},{"krate":0,"index":1619},{"krate":0,"index":1620},{"krate":0,"index":1621},{"krate":0,"index":1622},{"krate":0,"index":1623}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":386269,"byte_end":386280,"line_start":884,"line_end":884,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1627}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":386932,"byte_end":386943,"line_start":909,"line_end":909,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1632}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":387686,"byte_end":387697,"line_start":936,"line_end":936,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1637},{"krate":0,"index":1638}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":387961,"byte_end":387972,"line_start":949,"line_end":949,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1642}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":388238,"byte_end":388249,"line_start":960,"line_end":960,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1646},{"krate":0,"index":1647}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":388520,"byte_end":388531,"line_start":973,"line_end":973,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1651}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":388792,"byte_end":388803,"line_start":984,"line_end":984,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1655}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":389162,"byte_end":389173,"line_start":999,"line_end":999,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1659},{"krate":0,"index":1660},{"krate":0,"index":1661},{"krate":0,"index":1662},{"krate":0,"index":1663},{"krate":0,"index":1664},{"krate":0,"index":1665}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":389997,"byte_end":390008,"line_start":1032,"line_end":1032,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1669},{"krate":0,"index":1670},{"krate":0,"index":1671},{"krate":0,"index":1672},{"krate":0,"index":1673},{"krate":0,"index":1674},{"krate":0,"index":1675}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":393593,"byte_end":393604,"line_start":1124,"line_end":1124,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1680},{"krate":0,"index":1681},{"krate":0,"index":1682},{"krate":0,"index":1684},{"krate":0,"index":1685}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":396038,"byte_end":396047,"line_start":1202,"line_end":1202,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1690}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":397445,"byte_end":397456,"line_start":1240,"line_end":1240,"column_start":67,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":1698}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":407501,"byte_end":407510,"line_start":37,"line_end":37,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1724},{"krate":0,"index":1726},{"krate":0,"index":1727}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":411219,"byte_end":411236,"line_start":148,"line_end":148,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1729}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":412524,"byte_end":412541,"line_start":182,"line_end":182,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1731}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":418637,"byte_end":418638,"line_start":388,"line_end":388,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1738}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":419076,"byte_end":419077,"line_start":402,"line_end":402,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1745}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":420333,"byte_end":420337,"line_start":446,"line_end":446,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1756}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":420566,"byte_end":420570,"line_start":454,"line_end":454,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1759}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":420798,"byte_end":420802,"line_start":462,"line_end":462,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1762}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":421027,"byte_end":421031,"line_start":470,"line_end":470,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1765}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":421258,"byte_end":421262,"line_start":478,"line_end":478,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1768}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":421410,"byte_end":421414,"line_start":485,"line_end":485,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1770}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":421658,"byte_end":421662,"line_start":494,"line_end":494,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1772}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":421906,"byte_end":421910,"line_start":503,"line_end":503,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1774}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":422096,"byte_end":422100,"line_start":510,"line_end":510,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1776}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":422286,"byte_end":422290,"line_start":517,"line_end":517,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1778}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":422527,"byte_end":422532,"line_start":527,"line_end":527,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1781}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":422794,"byte_end":422799,"line_start":536,"line_end":536,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1784}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":423060,"byte_end":423065,"line_start":545,"line_end":545,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1787}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":423330,"byte_end":423335,"line_start":554,"line_end":554,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1790}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":423601,"byte_end":423606,"line_start":563,"line_end":563,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1793}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":423819,"byte_end":423824,"line_start":571,"line_end":571,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1795}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":424124,"byte_end":424129,"line_start":581,"line_end":581,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1797}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":424472,"byte_end":424476,"line_start":594,"line_end":594,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1800}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":424777,"byte_end":424781,"line_start":605,"line_end":605,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1803}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":425083,"byte_end":425087,"line_start":616,"line_end":616,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1806}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":425388,"byte_end":425392,"line_start":627,"line_end":627,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1809}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":425693,"byte_end":425697,"line_start":638,"line_end":638,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1812}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":425974,"byte_end":425978,"line_start":649,"line_end":649,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1814}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":426340,"byte_end":426344,"line_start":660,"line_end":660,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1816}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":426741,"byte_end":426745,"line_start":674,"line_end":674,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1819}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":427046,"byte_end":427050,"line_start":685,"line_end":685,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1822}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":427352,"byte_end":427356,"line_start":696,"line_end":696,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1825}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":427657,"byte_end":427661,"line_start":707,"line_end":707,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1828}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":427962,"byte_end":427966,"line_start":718,"line_end":718,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1831}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":428290,"byte_end":428293,"line_start":732,"line_end":732,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1834}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":428562,"byte_end":428565,"line_start":742,"line_end":742,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1837}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":428833,"byte_end":428836,"line_start":752,"line_end":752,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1840}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":429101,"byte_end":429104,"line_start":762,"line_end":762,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1843}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":429368,"byte_end":429371,"line_start":772,"line_end":772,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1846}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":429609,"byte_end":429612,"line_start":782,"line_end":782,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1848}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":429837,"byte_end":429840,"line_start":790,"line_end":790,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1850}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":430113,"byte_end":430116,"line_start":801,"line_end":801,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1853}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":430384,"byte_end":430387,"line_start":811,"line_end":811,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1856}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":430652,"byte_end":430655,"line_start":822,"line_end":822,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1859}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":430925,"byte_end":430928,"line_start":832,"line_end":832,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1862}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":431192,"byte_end":431195,"line_start":842,"line_end":842,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1865}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":432861,"byte_end":432866,"line_start":896,"line_end":896,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1871}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":433871,"byte_end":433875,"line_start":929,"line_end":929,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1874}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":433985,"byte_end":433989,"line_start":935,"line_end":935,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1877}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":436197,"byte_end":436201,"line_start":993,"line_end":993,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1880}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":438407,"byte_end":438410,"line_start":1049,"line_end":1049,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1883}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":438519,"byte_end":438522,"line_start":1055,"line_end":1055,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1886}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":438741,"byte_end":438746,"line_start":1068,"line_end":1068,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1891}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":438919,"byte_end":438923,"line_start":1077,"line_end":1077,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1894}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":439111,"byte_end":439115,"line_start":1088,"line_end":1088,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1897}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":439328,"byte_end":439332,"line_start":1099,"line_end":1099,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1900}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":439545,"byte_end":439548,"line_start":1110,"line_end":1110,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1903}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":439810,"byte_end":439813,"line_start":1124,"line_end":1124,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1906}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":451349,"byte_end":451361,"line_start":134,"line_end":134,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1953},{"krate":0,"index":1954},{"krate":0,"index":1955},{"krate":0,"index":1956},{"krate":0,"index":1957},{"krate":0,"index":1958},{"krate":0,"index":1959},{"krate":0,"index":1960},{"krate":0,"index":1961},{"krate":0,"index":1962},{"krate":0,"index":1963},{"krate":0,"index":1966},{"krate":0,"index":1967},{"krate":0,"index":1968},{"krate":0,"index":1969},{"krate":0,"index":1970},{"krate":0,"index":1971},{"krate":0,"index":1972},{"krate":0,"index":1973},{"krate":0,"index":1974},{"krate":0,"index":1975},{"krate":0,"index":1976},{"krate":0,"index":1977},{"krate":0,"index":1978},{"krate":0,"index":1979},{"krate":0,"index":1980},{"krate":0,"index":1981},{"krate":0,"index":1982},{"krate":0,"index":1983},{"krate":0,"index":1984},{"krate":0,"index":1985},{"krate":0,"index":1986},{"krate":0,"index":1987},{"krate":0,"index":1988},{"krate":0,"index":1989},{"krate":0,"index":1990},{"krate":0,"index":1991},{"krate":0,"index":1992},{"krate":0,"index":1993},{"krate":0,"index":1994},{"krate":0,"index":1995},{"krate":0,"index":1996},{"krate":0,"index":1997},{"krate":0,"index":1998},{"krate":0,"index":1999},{"krate":0,"index":2000},{"krate":0,"index":2001},{"krate":0,"index":2002},{"krate":0,"index":2003},{"krate":0,"index":2004},{"krate":0,"index":2005},{"krate":0,"index":2006},{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":2009},{"krate":0,"index":2010},{"krate":0,"index":2011},{"krate":0,"index":2012},{"krate":0,"index":2013},{"krate":0,"index":2014},{"krate":0,"index":2015},{"krate":0,"index":2016},{"krate":0,"index":2017},{"krate":0,"index":2018},{"krate":0,"index":2019},{"krate":0,"index":2020},{"krate":0,"index":2021},{"krate":0,"index":2022},{"krate":0,"index":2025},{"krate":0,"index":2027}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":476001,"byte_end":476013,"line_start":817,"line_end":817,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2030},{"krate":0,"index":2031},{"krate":0,"index":2032},{"krate":0,"index":2033},{"krate":0,"index":2034},{"krate":0,"index":2035}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":476546,"byte_end":476558,"line_start":839,"line_end":839,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2037},{"krate":0,"index":2038},{"krate":0,"index":2039},{"krate":0,"index":2040},{"krate":0,"index":2041}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490835,"byte_end":490846,"line_start":64,"line_end":64,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2082},{"krate":0,"index":2084}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":493634,"byte_end":493651,"line_start":144,"line_end":144,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2086}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":494951,"byte_end":494966,"line_start":181,"line_end":181,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2094},{"krate":0,"index":2095}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":502836,"byte_end":502844,"line_start":365,"line_end":365,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2110},{"krate":0,"index":2111},{"krate":0,"index":2112}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":509492,"byte_end":509498,"line_start":555,"line_end":555,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2140},{"krate":0,"index":2141}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":509966,"byte_end":509972,"line_start":577,"line_end":577,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2144}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":518361,"byte_end":518369,"line_start":815,"line_end":815,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2183},{"krate":0,"index":2184},{"krate":0,"index":2185}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":519506,"byte_end":519514,"line_start":856,"line_end":856,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2188},{"krate":0,"index":2189},{"krate":0,"index":2190},{"krate":0,"index":2191},{"krate":0,"index":2192},{"krate":0,"index":2193},{"krate":0,"index":2194}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":520335,"byte_end":520343,"line_start":888,"line_end":888,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2197},{"krate":0,"index":2198},{"krate":0,"index":2199},{"krate":0,"index":2200},{"krate":0,"index":2201},{"krate":0,"index":2202}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8223,"byte_end":8228,"line_start":181,"line_end":181,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":55}},{"kind":"Mod","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8621,"byte_end":8625,"line_start":200,"line_end":200,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":128}},{"kind":"Mod","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/mod.rs","byte_start":27888,"byte_end":27890,"line_start":2,"line_end":2,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":129}},{"kind":"Mod","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/mod.rs","byte_start":27900,"byte_end":27905,"line_start":3,"line_end":3,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":170}},{"kind":"Mod","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8666,"byte_end":8674,"line_start":203,"line_end":203,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":175}},{"kind":"Mod","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/mod.rs","byte_start":45825,"byte_end":45833,"line_start":29,"line_end":29,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":265}},{"kind":"Mod","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8700,"byte_end":8702,"line_start":206,"line_end":206,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":446}},{"kind":"Mod","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8748,"byte_end":8752,"line_start":209,"line_end":209,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":542}},{"kind":"Mod","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":8803,"byte_end":8806,"line_start":213,"line_end":213,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":721}},{"kind":"Mod","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":9026,"byte_end":9030,"line_start":225,"line_end":225,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":973}},{"kind":"Mod","span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/lib.rs","byte_start":9064,"byte_end":9067,"line_start":227,"line_end":227,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1194}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":17347,"byte_end":17363,"line_start":194,"line_end":194,"column_start":6,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2336},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18061,"byte_end":18074,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":18850,"byte_end":18863,"line_start":245,"line_end":245,"column_start":6,"column_end":19},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2365},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":19640,"byte_end":19654,"line_start":273,"line_end":273,"column_start":6,"column_end":20},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20033,"byte_end":20043,"line_start":288,"line_end":288,"column_start":6,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20400,"byte_end":20410,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2315},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20526,"byte_end":20541,"line_start":308,"line_end":308,"column_start":28,"column_end":43},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2430},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20670,"byte_end":20685,"line_start":314,"line_end":314,"column_start":36,"column_end":51},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2430},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":20935,"byte_end":20951,"line_start":323,"line_end":323,"column_start":32,"column_end":48},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2336},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":21254,"byte_end":21264,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2315},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":21725,"byte_end":21735,"line_start":348,"line_end":348,"column_start":16,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2315},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":22188,"byte_end":22204,"line_start":361,"line_end":361,"column_start":23,"column_end":39},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2336},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":23826,"byte_end":23842,"line_start":404,"line_end":404,"column_start":16,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2336},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":23870,"byte_end":23884,"line_start":406,"line_end":406,"column_start":23,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2370},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":24919,"byte_end":24933,"line_start":438,"line_end":438,"column_start":16,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":2370},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":25138,"byte_end":25151,"line_start":447,"line_end":447,"column_start":23,"column_end":36},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":2365},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":25612,"byte_end":25625,"line_start":465,"line_end":465,"column_start":16,"column_end":29},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2365},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":25830,"byte_end":25843,"line_start":474,"line_end":474,"column_start":23,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2399},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":26290,"byte_end":26303,"line_start":486,"line_end":486,"column_start":16,"column_end":29},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":2399},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":26508,"byte_end":26518,"line_start":495,"line_end":495,"column_start":23,"column_end":33},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2404},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":26901,"byte_end":26911,"line_start":505,"line_end":505,"column_start":16,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2404},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/error.rs","byte_start":26939,"byte_end":26954,"line_start":507,"line_end":507,"column_start":23,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2430},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/math/nq.rs","byte_start":32049,"byte_end":32057,"line_start":111,"line_end":111,"column_start":6,"column_end":14},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":145},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":76123,"byte_end":76130,"line_start":231,"line_end":231,"column_start":19,"column_end":26},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":2487},"to":{"krate":0,"index":304}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/colorops.rs","byte_start":76888,"byte_end":76896,"line_start":266,"line_end":266,"column_start":23,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":145},"to":{"krate":0,"index":304}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/imageops/sample.rs","byte_start":92116,"byte_end":92128,"line_start":363,"line_end":363,"column_start":34,"column_end":46},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":369},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":111014,"byte_end":111020,"line_start":68,"line_end":68,"column_start":15,"column_end":21},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":112402,"byte_end":112408,"line_start":115,"line_end":115,"column_start":6,"column_end":12},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/reader.rs","byte_start":113194,"byte_end":113200,"line_start":137,"line_end":137,"column_start":25,"column_end":31},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/io/free_functions.rs","byte_start":128199,"byte_end":128209,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":2315},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":133212,"byte_end":133224,"line_start":124,"line_end":124,"column_start":6,"column_end":18},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":2522},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":145819,"byte_end":145822,"line_start":437,"line_end":437,"column_start":6,"column_end":9},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":2544},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":146080,"byte_end":146091,"line_start":452,"line_end":452,"column_start":14,"column_end":25},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":2511},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":163246,"byte_end":163257,"line_start":873,"line_end":873,"column_start":22,"column_end":33},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":2511},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":169109,"byte_end":169113,"line_start":1028,"line_end":1028,"column_start":24,"column_end":28},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":2572},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":174698,"byte_end":174705,"line_start":1161,"line_end":1161,"column_start":24,"column_end":31},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":2585},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":179081,"byte_end":179092,"line_start":1275,"line_end":1275,"column_start":40,"column_end":51},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2511},"to":{"krate":2,"index":2179}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":179701,"byte_end":179712,"line_start":1294,"line_end":1294,"column_start":43,"column_end":54},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":2511},"to":{"krate":2,"index":2183}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":180316,"byte_end":180320,"line_start":1312,"line_end":1312,"column_start":45,"column_end":49},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2572},"to":{"krate":0,"index":2145}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":181567,"byte_end":181574,"line_start":1357,"line_end":1357,"column_start":45,"column_end":52},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2585},"to":{"krate":0,"index":2145}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":182841,"byte_end":182848,"line_start":1402,"line_end":1402,"column_start":41,"column_end":48},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2585},"to":{"krate":0,"index":2158}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":183743,"byte_end":183753,"line_start":1431,"line_end":1431,"column_start":22,"column_end":32},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2315},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":183905,"byte_end":183928,"line_start":1435,"line_end":1435,"column_start":31,"column_end":54},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2647},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":184136,"byte_end":184159,"line_start":1440,"line_end":1440,"column_start":31,"column_end":54},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2647},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":184733,"byte_end":184738,"line_start":1454,"line_end":1454,"column_start":23,"column_end":28},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":2598},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":185673,"byte_end":185678,"line_start":1478,"line_end":1478,"column_start":23,"column_end":28},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":2598},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/flat.rs","byte_start":185703,"byte_end":185713,"line_start":1480,"line_end":1480,"column_start":21,"column_end":31},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2622},"to":{"krate":2,"index":1690}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":194607,"byte_end":194618,"line_start":100,"line_end":100,"column_start":23,"column_end":34},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":792},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":196541,"byte_end":196553,"line_start":158,"line_end":158,"column_start":23,"column_end":35},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2705},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":198624,"byte_end":198634,"line_start":195,"line_end":195,"column_start":29,"column_end":39},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2315},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":198790,"byte_end":198802,"line_start":201,"line_end":201,"column_start":23,"column_end":35},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":2705},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":199149,"byte_end":199166,"line_start":216,"line_end":216,"column_start":23,"column_end":40},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":2782},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":207823,"byte_end":207831,"line_start":479,"line_end":479,"column_start":6,"column_end":14},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":2813},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":209217,"byte_end":209226,"line_start":523,"line_end":523,"column_start":6,"column_end":15},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":2823},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":210491,"byte_end":210506,"line_start":578,"line_end":578,"column_start":32,"column_end":47},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":865},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":212362,"byte_end":212372,"line_start":630,"line_end":630,"column_start":22,"column_end":32},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":832},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":244276,"byte_end":244285,"line_start":1420,"line_end":1420,"column_start":18,"column_end":27},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":907},"to":{"krate":1,"index":2961}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":244705,"byte_end":244715,"line_start":1434,"line_end":1434,"column_start":52,"column_end":62},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":832},"to":{"krate":0,"index":2113}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/decoder.rs","byte_start":245390,"byte_end":245400,"line_start":1459,"line_end":1459,"column_start":55,"column_end":65},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":832},"to":{"krate":0,"index":2126}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":247159,"byte_end":247169,"line_start":28,"line_end":28,"column_start":25,"column_end":35},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":948},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/bmp/encoder.rs","byte_start":254284,"byte_end":254294,"line_start":225,"line_end":225,"column_start":37,"column_end":47},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":948},"to":{"krate":0,"index":2135}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":259392,"byte_end":259403,"line_start":18,"line_end":18,"column_start":15,"column_end":26},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":998},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":260112,"byte_end":260122,"line_start":40,"line_end":40,"column_start":18,"column_end":28},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1005},"to":{"krate":1,"index":2961}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":260535,"byte_end":260546,"line_start":54,"line_end":54,"column_start":45,"column_end":56},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":998},"to":{"krate":0,"index":2113}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":262292,"byte_end":262301,"line_start":114,"line_end":114,"column_start":6,"column_end":15},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2995},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/decoder.rs","byte_start":262559,"byte_end":262569,"line_start":125,"line_end":125,"column_start":6,"column_end":16},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":288841,"byte_end":288850,"line_start":170,"line_end":170,"column_start":25,"column_end":34},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1092},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":292359,"byte_end":292371,"line_start":306,"line_end":306,"column_start":6,"column_end":18},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2870},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":292709,"byte_end":292721,"line_start":318,"line_end":318,"column_start":18,"column_end":30},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2870},"to":{"krate":2,"index":1915}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":293542,"byte_end":293553,"line_start":354,"line_end":354,"column_start":20,"column_end":31},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1111},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/jpeg/encoder.rs","byte_start":304952,"byte_end":304963,"line_start":682,"line_end":682,"column_start":37,"column_end":48},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1111},"to":{"krate":0,"index":2135}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":325507,"byte_end":325516,"line_start":45,"line_end":45,"column_start":15,"column_end":24},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1236},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":326274,"byte_end":326283,"line_start":69,"line_end":69,"column_start":24,"column_end":33},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1236},"to":{"krate":1,"index":2961}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":327538,"byte_end":327548,"line_start":115,"line_end":115,"column_start":15,"column_end":25},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":332162,"byte_end":332172,"line_start":204,"line_end":204,"column_start":45,"column_end":55},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1250},"to":{"krate":0,"index":2113}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":334233,"byte_end":334244,"line_start":267,"line_end":267,"column_start":15,"column_end":26},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":339792,"byte_end":339803,"line_start":407,"line_end":407,"column_start":49,"column_end":60},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1274},"to":{"krate":0,"index":2132}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":339941,"byte_end":339954,"line_start":411,"line_end":411,"column_start":36,"column_end":49},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1292},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":342563,"byte_end":342573,"line_start":497,"line_end":497,"column_start":16,"column_end":26},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":346408,"byte_end":346418,"line_start":572,"line_end":572,"column_start":33,"column_end":43},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1300},"to":{"krate":0,"index":2135}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":347653,"byte_end":347663,"line_start":604,"line_end":604,"column_start":6,"column_end":16},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":348680,"byte_end":348695,"line_start":632,"line_end":632,"column_start":18,"column_end":33},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2885},"to":{"krate":2,"index":1915}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/png.rs","byte_start":348781,"byte_end":348791,"line_start":638,"line_end":638,"column_start":18,"column_end":28},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2911},"to":{"krate":2,"index":1915}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":350424,"byte_end":350430,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1335},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":351020,"byte_end":351026,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1335},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":351545,"byte_end":351550,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":2937},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":352499,"byte_end":352504,"line_start":102,"line_end":102,"column_start":6,"column_end":11},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2944},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/animation.rs","byte_start":358540,"byte_end":358548,"line_start":258,"line_end":258,"column_start":22,"column_end":30},"kind":{"Impl":{"id":87}},"from":{"krate":2,"index":32407},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":362009,"byte_end":362015,"line_start":26,"line_end":26,"column_start":38,"column_end":44},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1407},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":362259,"byte_end":362265,"line_start":38,"line_end":38,"column_start":47,"column_end":53},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1407},"to":{"krate":2,"index":4944}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":362414,"byte_end":362420,"line_start":47,"line_end":47,"column_start":49,"column_end":55},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1407},"to":{"krate":2,"index":4921}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":362629,"byte_end":362635,"line_start":57,"line_end":57,"column_start":26,"column_end":32},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1407},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":362761,"byte_end":362767,"line_start":63,"line_end":63,"column_start":31,"column_end":37},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1407},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":363182,"byte_end":363191,"line_start":83,"line_end":83,"column_start":38,"column_end":47},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1432},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":363447,"byte_end":363456,"line_start":95,"line_end":95,"column_start":47,"column_end":56},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1432},"to":{"krate":2,"index":4944}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":363605,"byte_end":363614,"line_start":104,"line_end":104,"column_start":49,"column_end":58},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1432},"to":{"krate":2,"index":4921}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":363862,"byte_end":363871,"line_start":116,"line_end":116,"column_start":31,"column_end":40},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1432},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":364437,"byte_end":364441,"line_start":140,"line_end":140,"column_start":25,"column_end":29},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1454},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":365340,"byte_end":365344,"line_start":161,"line_end":161,"column_start":38,"column_end":42},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1454},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":365754,"byte_end":365758,"line_start":177,"line_end":177,"column_start":47,"column_end":51},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1454},"to":{"krate":2,"index":4944}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":365907,"byte_end":365911,"line_start":186,"line_end":186,"column_start":49,"column_end":53},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1454},"to":{"krate":2,"index":4921}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":366278,"byte_end":366282,"line_start":200,"line_end":200,"column_start":26,"column_end":30},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1454},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":366406,"byte_end":366410,"line_start":206,"line_end":206,"column_start":31,"column_end":35},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1454},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":366997,"byte_end":367004,"line_start":230,"line_end":230,"column_start":25,"column_end":32},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1481},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":367925,"byte_end":367932,"line_start":251,"line_end":251,"column_start":38,"column_end":45},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1481},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":368355,"byte_end":368362,"line_start":267,"line_end":267,"column_start":47,"column_end":54},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1481},"to":{"krate":2,"index":4944}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":368511,"byte_end":368518,"line_start":276,"line_end":276,"column_start":49,"column_end":56},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1481},"to":{"krate":2,"index":4921}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":368900,"byte_end":368907,"line_start":290,"line_end":290,"column_start":31,"column_end":38},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1481},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":369363,"byte_end":369378,"line_start":313,"line_end":313,"column_start":38,"column_end":53},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1505},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":369781,"byte_end":369796,"line_start":331,"line_end":331,"column_start":47,"column_end":62},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1505},"to":{"krate":2,"index":4944}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":369922,"byte_end":369937,"line_start":340,"line_end":340,"column_start":26,"column_end":41},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1505},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":370113,"byte_end":370128,"line_start":349,"line_end":349,"column_start":31,"column_end":46},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1505},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":370667,"byte_end":370680,"line_start":374,"line_end":374,"column_start":38,"column_end":51},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1528},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":371218,"byte_end":371231,"line_start":398,"line_end":398,"column_start":47,"column_end":60},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1528},"to":{"krate":2,"index":4944}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":371355,"byte_end":371368,"line_start":407,"line_end":407,"column_start":26,"column_end":39},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1528},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":371538,"byte_end":371551,"line_start":416,"line_end":416,"column_start":31,"column_end":44},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1528},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":372079,"byte_end":372097,"line_start":441,"line_end":441,"column_start":38,"column_end":56},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1550},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":372508,"byte_end":372526,"line_start":459,"line_end":459,"column_start":47,"column_end":65},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1550},"to":{"krate":2,"index":4944}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":372657,"byte_end":372675,"line_start":468,"line_end":468,"column_start":31,"column_end":49},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1550},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":373223,"byte_end":373239,"line_start":493,"line_end":493,"column_start":38,"column_end":54},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1570},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":373786,"byte_end":373802,"line_start":517,"line_end":517,"column_start":47,"column_end":63},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1570},"to":{"krate":2,"index":4944}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":373931,"byte_end":373947,"line_start":526,"line_end":526,"column_start":31,"column_end":47},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1570},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":376969,"byte_end":376980,"line_start":620,"line_end":620,"column_start":20,"column_end":31},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2964},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":383660,"byte_end":383671,"line_start":809,"line_end":809,"column_start":20,"column_end":31},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2964},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":386269,"byte_end":386280,"line_start":884,"line_end":884,"column_start":20,"column_end":31},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2964},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":386932,"byte_end":386943,"line_start":909,"line_end":909,"column_start":20,"column_end":31},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2964},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":387686,"byte_end":387697,"line_start":936,"line_end":936,"column_start":30,"column_end":41},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2964},"to":{"krate":2,"index":2098}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":387961,"byte_end":387972,"line_start":949,"line_end":949,"column_start":33,"column_end":44},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2964},"to":{"krate":2,"index":2111}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":388238,"byte_end":388249,"line_start":960,"line_end":960,"column_start":42,"column_end":53},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2964},"to":{"krate":2,"index":2179}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":388520,"byte_end":388531,"line_start":973,"line_end":973,"column_start":45,"column_end":56},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2964},"to":{"krate":2,"index":2183}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":388792,"byte_end":388803,"line_start":984,"line_end":984,"column_start":30,"column_end":41},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2964},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":389162,"byte_end":389173,"line_start":999,"line_end":999,"column_start":41,"column_end":52},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2964},"to":{"krate":0,"index":2145}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":389997,"byte_end":390008,"line_start":1032,"line_end":1032,"column_start":37,"column_end":48},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2964},"to":{"krate":0,"index":2158}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":393593,"byte_end":393604,"line_start":1124,"line_end":1124,"column_start":26,"column_end":37},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":2964},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":396038,"byte_end":396047,"line_start":1202,"line_end":1202,"column_start":6,"column_end":15},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1701},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/buffer.rs","byte_start":397445,"byte_end":397456,"line_start":1240,"line_end":1240,"column_start":67,"column_end":78},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":2964},"to":{"krate":0,"index":1686}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":407501,"byte_end":407510,"line_start":37,"line_end":37,"column_start":6,"column_end":15},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":2995},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":411219,"byte_end":411236,"line_start":148,"line_end":148,"column_start":6,"column_end":23},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":3034},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":412524,"byte_end":412541,"line_start":182,"line_end":182,"column_start":26,"column_end":43},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":3034},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":418637,"byte_end":418638,"line_start":388,"line_end":388,"column_start":32,"column_end":33},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1737},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":419076,"byte_end":419077,"line_start":402,"line_end":402,"column_start":29,"column_end":30},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1744},"to":{"krate":0,"index":1739}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":420333,"byte_end":420337,"line_start":446,"line_end":446,"column_start":53,"column_end":57},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":3458},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":420566,"byte_end":420570,"line_start":454,"line_end":454,"column_start":53,"column_end":57},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":3458},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":420798,"byte_end":420802,"line_start":462,"line_end":462,"column_start":52,"column_end":56},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":3458},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":421027,"byte_end":421031,"line_start":470,"line_end":470,"column_start":52,"column_end":56},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":3458},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":421258,"byte_end":421262,"line_start":478,"line_end":478,"column_start":54,"column_end":58},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":3458},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":421410,"byte_end":421414,"line_start":485,"line_end":485,"column_start":31,"column_end":35},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":3458},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":421658,"byte_end":421662,"line_start":494,"line_end":494,"column_start":30,"column_end":34},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":3458},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":421906,"byte_end":421910,"line_start":503,"line_end":503,"column_start":31,"column_end":35},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":3458},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":422096,"byte_end":422100,"line_start":510,"line_end":510,"column_start":30,"column_end":34},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":3458},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":422286,"byte_end":422290,"line_start":517,"line_end":517,"column_start":32,"column_end":36},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":3458},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":422527,"byte_end":422532,"line_start":527,"line_end":527,"column_start":53,"column_end":58},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":3545},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":422794,"byte_end":422799,"line_start":536,"line_end":536,"column_start":53,"column_end":58},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":3545},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":423060,"byte_end":423065,"line_start":545,"line_end":545,"column_start":52,"column_end":57},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":3545},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":423330,"byte_end":423335,"line_start":554,"line_end":554,"column_start":52,"column_end":57},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":3545},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":423601,"byte_end":423606,"line_start":563,"line_end":563,"column_start":53,"column_end":58},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":3545},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":423819,"byte_end":423824,"line_start":571,"line_end":571,"column_start":32,"column_end":37},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":3545},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":424124,"byte_end":424129,"line_start":581,"line_end":581,"column_start":31,"column_end":36},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":3545},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":424472,"byte_end":424476,"line_start":594,"line_end":594,"column_start":52,"column_end":56},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":3487},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":424777,"byte_end":424781,"line_start":605,"line_end":605,"column_start":52,"column_end":56},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":3487},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":425083,"byte_end":425087,"line_start":616,"line_end":616,"column_start":53,"column_end":57},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":3487},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":425388,"byte_end":425392,"line_start":627,"line_end":627,"column_start":54,"column_end":58},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":3487},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":425693,"byte_end":425697,"line_start":638,"line_end":638,"column_start":53,"column_end":57},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":3487},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":425974,"byte_end":425978,"line_start":649,"line_end":649,"column_start":31,"column_end":35},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":3487},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":426340,"byte_end":426344,"line_start":660,"line_end":660,"column_start":30,"column_end":34},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":3487},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":426741,"byte_end":426745,"line_start":674,"line_end":674,"column_start":52,"column_end":56},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":3516},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":427046,"byte_end":427050,"line_start":685,"line_end":685,"column_start":52,"column_end":56},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":3516},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":427352,"byte_end":427356,"line_start":696,"line_end":696,"column_start":53,"column_end":57},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":3516},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":427657,"byte_end":427661,"line_start":707,"line_end":707,"column_start":54,"column_end":58},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":3516},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":427962,"byte_end":427966,"line_start":718,"line_end":718,"column_start":53,"column_end":57},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":3516},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":428290,"byte_end":428293,"line_start":732,"line_end":732,"column_start":53,"column_end":56},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":3400},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":428562,"byte_end":428565,"line_start":742,"line_end":742,"column_start":53,"column_end":56},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":3400},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":428833,"byte_end":428836,"line_start":752,"line_end":752,"column_start":52,"column_end":55},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":3400},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":429101,"byte_end":429104,"line_start":762,"line_end":762,"column_start":54,"column_end":57},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":3400},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":429368,"byte_end":429371,"line_start":772,"line_end":772,"column_start":53,"column_end":56},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":3400},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":429609,"byte_end":429612,"line_start":782,"line_end":782,"column_start":30,"column_end":33},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":3400},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":429837,"byte_end":429840,"line_start":790,"line_end":790,"column_start":29,"column_end":32},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":3400},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":430113,"byte_end":430116,"line_start":801,"line_end":801,"column_start":53,"column_end":56},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":3429},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":430384,"byte_end":430387,"line_start":811,"line_end":811,"column_start":52,"column_end":55},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":3429},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":430652,"byte_end":430655,"line_start":822,"line_end":822,"column_start":53,"column_end":56},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":3429},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":430925,"byte_end":430928,"line_start":832,"line_end":832,"column_start":54,"column_end":57},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":3429},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":431192,"byte_end":431195,"line_start":842,"line_end":842,"column_start":53,"column_end":56},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":3429},"to":{"krate":0,"index":1733}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":432861,"byte_end":432866,"line_start":896,"line_end":896,"column_start":30,"column_end":35},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":3545},"to":{"krate":0,"index":1867}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":433871,"byte_end":433875,"line_start":929,"line_end":929,"column_start":30,"column_end":34},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":3458},"to":{"krate":0,"index":1867}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":433985,"byte_end":433989,"line_start":935,"line_end":935,"column_start":30,"column_end":34},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":3487},"to":{"krate":0,"index":1867}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":436197,"byte_end":436201,"line_start":993,"line_end":993,"column_start":30,"column_end":34},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":3516},"to":{"krate":0,"index":1867}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":438407,"byte_end":438410,"line_start":1049,"line_end":1049,"column_start":30,"column_end":33},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":3400},"to":{"krate":0,"index":1867}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":438519,"byte_end":438522,"line_start":1055,"line_end":1055,"column_start":30,"column_end":33},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":3429},"to":{"krate":0,"index":1867}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":438741,"byte_end":438746,"line_start":1068,"line_end":1068,"column_start":31,"column_end":36},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":3545},"to":{"krate":0,"index":1887}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":438919,"byte_end":438923,"line_start":1077,"line_end":1077,"column_start":31,"column_end":35},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":3458},"to":{"krate":0,"index":1887}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":439111,"byte_end":439115,"line_start":1088,"line_end":1088,"column_start":31,"column_end":35},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":3487},"to":{"krate":0,"index":1887}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":439328,"byte_end":439332,"line_start":1099,"line_end":1099,"column_start":31,"column_end":35},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":3516},"to":{"krate":0,"index":1887}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":439545,"byte_end":439548,"line_start":1110,"line_end":1110,"column_start":31,"column_end":34},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":3400},"to":{"krate":0,"index":1887}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/color.rs","byte_start":439810,"byte_end":439813,"line_start":1124,"line_end":1124,"column_start":31,"column_end":34},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":3429},"to":{"krate":0,"index":1887}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":451349,"byte_end":451361,"line_start":134,"line_end":134,"column_start":6,"column_end":18},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":3625},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":476001,"byte_end":476013,"line_start":817,"line_end":817,"column_start":27,"column_end":39},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":3625},"to":{"krate":0,"index":2145}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/dynimage.rs","byte_start":476546,"byte_end":476558,"line_start":839,"line_end":839,"column_start":23,"column_end":35},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":3625},"to":{"krate":0,"index":2158}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":490835,"byte_end":490846,"line_start":64,"line_end":64,"column_start":6,"column_end":17},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":3658},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":493634,"byte_end":493651,"line_start":144,"line_end":144,"column_start":28,"column_end":45},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":3701},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":494951,"byte_end":494966,"line_start":181,"line_end":181,"column_start":6,"column_end":21},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":2087},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":502836,"byte_end":502844,"line_start":365,"line_end":365,"column_start":6,"column_end":14},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":3726},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":503350,"byte_end":503355,"line_start":385,"line_end":385,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1932},"to":{"krate":0,"index":2113}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":507051,"byte_end":507063,"line_start":482,"line_end":482,"column_start":32,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":2113},"to":{"krate":0,"index":2126}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":507070,"byte_end":507075,"line_start":482,"line_end":482,"column_start":51,"column_end":56},"kind":"SuperTrait","from":{"krate":2,"index":1932},"to":{"krate":0,"index":2126}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":509492,"byte_end":509498,"line_start":555,"line_end":555,"column_start":44,"column_end":50},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":3741},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":509966,"byte_end":509972,"line_start":577,"line_end":577,"column_start":27,"column_end":33},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":3741},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":512545,"byte_end":512561,"line_start":664,"line_end":664,"column_start":25,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":2145},"to":{"krate":0,"index":2158}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":518361,"byte_end":518369,"line_start":815,"line_end":815,"column_start":9,"column_end":17},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":2170},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":519506,"byte_end":519514,"line_start":856,"line_end":856,"column_start":30,"column_end":38},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":2170},"to":{"krate":0,"index":2145}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/image.rs","byte_start":520335,"byte_end":520343,"line_start":888,"line_end":888,"column_start":26,"column_end":34},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":2170},"to":{"krate":0,"index":2158}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":532370,"byte_end":532385,"line_start":12,"line_end":12,"column_start":35,"column_end":50},"kind":"SuperTrait","from":{"krate":0,"index":2298},"to":{"krate":0,"index":2218}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":532739,"byte_end":532743,"line_start":30,"line_end":30,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1937},"to":{"krate":0,"index":2224}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":532746,"byte_end":532753,"line_start":30,"line_end":30,"column_start":29,"column_end":36},"kind":"SuperTrait","from":{"krate":15,"index":176},"to":{"krate":0,"index":2224}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":532756,"byte_end":532759,"line_start":30,"line_end":30,"column_start":39,"column_end":42},"kind":"SuperTrait","from":{"krate":15,"index":589},"to":{"krate":0,"index":2224}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":532762,"byte_end":532772,"line_start":30,"line_end":30,"column_start":45,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1690},"to":{"krate":0,"index":2224}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":532781,"byte_end":532786,"line_start":30,"line_end":30,"column_start":64,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":1625},"to":{"krate":0,"index":2224}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":532789,"byte_end":532796,"line_start":30,"line_end":30,"column_start":72,"column_end":79},"kind":"SuperTrait","from":{"krate":15,"index":92},"to":{"krate":0,"index":2224}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":533272,"byte_end":533277,"line_start":47,"line_end":47,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1932},"to":{"krate":0,"index":2237}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":533280,"byte_end":533287,"line_start":47,"line_end":47,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":15,"index":92},"to":{"krate":0,"index":2237}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":533290,"byte_end":533297,"line_start":47,"line_end":47,"column_start":42,"column_end":49},"kind":"SuperTrait","from":{"krate":15,"index":176},"to":{"krate":0,"index":2237}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":533846,"byte_end":533853,"line_start":71,"line_end":71,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":15,"index":92},"to":{"krate":0,"index":2246}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":533856,"byte_end":533863,"line_start":71,"line_end":71,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":15,"index":176},"to":{"krate":0,"index":2246}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":534638,"byte_end":534642,"line_start":105,"line_end":105,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":1937},"to":{"krate":0,"index":2255}},{"span":{"file_name":"/home/bruno/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.9/./src/traits.rs","byte_start":534645,"byte_end":534650,"line_start":105,"line_end":105,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1625},"to":{"krate":0,"index":2255}}]}