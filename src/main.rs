use plotters::prelude::*;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let root =
        BitMapBackend::new("data/h_m_h0_j-.png", (1024, 768)).into_drawing_area();
    root.fill(&WHITE)?;

    let mut chart = ChartBuilder::on(&root)
        .x_label_area_size(35)
        .y_label_area_size(40)
        .margin(5)
        .caption("Energia Média, h = 0.0 , j<0 ", ("sans-serif", 50.0).into_font())
        .build_cartesian_2d(0f32..4.0f32, 0.0f32..2.0f32)?
        //.set_secondary_coord(0f32..4f32, -0.0f32..20.0f32)
        ;

    chart
        .configure_mesh()
        .disable_x_mesh()
        .disable_y_mesh()
        .x_desc("Temperatura")
        .y_desc("Energia Média")
        .draw()?;

    /*chart
        .configure_secondary_axes()
        .draw()?;
*/
    chart
    .draw_series(
        DATA1.iter().map(|point| Circle::new(*point, 3, BLUE.filled())),
    )?
        .label("j<0")
        .legend(|(x, y)| PathElement::new(vec![(x, y), (x + 20, y)], &BLUE));

    chart
    .draw_series(LineSeries::new(
        DATA1.iter().map(|point|*point),
        &BLUE,
    ))?;
/*
    chart
        .draw_secondary_series(
            DATA2.iter().map(|point| Circle::new(*point, 3, RED.filled())),
        )?
            .label("j<0")
            .legend(|(x, y)| PathElement::new(vec![(x, y), (x + 20, y)], &RED));
    
        chart
        .draw_secondary_series(LineSeries::new(
            DATA2.iter().map(|point|*point),
            &RED,
        ))?;
   */ 

    chart
        .configure_series_labels()
        .background_style(&RGBColor(128, 128, 128))
        .draw()?;

    Ok(())
}
#[test]
fn entry_point() {
    main().unwrap()
}
const DATA1: [(f32,f32);41] = [(0.0, 1.9), (0.1, 1.9), (0.2, 2.0), (0.3, 2.0), (0.4, 2.0), (0.5, 2.0), (0.6, 2.0), (0.7, 2.0), (0.8, 2.0), (0.9, 2.0), (1.0, 2.0), (1.1, 1.995), (1.2, 1.995), (1.3, 1.955), (1.4, 1.98), (1.5, 1.9225), (1.6, 1.955), (1.7, 1.8775), (1.8, 1.8725), (1.9, 1.8), (2.0, 1.735), (2.1, 1.79), (2.2, 1.5525), (2.3, 1.3), (2.4, 1.14), (2.5, 1.1225), (2.6, 1.0475), (2.7, 1.01), (2.8, 0.88), (2.9, 0.8025), (3.0, 0.9275), (3.1, 0.7), (3.2, 0.8), (3.3, 0.695), (3.4, 0.69), (3.5, 0.605), (3.6, 0.6275), (3.7, 0.5475), (3.8, 0.5775), (3.9, 0.6925), (4.0, 0.59)];
//const DATA2: [(f32,f32);58] = [(0.0, 0.0), (0.1, 99.99859374999998), (0.2, 24.999960937499996), (0.3, 11.11109375), (0.4, 6.249990234374999), (0.5, 3.99999375), (0.6, 2.7777734375), (0.7, 2.040803571428572), (0.8, 1.5624902343749998), (0.9, 1.2344733796296297), (1.0, 0.9999234375), (1.1, 0.8264411157024792), (1.2, 0.6944444444444444), (1.3, 0.5917150517751478), (1.4, 0.5101841517857144), (1.5, 0.4444333333333333), (1.6, 0.39061950683593744), (1.7, 0.34589911332179935), (1.8, 0.30863425925925925), (1.9, 0.27695593836565097), (2.0, 0.249952734375), (2.1, 0.2267517006802721), (2.2, 0.20661124741735534), (2.3, 0.1890170132325142), (2.4, 0.1736013454861111), (2.5, 0.159936), (2.6, 0.14786982248520708), (2.61, 0.14676458067262665), (2.62, 0.1456789286026455), (2.63, 0.1445081521346268), (2.64, 0.14347667011019283), (2.65, 0.14239854040583838), (2.66, 0.14131994989824184), (2.67, 0.14026620516489222), (2.68, 0.139223788357652), (2.69, 0.13810961705891295), (2.7, 0.13717078189300408), (2.71, 0.13616287223757848), (2.72, 0.13513880534980535), (2.73, 0.13415897670705365), (2.74, 0.1331151100218445), (2.75, 0.13222809917355371), (2.7600000000000002, 0.13127473712192814), (2.77, 0.1303041793194229), (2.7800000000000002, 0.12937994927798765), (2.79, 0.1284668025205226), (2.8, 0.12755022321428575), (2.9, 0.11889101516052318), (3.0, 0.11108177083333333), (3.1, 0.1040524193548387), (3.2, 0.09758895874023435), (3.3, 0.09181574265381084), (3.4, 0.08648572664359862), (3.5, 0.08162232142857143), (3.6, 0.07709104938271605), (3.7, 0.07303460555149743), (3.8, 0.06925196935595568), (3.9, 0.06571992110453649)];